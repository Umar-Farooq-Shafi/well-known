(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["app"],{

/***/ "./assets/css/app.scss":
/*!*****************************!*\
  !*** ./assets/css/app.scss ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/js/app.js":
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");
/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.string.search.js */ "./node_modules/core-js/modules/es.string.search.js");
/* harmony import */ var core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");
/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");
/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
/* harmony import */ var core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var bs_custom_file_input__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! bs-custom-file-input */ "./node_modules/bs-custom-file-input/dist/bs-custom-file-input.js");
/* harmony import */ var bs_custom_file_input__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(bs_custom_file_input__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var pnotify_dist_es_PNotify_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! pnotify/dist/es/PNotify.js */ "./node_modules/pnotify/dist/es/PNotify.js");
/* harmony import */ var pnotify_dist_es_PNotifyAnimate_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! pnotify/dist/es/PNotifyAnimate.js */ "./node_modules/pnotify/dist/es/PNotifyAnimate.js");
/* harmony import */ var pnotify_dist_es_PNotifyMobile_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! pnotify/dist/es/PNotifyMobile.js */ "./node_modules/pnotify/dist/es/PNotifyMobile.js");
/* harmony import */ var pnotify_dist_es_PNotifyButtons_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! pnotify/dist/es/PNotifyButtons.js */ "./node_modules/pnotify/dist/es/PNotifyButtons.js");
/* harmony import */ var jquery_confirm_dist_jquery_confirm_min_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! jquery-confirm/dist/jquery-confirm.min.js */ "./node_modules/jquery-confirm/dist/jquery-confirm.min.js");
/* harmony import */ var jquery_confirm_dist_jquery_confirm_min_js__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(jquery_confirm_dist_jquery_confirm_min_js__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var select2_select2_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! select2/select2.js */ "./node_modules/select2/select2.js");
/* harmony import */ var select2_select2_js__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(select2_select2_js__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var summernote_dist_summernote_bs4_min_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! summernote/dist/summernote-bs4.min.js */ "./node_modules/summernote/dist/summernote-bs4.min.js");
/* harmony import */ var summernote_dist_summernote_bs4_min_js__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(summernote_dist_summernote_bs4_min_js__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var nouislider_distribute_nouislider_min_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! nouislider/distribute/nouislider.min.js */ "./node_modules/nouislider/distribute/nouislider.min.js");
/* harmony import */ var nouislider_distribute_nouislider_min_js__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(nouislider_distribute_nouislider_min_js__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var wnumb_wNumb_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! wnumb/wNumb.js */ "./node_modules/wnumb/wNumb.js");
/* harmony import */ var wnumb_wNumb_js__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(wnumb_wNumb_js__WEBPACK_IMPORTED_MODULE_32__);
/* harmony import */ var readmore_js_dist_readmore_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! readmore-js/dist/readmore.js */ "./node_modules/readmore-js/dist/readmore.js");
/* harmony import */ var readmore_js_dist_readmore_js__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(readmore_js_dist_readmore_js__WEBPACK_IMPORTED_MODULE_33__);
/* harmony import */ var blazy_blazy_min_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! blazy/blazy.min.js */ "./node_modules/blazy/blazy.min.js");
/* harmony import */ var blazy_blazy_min_js__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(blazy_blazy_min_js__WEBPACK_IMPORTED_MODULE_34__);
/* harmony import */ var add_to_calendar_buttons_ouical_min_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! add-to-calendar-buttons/ouical.min.js */ "./node_modules/add-to-calendar-buttons/ouical.min.js");
/* harmony import */ var add_to_calendar_buttons_ouical_min_js__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(add_to_calendar_buttons_ouical_min_js__WEBPACK_IMPORTED_MODULE_35__);
/* harmony import */ var typeahead_js_dist_bloodhound_min_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! typeahead.js/dist/bloodhound.min.js */ "./node_modules/typeahead.js/dist/bloodhound.min.js");
/* harmony import */ var typeahead_js_dist_bloodhound_min_js__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(typeahead_js_dist_bloodhound_min_js__WEBPACK_IMPORTED_MODULE_36__);
/* harmony import */ var _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../../vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.min.js */ "./vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.min.js");
/* harmony import */ var _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(_vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_37__);
/* harmony import */ var handlebars_dist_handlebars_min_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! handlebars/dist/handlebars.min.js */ "./node_modules/handlebars/dist/handlebars.min.js");
/* harmony import */ var handlebars_dist_handlebars_min_js__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(handlebars_dist_handlebars_min_js__WEBPACK_IMPORTED_MODULE_38__);
/* harmony import */ var moment_moment_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! moment/moment.js */ "./node_modules/moment/moment.js");
/* harmony import */ var moment_moment_js__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(moment_moment_js__WEBPACK_IMPORTED_MODULE_39__);
/* harmony import */ var _vendor_knppaginator_ajax_knppaginator_ajax_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../vendor/knppaginator-ajax/knppaginator-ajax.js */ "./assets/vendor/knppaginator-ajax/knppaginator-ajax.js");
/* harmony import */ var _vendor_caleandar_js_caleandar_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../vendor/caleandar.js/caleandar.js */ "./assets/vendor/caleandar.js/caleandar.js");
/* harmony import */ var _vendor_bootboxjs_bootbox_min__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../vendor/bootboxjs/bootbox.min */ "./assets/vendor/bootboxjs/bootbox.min.js");
/* harmony import */ var _vendor_bootboxjs_bootbox_min__WEBPACK_IMPORTED_MODULE_42___default = /*#__PURE__*/__webpack_require__.n(_vendor_bootboxjs_bootbox_min__WEBPACK_IMPORTED_MODULE_42__);
/* harmony import */ var _vendor_jquery_cookieBar_jquery_cookieBar_min_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../vendor/jquery.cookieBar/jquery.cookieBar.min.js */ "./assets/vendor/jquery.cookieBar/jquery.cookieBar.min.js");
/* harmony import */ var _vendor_jquery_cookieBar_jquery_cookieBar_min_js__WEBPACK_IMPORTED_MODULE_43___default = /*#__PURE__*/__webpack_require__.n(_vendor_jquery_cookieBar_jquery_cookieBar_min_js__WEBPACK_IMPORTED_MODULE_43__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

























// css & scss
__webpack_require__(/*! ../css/app.scss */ "./assets/css/app.scss");

__webpack_require__(/*! pace-progressbar/themes/orange/pace-theme-minimal.css */ "./node_modules/pace-progressbar/themes/orange/pace-theme-minimal.css");

__webpack_require__(/*! fontawesome-iconpicker/dist/css/fontawesome-iconpicker.min.css */ "./node_modules/fontawesome-iconpicker/dist/css/fontawesome-iconpicker.min.css");

__webpack_require__(/*! @fortawesome/fontawesome-free/css/all.min.css */ "./node_modules/@fortawesome/fontawesome-free/css/all.min.css");

__webpack_require__(/*! ../vendor/owlcarousel/assets/owl.carousel.min.css */ "./assets/vendor/owlcarousel/assets/owl.carousel.min.css");

__webpack_require__(/*! ../vendor/owlcarousel/assets/owl.theme.default.min.css */ "./assets/vendor/owlcarousel/assets/owl.theme.default.min.css");

__webpack_require__(/*! ../vendor/jssocials/jssocials.css */ "./assets/vendor/jssocials/jssocials.css");

__webpack_require__(/*! ../vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css */ "./assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css");

__webpack_require__(/*! pnotify/dist/PNotifyBrightTheme.css */ "./node_modules/pnotify/dist/PNotifyBrightTheme.css");

__webpack_require__(/*! jquery-confirm/dist/jquery-confirm.min.css */ "./node_modules/jquery-confirm/dist/jquery-confirm.min.css");

__webpack_require__(/*! select2/select2.css */ "./node_modules/select2/select2.css");

__webpack_require__(/*! summernote/dist/summernote-bs4.min.css */ "./node_modules/summernote/dist/summernote-bs4.min.css");

__webpack_require__(/*! ../vendor/select2/select2-bootstrap4.min.css */ "./assets/vendor/select2/select2-bootstrap4.min.css");

__webpack_require__(/*! ../vendor/photoswipe/photoswipe.css */ "./assets/vendor/photoswipe/photoswipe.css");

__webpack_require__(/*! ../vendor/photoswipe/default-skin/default-skin.css */ "./assets/vendor/photoswipe/default-skin/default-skin.css");

__webpack_require__(/*! nouislider/distribute/nouislider.min.css */ "./node_modules/nouislider/distribute/nouislider.min.css");

__webpack_require__(/*! @adactive/bootstrap-tagsinput/dist/bootstrap-tagsinput.css */ "./node_modules/@adactive/bootstrap-tagsinput/dist/bootstrap-tagsinput.css");

__webpack_require__(/*! jquery-datetimepicker/build/jquery.datetimepicker.min.css */ "./node_modules/jquery-datetimepicker/build/jquery.datetimepicker.min.css");

__webpack_require__(/*! snazzy-info-window/dist/snazzy-info-window.min.css */ "./node_modules/snazzy-info-window/dist/snazzy-info-window.min.css");

__webpack_require__(/*! animate.css/animate.min.css */ "./node_modules/animate.css/animate.min.css");

__webpack_require__(/*! material-scrolltop/dist/material-scrolltop.css */ "./node_modules/material-scrolltop/dist/material-scrolltop.css");

__webpack_require__(/*! ../vendor/jquery.cookieBar/jquery.cookieBar.min.css */ "./assets/vendor/jquery.cookieBar/jquery.cookieBar.min.css"); // js


var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

Window.prototype.$ = $; //HERE IS MY SOLUTION (Without this line it doesn't work!)
//Here I declare bootstrap

__webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.esm.js"); //..
// I include some library which need JQuery


__webpack_require__(/*! bootstrap/js/dist/tooltip */ "./node_modules/bootstrap/js/dist/tooltip.js");

__webpack_require__(/*! bootstrap/js/dist/popover */ "./node_modules/bootstrap/js/dist/popover.js");

 //const $ = require('jquery');
//global.$ = global.jQuery = $;

__webpack_require__(/*! ./bootstrap.bundle.min.js */ "./assets/js/bootstrap.bundle.min.js");








window.Translator = __webpack_require__(/*! bazinga-translator */ "./node_modules/bazinga-translator/js/translator.js");

__webpack_require__(/*! pace-progressbar */ "./node_modules/pace-progressbar/index.js");

__webpack_require__(/*! fontawesome-iconpicker */ "./node_modules/fontawesome-iconpicker/dist/js/fontawesome-iconpicker.js");

__webpack_require__(/*! ../vendor/owlcarousel/owl.carousel.min.js */ "./assets/vendor/owlcarousel/owl.carousel.min.js");

__webpack_require__(/*! ../vendor/jssocials/jssocials.min.js */ "./assets/vendor/jssocials/jssocials.min.js");

__webpack_require__(/*! ../vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js */ "./assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js");

__webpack_require__(/*! ../vendor/morphext/morphext.min.js */ "./assets/vendor/morphext/morphext.min.js");

__webpack_require__(/*! waypoints/lib/jquery.waypoints.min.js */ "./node_modules/waypoints/lib/jquery.waypoints.min.js");

__webpack_require__(/*! ../vendor/jquery.countdown/jquery.countdown.min.js */ "./assets/vendor/jquery.countdown/jquery.countdown.min.js");

__webpack_require__(/*! ../vendor/counter-up/jquery.counterup.min.js */ "./assets/vendor/counter-up/jquery.counterup.min.js");

__webpack_require__(/*! ../vendor/circle-progress/circle-progress.min.js */ "./assets/vendor/circle-progress/circle-progress.min.js");

__webpack_require__(/*! ../js/translations/config.js */ "./assets/js/translations/config.js");

__webpack_require__(/*! ../js/translations/en.js */ "./assets/js/translations/en.js");

__webpack_require__(/*! ../js/translations/fr.js */ "./assets/js/translations/fr.js");

__webpack_require__(/*! ../js/translations/es.js */ "./assets/js/translations/es.js");

__webpack_require__(/*! ../js/translations/ar.js */ "./assets/js/translations/ar.js");

global.PhotoSwipe = __webpack_require__(/*! ../vendor/photoswipe/photoswipe.min.js */ "./assets/vendor/photoswipe/photoswipe.min.js");
global.PhotoSwipeUI_Default = __webpack_require__(/*! ../vendor/photoswipe/photoswipe-ui-default.min.js */ "./assets/vendor/photoswipe/photoswipe-ui-default.min.js");

__webpack_require__(/*! ../vendor/jq-photoswipe/jqPhotoSwipe.min.js */ "./assets/vendor/jq-photoswipe/jqPhotoSwipe.min.js");

__webpack_require__(/*! ../vendor/ninsuo-symfony-collection/jquery.collection.js */ "./assets/vendor/ninsuo-symfony-collection/jquery.collection.js");

__webpack_require__(/*! ../vendor/pugxautocompleter/autocompleter-select2.js */ "./assets/vendor/pugxautocompleter/autocompleter-select2.js");




__webpack_require__(/*! @adactive/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js */ "./node_modules/@adactive/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js");

__webpack_require__(/*! jquery-datetimepicker/build/jquery.datetimepicker.full.min.js */ "./node_modules/jquery-datetimepicker/build/jquery.datetimepicker.full.min.js");






__webpack_require__(/*! typeahead.js/dist/typeahead.jquery.min.js */ "./node_modules/typeahead.js/dist/typeahead.jquery.min.js");

var routes = __webpack_require__(/*! ../../web/js/fos_js_routes.json */ "./web/js/fos_js_routes.json");


_vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_37___default.a.setRoutingData(routes);



__webpack_require__(/*! moment-timezone/builds/moment-timezone-with-data-2012-2022.min.js */ "./node_modules/moment-timezone/builds/moment-timezone-with-data-2012-2022.min.js");



__webpack_require__(/*! jquery-parallax.js/parallax.min.js */ "./node_modules/jquery-parallax.js/parallax.min.js");




__webpack_require__(/*! material-scrolltop/dist/material-scrolltop.js */ "./node_modules/material-scrolltop/dist/material-scrolltop.js");


$(document).ready(function () {
  // Declares utility functions
  // Sets the language for the date pickers
  $.datetimepicker.setLocale($("html").attr("lang")); // Retreives a parameter value passed in the url

  function getURLParameter(paramatername) {
    return decodeURIComponent((new RegExp('[?|&]' + paramatername + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [, ""])[1].replace(/\+/g, '%20')) || null;
  } // Retreives an array parameter value passed in the url


  function getURLArrayParameter(paramatername) {
    paramatername = encodeURIComponent(paramatername);
    var match = window.location.href.match(/[^=&?]+\s*=\s*[^&#]*/g);
    var obj = {};

    for (var i = match.length; i--;) {
      var spl = match[i].split("=");
      var name = spl[0].replace("[]", "");
      var value = spl[1];
      obj[name] = obj[name] || [];
      obj[name].push(value);
    }

    if (obj[paramatername] !== undefined) {
      return obj[paramatername];
    } else {
      return null;
    }
  } // Checks if an email address is valid


  function isEmailValid(email) {
    var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return regex.test(email);
  } // Animates an element using the animate.css library


  function animateCSS(element, animationName, callback) {
    var node = document.querySelector(element);
    node.classList.add('animated', animationName);

    function handleAnimationEnd() {
      node.classList.remove('animated', animationName);
      node.removeEventListener('animationend', handleAnimationEnd);
      if (typeof callback === 'function') callback();
    }

    node.addEventListener('animationend', handleAnimationEnd);
  }

  global.getURLParameter = getURLParameter;
  global.getURLArrayParameter = getURLArrayParameter;
  $(function () {
    //INIT hidden recurrent dates
    if ($('.is-event-recurrent').length) {
      $('#event_eventdates_0_recurrent > div:first').remove();

      if ($('.is-event-recurrent input:checked').val() === '0' || $('.is-event-recurrent input:checked').val() === undefined) {
        $('.start-date-dp').closest('.form-group').show();
        $('.end-date-dp').closest('.form-group').show();
        $('.recurrent-start-date-dp').closest('.form-group').hide();
        $('.recurrent-end-date-dp').closest('.form-group').hide();
        $('.event-date-add-button').show();

        for (var _i = 1; _i < 5; _i++) {
          $('#event_eventdates_' + _i + '_recurrent').closest('.form-group').remove();
        }
      }

      if ($('.is-event-recurrent input:checked').val() === '1') {
        $('.start-date-dp').closest('.form-group').hide();
        $('.end-date-dp').closest('.form-group').hide();
        $('.recurrent-start-date-dp').closest('.form-group').show();
        $('.recurrent-end-date-dp').closest('.form-group').show();
        $('.event-date-add-button').hide();
      }
    }
  }); // Initializes bootstrap components

  $('[data-toggle="popover"], .has-popover').popover();
  $('[data-toggle="tooltip"], .has-tooltip').tooltip({
    trigger: 'hover'
  }); // Sets input file name

  $(document).on('change', '.custom-file-input', function (e) {
    $(e.target).siblings('.custom-file-label').html(e.target.files[0].name);
  }); //sync recurring start and end date with event start end date

  $(document).on('change', '.recurrent-start-date-dp', function (e) {
    $('.start-date-dp').val($(this).val());
  });
  $(document).on('change', '.recurrent-end-date-dp', function (e) {
    $('.end-date-dp').val($(this).val());
  }); //toggle display recurring events

  $(document).on('click', '.is-event-recurrent', function (e) {
    if ($('.is-event-date-active').length > 1) {
      e.preventDefault();
      return;
    }

    if ($('.is-event-recurrent input:checked').val() === '0') {
      $('.start-date-dp').closest('.form-group').show();
      $('.end-date-dp').closest('.form-group').show();
      $('.recurrent-start-date-dp').closest('.form-group').hide();
      $('.recurrent-end-date-dp').closest('.form-group').hide();
      $('.event-date-add-button').show();
    }

    if ($('.is-event-recurrent input:checked').val() === '1') {
      $('.start-date-dp').closest('.form-group').hide();
      $('.end-date-dp').closest('.form-group').hide();
      $('.recurrent-start-date-dp').closest('.form-group').show();
      $('.recurrent-end-date-dp').closest('.form-group').show();
      $('.event-date-add-button').hide();
    }
  }); // Resets forms

  $('button[type="reset"]').on('click', function (e) {
    $(this).closest('form').find('input[type="text"], input:password, input:file, textarea').val('');
    $(this).closest('form').find('input[type="text"], input:password, input:file, textarea').attr('value', '');
    $(this).closest('form').find('.autocomplete').each(function () {
      $('#fake_' + $(this).attr('id')).select2('data', {});
    });
    $(this).closest('form').find('select').val("all").trigger('change');
    $(this).closest('form').find('input:radio, input:checkbox').removeAttr('checked').removeAttr('selected');
  }); // Fixes disabled links with a tooltip

  $("a.btn.disabled.has-tooltip").click(function (e) {
    e.preventDefault();
    return false;
  }); // Prevents closing from click inside dropdown

  $(document).on('click', '.dropdown-menu', function (e) {
    e.stopPropagation();
  });

  if ($(window).width() > 768) {
    $(window).scroll(function () {
      // Fixes menu on scroll for desktop
      if ($('.navbar-landing').length) {
        if ($(this).scrollTop() > 125) {
          $('.navbar-landing').addClass("fixed-top");
        } else {
          $('.navbar-landing').removeClass("fixed-top");
        }
      } // Sticky sidebar padding


      if ($('.sticky-sidebar').length) {
        if ($('.sticky-sidebar').offset().top <= $(this).scrollTop()) {
          $('.sticky-sidebar').addClass('pt-lg-6');
        } else {
          $('.sticky-sidebar').removeClass('pt-lg-6');
        }
      }
    });
  } // Closes the Responsive Menu on Menu Item Click


  $('.navbar-collapse ul li a.page-scroll').click(function () {
    $('.navbar-toggler:visible').click();
  }); // Handles top search form

  $(".header-main form.search-wrap").submit(function (e) {
    if ($(this).find(".top-search").val() == "") {
      e.preventDefault();
    }
  });
  $(".header-main form.search-wrap .input-icon > i").click(function () {
    $(".header-main form.search-wrap").submit();
  }); // Jssocials share

  if ($('.sharer').length) {
    $(".sharer").jsSocials({
      showLabel: false,
      showCount: false,
      shares: [{
        renderer: function renderer() {
          var $result = $("<div>");
          var script = document.createElement("script");
          script.text = "(function(d, s, id) {var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"//connect.facebook.net/en_EN/sdk.js#xfbml=1&version=v2.3\"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));";
          $result.append(script);
          $("<div>").addClass("fb-share-button").attr("data-layout", "button_count").appendTo($result);
          return $result;
        }
      }, {
        renderer: function renderer() {
          var $result = $("<div>");
          var script = document.createElement("script");
          script.src = "https://apis.google.com/js/platform.js";
          $result.append(script);
          $("<div>").addClass("g-plus").attr({
            "data-action": "share",
            "data-annotation": "bubble"
          }).appendTo($result);
          return $result;
        }
      }, {
        renderer: function renderer() {
          var $result = $("<div>");
          var script = document.createElement("script");
          script.text = "window.twttr=(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],t=window.twttr||{};if(d.getElementById(id))return t;js=d.createElement(s);js.id=id;js.src=\"https://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);t._e=[];t.ready=function(f){t._e.push(f);};return t;}(document,\"script\",\"twitter-wjs\"));";
          $result.append(script);
          $("<a>").addClass("twitter-share-button").text("Tweet").attr("href", "https://twitter.com/share").appendTo($result);
          return $result;
        }
      }, {
        renderer: function renderer() {
          var $result = $("<div>");
          var script = document.createElement("script");
          script.src = "//platform.linkedin.com/in.js";
          $result.append(script);
          $("<script>").attr({
            type: "IN/Share",
            "data-counter": "right"
          }).appendTo($result);
          return $result;
        }
      }]
    });
  } // Bootstrap Touchspin


  if ($('.touchspin-integer').length) {
    $(".touchspin-integer").TouchSpin({
      verticalbuttons: true,
      min: $(this).data('min'),
      max: $(this).data('max')
    });
  }

  if ($('.touchspin-decimal').length) {
    $(".touchspin-decimal").TouchSpin({
      verticalbuttons: true,
      min: $(this).data('min'),
      max: $(this).data('max'),
      decimals: 2,
      step: 0.01,
      prefix: $('body').data('currency-symbol')
    });
  } // Implements on hover trigger for bootstrap 4 dropdowns


  function toggleDropdown(e) {
    var _d = $(e.target).closest('.dropdown'),
        _m = $('.dropdown-menu', _d);

    setTimeout(function () {
      var shouldOpen = e.type !== 'click' && _d.is(':hover');

      _m.toggleClass('show', shouldOpen);

      _d.toggleClass('show', shouldOpen);

      $('[data-toggle="dropdown"]', _d).attr('aria-expanded', shouldOpen);
    }, e.type === 'mouseleave' ? 25 : 0);
  }

  $('body').on('mouseenter mouseleave', '.dropdown-hover', toggleDropdown).on('click', '.dropdown-menu a', toggleDropdown); // Initializes word rotator

  if ($('.rotate-words').length) {
    $('.rotate-words').Morphext({
      animation: "fadeIn",
      separator: "|",
      speed: 2000
    });
  } // Initializes checkout timer


  if ($('.checkout-timer').length) {
    $('.checkout-timer').each(function () {
      var $checkouttimer = $(this);
      var $checkouttimerto = moment_moment_js__WEBPACK_IMPORTED_MODULE_39___default()().add($checkouttimer.data('seconds-left'), 'seconds').format('YYYY-MM-DD HH:mm:ss');
      $checkouttimer.countdown($checkouttimerto, function (event) {
        if (event.strftime('%M') < 2) {
          $('.checkout-timer-wrapper > .alert').removeClass('alert-warning').addClass('alert-danger');
        }

        if (event.strftime('%M') < 1) {
          animateCSS('.checkout-timer-wrapper', 'flash');
        }

        $(this).html(event.strftime('%M:%S'));
      }).on('finish.countdown', function () {
        $('#checkout_submit').prop('disabled', true);
        $.confirm({
          title: Translator.trans("Time's up", {}, 'javascript'),
          content: Translator.trans("The tickets have been released", {}, 'javascript'),
          theme: 'supervan',
          buttons: {
            confirm: {
              text: Translator.trans('Return to cart', {}, 'javascript'),
              btnClass: 'btn-primary btn-sm',
              keys: ['enter'],
              action: function action() {
                location.href = location.protocol + '//' + location.host + _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_37___default.a.generate('dashboard_attendee_cart', {}, false);
              }
            }
          }
        });
      });
    });
  } // Initializes Event start countdown


  if ($('.countdown').length) {
    $('.countdown').each(function () {
      var $thiscountdown = $(this);
      var $countdownto = $thiscountdown.data('count-down-to');
      $thiscountdown.countdown($countdownto, function (event) {
        $(this).html(event.strftime('' + '<span>%w</span> ' + Translator.trans('weeks', {}, 'javascript') + ' ' + '<span>%d</span> ' + Translator.trans('days', {}, 'javascript') + ' ' + '<span>%H</span> ' + Translator.trans('hr', {}, 'javascript') + ' ' + '<span>%M</span> ' + Translator.trans('min', {}, 'javascript') + ' ' + '<span>%S</span> ' + Translator.trans('sec', {}, 'javascript') + ' '));
      });
    });
  } // PNotify notification ( success, notice, info, error )


  function showStackBarTop(type, title, text) {
    if (typeof window.stackBarTop === 'undefined') {
      window.stackBarTop = {
        'dir1': 'down',
        'firstpos1': 0,
        'spacing1': 0,
        'push': 'top'
      };
    }

    var opts = {
      type: type,
      title: title,
      text: text,
      addClass: 'stack-bar-top',
      cornerClass: 'ui-pnotify-sharp',
      shadow: true,
      width: '100%',
      stack: window.stackBarTop,
      styling: 'bootstrap4',
      icons: 'fontawesome5',
      hide: true,
      delay: 8000,
      mouseReset: true,
      modules: {
        Animate: {
          animate: true,
          inClass: "fadeInDown",
          outClass: "fadeOutUp"
        }
      },
      Buttons: {
        closer: false,
        closerHover: true,
        sticker: false,
        stickerHover: true,
        labels: {
          close: Translator.trans('Close', {}, 'javascript'),
          stick: Translator.trans('Stick', {}, 'javascript'),
          unstick: Translator.trans('Unstick', {}, 'javascript')
        }
      },
      Mobile: {
        swipeDismiss: true,
        styling: true
      }
    };
    pnotify_dist_es_PNotify_js__WEBPACK_IMPORTED_MODULE_24__["default"].removeAll();
    pnotify_dist_es_PNotify_js__WEBPACK_IMPORTED_MODULE_24__["default"].alert(opts);
  }

  global.showStackBarTop = showStackBarTop;

  if ($('.flash-message').length) {
    $('.flash-message').each(function () {
      showStackBarTop($(this).data('type'), '', $(this).data('message'));
    });
  } // Initializes counters


  if ($('.counter').length) {
    $('.counter').counterUp({
      delay: 10,
      time: 1000
    });
  } // Initializes circular progress


  if ($('.chart-circle').length) {
    $('.chart-circle').each(function () {
      var $this = $(this);
      $this.circleProgress({
        fill: {
          gradient: ["red", "green"]
        },
        size: $this.height(),
        startAngle: -Math.PI / 4 * 2,
        emptyFill: '#F4F4F4',
        lineCap: 'round'
      });
    });
  } // Focuses on form errors


  var offsettop = 100;

  if ($(window).width() < 992) {
    offsettop = 170;
  }

  if ($('.form-control.is-invalid').length > 0) {
    $('html, body').animate({
      scrollTop: $($('.form-control.is-invalid')[0]).offset().top - offsettop
    }, 0);
  } // Initializes Jquery Confirm


  $(document).on('click', '.requires-confirmation', function (e) {
    e.preventDefault();
    var $thisElement = $(this);
    var $confirmDialog = $.confirm({
      title: Translator.trans('Confirmation required', {}, 'javascript'),
      content: $thisElement.data('confirmation-text'),
      buttons: {
        confirm: {
          text: Translator.trans('Confirm', {}, 'javascript'),
          btnClass: 'btn-primary btn-sm',
          keys: ['enter'],
          action: function action() {
            location.href = $thisElement.data('target');
          }
        },
        cancel: {
          text: Translator.trans('Cancel', {}, 'javascript'),
          btnClass: 'btn-default btn-sm',
          keys: ['esc'],
          action: function action() {
            $confirmDialog.close();
          }
        }
      }
    });
  });
  $(document).on('click', '.ajax-loading', function (e) {
    e.preventDefault();
    var $thisElement = $(this);
    var $confirmDialog = $.confirm({
      title: $thisElement.data('title'),
      columnClass: 'col-12',
      backgroundDismiss: true,
      content: function content() {
        var self = this;
        return $.ajax({
          url: $thisElement.data('url'),
          dataType: 'html',
          method: 'get'
        }).done(function (response) {
          self.setContent(response);
        }).fail(function () {
          self.setContent(Translator.trans('An error has occured', {}, 'javascript'));
        });
      },
      onContentReady: function onContentReady() {
        if ($('.fancybox').length) {
          $(".fancybox").jqPhotoSwipe();
        }

        if ($('.gallery').length) {
          $(".gallery a").jqPhotoSwipe({
            forceSingleGallery: true
          });
        }
      },
      buttons: {
        close: {
          text: Translator.trans('Close', {}, 'javascript'),
          btnClass: 'btn-default btn-sm',
          keys: ['esc'],
          action: function action() {
            $confirmDialog.close();
          }
        }
      }
    });
  });
  $(document).on('change', '#event_country', function (e) {
    var url = $(this).data('url').replace("0", $(this).val());
    console.log(url);
    $.ajax({
      url: url,
      dataType: 'json',
      method: 'get'
    }).done(function (response) {
      $('.event-date-venue').empty();
      $.each(response, function () {
        $('.event-date-venue').append($("<option />").val(this.id).text(this.name));
      });
    }).fail(function (err) {
      console.log(err);
    });
  }); // Initializes Font Awesome picker

  if ($('.icon-picker').length) {
    $('.icon-picker').iconpicker({
      animation: false,
      inputSearch: true
    });
  } // Initializes select2


  $('.select2').each(function () {
    if ($(this).data("sort-options") == "1") {
      $(this).select2({
        theme: 'bootstrap4',
        allowClear: true,
        placeholder: Translator.trans('Select an option', {}, 'javascript'),
        sortResults: function sortResults(data) {
          return data.sort(function (a, b) {
            return a.text.localeCompare(b.text);
          });
        }
      });
    } else {
      $(this).select2({
        theme: 'bootstrap4',
        allowClear: true,
        placeholder: Translator.trans('Select an option', {}, 'javascript')
      });
    }
  }); // Sortable select

  if ($('#sortable-select').length) {
    $('#sortable-select option').each(function () {
      if ($(this).data('direction') == getURLParameter('direction') && $(this).data('criteria') == getURLParameter('sort')) {
        $(this).prop('selected', true).trigger('change');
        $(this).prop('disabled', true).trigger('change');
        $('#slug').val(getURLParameter('sort')).change();
      }
    });
  }

  $('#sortable-select').on('select2-selecting', function (e) {
    window.location = e.val;
  }); // Initializes Photoswipe gallery

  if ($('.fancybox').length) {
    $(".fancybox").jqPhotoSwipe();
  }

  if ($('.gallery').length) {
    $(".gallery a").jqPhotoSwipe({
      forceSingleGallery: true
    });
  } // Initializes wysiwyg editor


  if ($('.wysiwyg').length) {
    $('.wysiwyg').summernote({
      height: 500
    });
  } // Initializes form collection plugin


  if ($('.form-collection:not(.manual-init)').length) {
    $('.form-collection:not(.manual-init)').each(function () {
      $(this).collection({
        add_at_the_end: true,
        allow_add: true,
        allow_remove: true,
        allow_up: true,
        allow_down: true,
        add: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm"><i class="fas fa-plus-square"></i> ' + Translator.trans('Add', {}, 'javascript') + '</a>',
        remove: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm"><i class="fas fa-minus-square"></i> ' + Translator.trans('Remove', {}, 'javascript') + '</a>',
        up: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm"><i class="fas fa-caret-square-up"></i> ' + Translator.trans('Move up', {}, 'javascript') + '</a>',
        down: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm"><i class="fas fa-caret-square-down"></i> ' + Translator.trans('Move down', {}, 'javascript') + '</a>',
        position_field_selector: '.form-collection-position'
      });
    });
  } // Initializes range slider


  if ($('.range-slider').length) {
    $('.range-slider').each(function () {
      var $thisRangerSlider = $(this);
      nouislider_distribute_nouislider_min_js__WEBPACK_IMPORTED_MODULE_31___default.a.create($thisRangerSlider[0], {
        start: [$thisRangerSlider.data('start-left'), $thisRangerSlider.data('start-right')],
        direction: $('html').attr('lang') == 'ar' ? 'rtl' : 'ltr',
        connect: true,
        range: {
          'min': $thisRangerSlider.data('min'),
          'max': $thisRangerSlider.data('max')
        },
        format: wnumb_wNumb_js__WEBPACK_IMPORTED_MODULE_32___default()({
          decimals: 0
        })
      });
      $thisRangerSlider[0].noUiSlider.on('update', function (values, handle) {
        $thisRangerSlider.siblings('.ranger-slider-inputs').find('.range-slider-min-input').val(values[0]);
        $thisRangerSlider.siblings('.ranger-slider-inputs').find('.range-slider-max-input').val(values[1]);
      });
      $thisRangerSlider.siblings('.ranger-slider-inputs').find('.range-slider-min-input').on('change', function () {
        $thisRangerSlider[0].noUiSlider.set([this.value, null]);
      });
      $thisRangerSlider.siblings('.ranger-slider-inputs').find('.range-slider-max-input').on('change', function () {
        $thisRangerSlider[0].noUiSlider.set([null, this.value]);
      });
    });
  } // Select2 autocomplete


  if ($('.autocomplete').length) {
    $('.autocomplete').each(function () {
      var $thisAutocomplete = $(this);
      $thisAutocomplete.autocompleter({
        url_list: $thisAutocomplete.data('url-list'),
        otherOptions: {
          minimumInputLength: typeof $thisAutocomplete.data("minimum-input-length") !== 'undefined' ? $thisAutocomplete.data("minimum-input-length") : 3,
          formatNoMatches: Translator.trans('No results found', {}, 'javascript'),
          formatSearching: Translator.trans('Searching ...', {}, 'javascript'),
          formatInputTooShort: Translator.trans('Insert at least 3 characters', {}, 'javascript')
        }
      });
    });
  } // Tags input


  if ($(".tags-input").length) {
    $(".tags-input").each(function () {
      $(this).tagsinput({
        tagClass: 'badge badge-primary'
      });
    });
    $('.bootstrap-tagsinput').each(function () {
      $(this).addClass('form-control');
    });
  } // Datetimepickers


  if ($('.datetimepicker').length) {
    $('.datetimepicker').each(function () {
      $(this).datetimepicker({
        format: 'Y-m-d H:i'
      });
    });
  }

  if ($('.datepicker').length) {
    $('.datepicker').each(function () {
      $(this).datetimepicker({
        format: 'Y-m-d',
        timepicker: false
      });
    });
  }

  if ($('.event-date-pick').length) {
    $('.event-date-pick').each(function () {
      $(this).datetimepicker({
        format: 'Y-m-d',
        timepicker: false,
        minDate: new Date($(this).data('startdate')) < new Date() ? new Date() : $(this).data('startdate'),
        maxDate: $(this).data('enddate')
      });
    });
  }

  if ($('#event_country').length) {
    var $eventCountrySelect = $('#event_country');
    var eventVal = $('.event-date-venue').val();

    if ($eventCountrySelect !== undefined && $eventCountrySelect.val() !== '') {
      console.log($eventCountrySelect.data('url'));
      var url = $eventCountrySelect.data('url').replace('0', $eventCountrySelect.val());
      console.log(url);
      $.ajax({
        url: url,
        dataType: 'json',
        method: 'get'
      }).done(function (response) {
        console.log(response);
        $('.event-date-venue').empty();
        $('.event-date-venue').append('<option value=""></option>');
        $.each(response, function () {
          $('.event-date-venue').append($("<option />").val(this.id).text(this.name));
          $('.event-date-venue').val(eventVal);
        });
      }).fail(function (err) {
        console.log(err);
      });
    }
  } // Event form dates collection


  if ($('.eventdates-collection').length) {
    $('.eventdates-collection').each(function () {
      $(this).collection({
        min: 1,
        prefix: 'eventdate',
        add_at_the_end: true,
        allow_add: true,
        allow_remove: true,
        allow_duplicate: false,
        allow_up: true,
        allow_down: true,
        add: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-date-add-button"><i class="fas fa-plus-square"></i> ' + Translator.trans('Add a new event date', {}, 'javascript') + '</a>',
        remove: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-date-remove-button"><i class="fas fa-minus-square"></i> ' + Translator.trans('Remove this event date', {}, 'javascript') + '</a>',
        duplicate: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-date-duplicate-button"><i class="fas fa-clone"></i> ' + Translator.trans('Duplicate this event date', {}, 'javascript') + '</a>',
        up: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-date-up-button"><i class="fas fa-caret-square-up"></i> ' + Translator.trans('Move up', {}, 'javascript') + '</a>',
        down: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-date-down-button"><i class="fas fa-caret-square-down"></i> ' + Translator.trans('Move down', {}, 'javascript') + '</a>',
        children: [{
          min: 1,
          selector: '.eventtickets-collection',
          prefix: 'eventticket',
          add_at_the_end: true,
          allow_add: true,
          allow_remove: true,
          allow_duplicate: false,
          allow_up: true,
          allow_down: true,
          position_field_selector: '.event-date-ticket-position',
          add: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-ticket-action-button event-ticket-add-button"><i class="fas fa-plus-square"></i> ' + Translator.trans('Add a new ticket', {}, 'javascript') + '</a>',
          remove: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-ticket-action-button event-ticket-remove-button"><i class="fas fa-minus-square"></i> ' + Translator.trans('Remove this ticket', {}, 'javascript') + '</a>',
          duplicate: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-ticket-action-button event-ticket-duplicate-button"><i class="fas fa-clone"></i> ' + Translator.trans('Duplicate this ticket', {}, 'javascript') + '</a>',
          up: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-ticket-action-button event-ticket-up-button"><i class="fas fa-caret-square-up"></i> ' + Translator.trans('Move up', {}, 'javascript') + '</a>',
          down: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm event-ticket-action-button event-ticket-down-button"><i class="fas fa-caret-square-down"></i> ' + Translator.trans('Move down', {}, 'javascript') + '</a>',
          after_add: function after_add(eventticketscollection, eventticketelement) {
            // Presets event date ticket radios
            if ($('.section-content').hasClass("add-event")) {
              eventticketelement.find(".is-ticket-active input:radio[value='1']").attr('checked', true);
              eventticketelement.find(".is-ticket-free-radio input:radio[value='0']").attr('checked', true);
            } // Initializes event date ticket plugins


            eventticketelement.find(".touchspin-integer").TouchSpin({
              verticalbuttons: true,
              min: $(this).data('min'),
              max: $(this).data('max')
            });
            eventticketelement.find(".touchspin-decimal").TouchSpin({
              verticalbuttons: true,
              min: $(this).data('min'),
              max: $(this).data('max'),
              decimals: 2,
              prefix: $('body').data('currency-symbol')
            });
            eventticketelement.find('.datetimepicker').each(function () {
              $(this).datetimepicker({
                format: 'Y-m-d H:i'
              });
            });
          },
          after_init: function after_init(eventticketscollection, eventticketelement) {
            // Hides ticket price and promotional price if not free checked
            $(document).on("change", ".is-ticket-free-radio input[type=radio]", function () {
              if (this.value == 1) {
                $(this).closest('.form-group').next('.form-group').hide();
                $(this).closest('.form-group').next('.form-group').next('.form-group').hide();
                $(this).closest('.form-group').next('.form-group').find(".event-date-ticket-price").val('');
                $(this).closest('.form-group').next('.form-group').find(".event-date-ticket-promotionalprice").val('');
              } else {
                $(this).closest('.form-group').next('.form-group').show();
                $(this).closest('.form-group').next('.form-group').next('.form-group').show();
              }
            });

            if ($('.section-content').hasClass("edit-event")) {
              $(".is-ticket-free-radio input[type=radio]:checked").each(function () {
                if (this.value == 1) {
                  $(this).closest('.form-group').next('.form-group').hide();
                  $(this).closest('.form-group').next('.form-group').next('.form-group').hide();
                }
              });
            } // Trick to hide the 0 or 0.00 numbers


            eventticketscollection.find('.event-date-ticket-price').each(function () {
              if ($(this).val() == "0" || $(this).val() == "0.00") {
                $(this).trigger('change');
                $(this).val("");
              }
            });
            eventticketscollection.find('.event-date-ticket-promotionalprice').each(function () {
              if ($(this).val() == "0" || $(this).val() == "0.00") {
                $(this).trigger('change');
                $(this).val("");
              }
            });
          }
        }],
        after_add: function after_add(eventdatecollection, eventdateelement) {
          //remove is reccurrent
          if ($('.is-event-recurrent').length > 1) {
            eventdateelement.find('.is-event-recurrent').closest('.form-group').remove();
            eventdateelement.find('.recurrent-start-date-dp').closest('.form-group').remove();
            eventdateelement.find('.recurrent-end-date-dp').closest('.form-group').remove();
          } // Pre-enables the event date


          if ($('.section-content').hasClass("add-event")) {
            eventdateelement.find(".is-event-date-active input:radio[value='1']").attr('checked', true);
            eventdateelement.find(".is-event-date-online input:radio[value='0']").attr('checked', true);
          } // Initializes event date plugins


          eventdateelement.find('.datetimepicker').each(function () {
            $(this).datetimepicker({
              format: 'Y-m-d H:i'
            });
          });
          eventdateelement.find('.select2').each(function () {
            $(this).select2({
              theme: 'bootstrap4',
              allowClear: true,
              placeholder: Translator.trans('Select an option', {}, 'javascript')
            });
          });
        },
        after_init: function after_init(eventdatecollection, eventdateelement) {
          // Hides the venue select if online is checked
          $(document).on("change", ".is-event-date-online input[type=radio]", function () {
            if (this.value == 1) {
              $(this).closest('.form-group').next('.form-group').hide();
              $(this).closest('.form-group').next('.form-group').find(".event-date-venue").val([]);
            } else {
              $(this).closest('.form-group').next('.form-group').show();
            }
          });

          if ($('.section-content').hasClass("edit-event")) {
            $(".is-event-date-online input[type=radio]:checked").each(function () {
              if (this.value == 1) {
                $(this).closest('.form-group').next('.form-group').hide();
              }
            });
          }
        }
      });
    });
  } // Event favorites ajax add and remove


  $(document).on("click", ".event-favorites-add, .event-favorites-remove", function () {
    var $thisButton = $(this);

    if ($thisButton.attr("data-action-done") == "1") {
      $thisButton.unbind("click");
      return false;
    }

    $.ajax({
      type: "GET",
      url: $thisButton.data('target'),
      beforeSend: function beforeSend() {
        $thisButton.attr("data-action-done", "1");
        $thisButton.html("<i class='fas fa-spinner fa-spin'></i>");
      },
      success: function success(response) {
        if (response.hasOwnProperty('success')) {
          if ($thisButton.hasClass('event-favorites-add')) {
            $thisButton.html('<i class="fas fa-heart"></i>');
          } else {
            $thisButton.html('<i class="far fa-heart"></i>');
          }

          $thisButton.attr("title", response.success).tooltip("_fixTitle");
          showStackBarTop('success', '', response.success);
        } else if (response.hasOwnProperty('error')) {
          $thisButton.html('<i class="far fa-heart"></i>');
          $thisButton.attr("title", response.error).tooltip("_fixTitle");
          showStackBarTop('error', '', response.error);
        } else {
          $thisButton.html('<i class="far fa-heart"></i>');
          $thisButton.attr("title", Translator.trans('An error has occured', {}, 'javascript')).tooltip("_fixTitle");
          showStackBarTop('error', '', Translator.trans('An error has occured', {}, 'javascript'));
        }
      }
    });
  }); // Lazy loading images

  var bLazy = new blazy_blazy_min_js__WEBPACK_IMPORTED_MODULE_34___default.a({
    selector: '.img-lazy-load',
    success: function success(ele) {
      $(ele).find('.loader').remove();
    },
    error: function error(ele, msg) {
      $(ele).find('.loader').remove();
    }
  }); //  Owl Carousel

  if ($('.owl-init').length) {
    $(".owl-init").each(function () {
      var owlcarousel = $(this);
      owlcarousel.owlCarousel({
        rtl: $("html").attr("lang") == "ar" ? true : false,
        loop: owlcarousel.data('loop'),
        margin: owlcarousel.data('margin'),
        nav: owlcarousel.data('nav'),
        dots: owlcarousel.data('dots'),
        autoplay: owlcarousel.data('autoplay'),
        items: owlcarousel.data('items'),
        navText: ["<i class='fa fa-chevron-left'></i>", "<i class='fa fa-chevron-right'></i>"],
        responsive: {
          0: {
            items: 1
          },
          600: {
            items: 2
          },
          1000: {
            items: owlcarousel.data('items')
          }
        }
      });
      $('.' + owlcarousel.data('custom-nav') + '.owl-custom-next').click(function () {
        $('#' + owlcarousel.attr('id')).trigger('next.owl.carousel');
      });
      $('.' + owlcarousel.data('custom-nav') + '.owl-custom-prev').click(function () {
        $('#' + owlcarousel.attr('id')).trigger('prev.owl.carousel');
      }); // TODO ventic: recheck this

      owlcarousel.on('changed.owl.carousel', bLazy.revalidate);
    });
  } // Readmore


  if ($('.readmore').length) {
    $('.readmore').each(function () {
      new readmore_js_dist_readmore_js__WEBPACK_IMPORTED_MODULE_33___default.a($(this), {
        speed: 200,
        lessLink: '<a href="#">' + Translator.trans('Close', {}, 'javascript') + '</a>',
        moreLink: '<a href="#">' + Translator.trans('Read more', {}, 'javascript') + '</a>',
        collapsedHeight: parseInt($(this).data('collapsed-height')),
        heightMargin: parseInt($(this).data('height-margin')),
        embedCSS: true,
        afterToggle: function afterToggle(trigger, element, expanded) {
          if (!expanded) {
            // The "Close" link was clicked
            $(element).removeClass("expanded");
          } else {
            $(element).addClass("expanded");
          }
        },
        blockProcessed: function blockProcessed(element, collapsable) {
          if (collapsable) {
            $(element).addClass("collapsable");
          }
        }
      });
    });
  } // Add to calendar


  if ($('#add-to-calendar').length) {
    var myCalendar = add_to_calendar_buttons_ouical_min_js__WEBPACK_IMPORTED_MODULE_35___default.a.createCalendar({
      data: {
        title: $('#add-to-calendar-link').data('title'),
        start: $('#add-to-calendar-link').data('start') ? new Date($('#add-to-calendar-link').data('start')) : '',
        duration: '',
        end: $('#add-to-calendar-link').data('end') ? new Date($('#add-to-calendar-link').data('end')) : '',
        address: $('#add-to-calendar-link').data('address') ? $('#add-to-calendar-link').data('address') : '',
        description: $('#add-to-calendar-link').data('description') + '...'
      }
    });
    document.querySelector('#add-to-calendar').appendChild(myCalendar);
  } // Follow / unfollow organizer


  $(document).on("click", ".organizer-follow, .organizer-unfollow", function () {
    var $thisButton = $(this);

    if ($thisButton.attr("data-action-done") == "1") {
      $thisButton.unbind("click");
      return false;
    }

    $.ajax({
      type: "GET",
      url: $thisButton.data('target'),
      beforeSend: function beforeSend() {
        $thisButton.attr("data-action-done", "1");
        $thisButton.html("<i class='fas fa-spinner fa-spin'></i>");
      },
      success: function success(response) {
        if (response.hasOwnProperty('success')) {
          if ($thisButton.hasClass('organizer-follow')) {
            $thisButton.html('<i class="fas fa-folder-plus"></i>');
          } else {
            $thisButton.html('<i class="fas fa-folder-minus"></i>');
          }

          $thisButton.attr("title", response.success).tooltip("_fixTitle");
          showStackBarTop('success', '', response.success);
        } else if (response.hasOwnProperty('error')) {
          $thisButton.html('<i class="fas fa-folder"></i>');
          $thisButton.attr("title", response.error).tooltip("_fixTitle");
          showStackBarTop('error', '', response.error);
        } else {
          $thisButton.html('<i class="fas fa-folder"></i>');
          $thisButton.attr("title", Translator.trans('An error has occured', {}, 'javascript')).tooltip("_fixTitle");
          showStackBarTop('error', '', Translator.trans('An error has occured', {}, 'javascript'));
        }
      }
    });
  }); //Newsletter subscribe

  $(document).on("click", "#newsletter-subscribe", function () {
    var $thisButton = $(this);

    if ($thisButton.attr("data-action-done") == "1") {
      $thisButton.unbind("click");
      return false;
    }

    if (!isEmailValid($("#newsletter-email").val())) {
      showStackBarTop('error', '', Translator.trans('Make sure to enter a valid email address', {}, 'javascript'));
      return false;
    }

    $.ajax({
      type: "POST",
      url: $thisButton.data('target'),
      data: {
        email: $("#newsletter-email").val()
      },
      beforeSend: function beforeSend() {
        $thisButton.attr("data-action-done", "1");
        $thisButton.html("<i class='fas fa-spinner fa-spin'></i>");
      },
      success: function success(response) {
        if (response.hasOwnProperty('success')) {
          $thisButton.html('<i class="fas fa-envelope-open-text"></i>');
          $thisButton.attr("title", response.success).tooltip("_fixTitle");
          showStackBarTop('success', '', response.success);
        } else if (response.hasOwnProperty('error')) {
          $thisButton.html('<i class="fas fa-exclamation-circle"></i>');
          $thisButton.attr("title", response.error).tooltip("_fixTitle");
          showStackBarTop('error', '', response.error);
        } else {
          $thisButton.html('<i class="fas fa-exclamation-circle"></i>');
          $thisButton.attr("title", Translator.trans('An error has occured', {}, 'javascript')).tooltip("_fixTitle");
          showStackBarTop('error', '', Translator.trans('An error has occured', {}, 'javascript'));
        }
      }
    });
  }); // Initializes Bloodhound Search Engine

  var eventsForTopSearch = new typeahead_js_dist_bloodhound_min_js__WEBPACK_IMPORTED_MODULE_36___default.a({
    datumTokenizer: typeahead_js_dist_bloodhound_min_js__WEBPACK_IMPORTED_MODULE_36___default.a.tokenizers.obj.whitespace('text'),
    queryTokenizer: typeahead_js_dist_bloodhound_min_js__WEBPACK_IMPORTED_MODULE_36___default.a.tokenizers.whitespace,
    remote: {
      url: location.protocol + '//' + location.host + _vendor_friendsofsymfony_jsrouting_bundle_Resources_public_js_router_min_js__WEBPACK_IMPORTED_MODULE_37___default.a.generate('get_events', {
        '_locale': $('html').attr('lang')
      }, false) + "?q=%QUERY",
      wildcard: '%QUERY'
    }
  });
  $('.top-search').typeahead({
    hint: false,
    highlight: true,
    minLength: 0,
    limit: 3
  }, {
    name: 'top-search',
    display: 'text',
    source: eventsForTopSearch,
    templates: {
      empty: ['<div class="dropdown-menu show">', Translator.trans('No results found', {}, 'javascript'), '</div>'].join('\n'),
      suggestion: handlebars_dist_handlebars_min_js__WEBPACK_IMPORTED_MODULE_38___default.a.compile($("#top-search-result-template").html())
    }
  }); //Click buy tickets open modal and handle chosen date required

  $(document).on("click", ".buy-tickets-modal-button", function (event) {
    event.preventDefault();
    var eventDateReference = $(this).data('reference');
    var $eventDatePick = $('.event-date-pick');

    if ($eventDatePick.length > 0) {
      if ($eventDatePick.val() === '') {
        $('.warning-recurrent-date').show();
      } else {
        $('#buy-tickets-modal-eventDate-' + eventDateReference).modal('show');
        var chosendDateSplit = $eventDatePick.val().split("-");
        var chosenDate = new Date(chosendDateSplit[0], chosendDateSplit[1] - 1, chosendDateSplit[2]).toDateString();
        console.log(chosenDate);
        $('.event-date-container').text(chosenDate + ' ' + $('.event-time').text());
      }
    } else {
      $('#buy-tickets-modal-eventDate-' + eventDateReference).modal('show');
    }
  });
  $(document).on('click', '.close', function (event) {
    event.preventDefault();
    var eventDateReference = $('.buy-tickets-modal-button').data('reference');
    $('#buy-tickets-modal-eventDate-' + eventDateReference).modal('hide');
  }); // Initializes Ajax Pagination

  if ($('.ajax-pagination').length) {
    new _vendor_knppaginator_ajax_knppaginator_ajax_js__WEBPACK_IMPORTED_MODULE_40__["default"]().init({
      'loadMoreText': Translator.trans('Load more', {}, 'javascript'),
      'loadingText': Translator.trans('Loading...', {}, 'javascript'),
      'elementsSelector': '.ajax-pagination',
      'paginationSelector': 'ul.pagination'
    });
  } // Refund Request Dialog


  $('#refund-request-button').click(function () {
    var $thisButton = $('#refund-request-button');
    var $refundRequestDialog = $.confirm({
      title: Translator.trans('Confirmation required', {}, 'javascript'),
      content: $thisButton.data('confirmation-text') + '<textarea id="refund-request-message" rows="5" class="form-control mt-3 refund-request-message" placeholder="' + Translator.trans('Message', {}, 'javascript') + '"></textarea>',
      buttons: {
        confirm: {
          text: Translator.trans('Confirm', {}, 'javascript'),
          btnClass: 'btn-primary btn-sm',
          keys: ['enter'],
          action: function action() {
            if ($('#refund-request-message').val().length < 10 || $('#refund-request-message').val().length > 255) {
              animateCSS('.refund-request-message', 'flash');
              return false;
            } else {
              location.href = $thisButton.data('target') + "?message=" + $('#refund-request-message').val();
            }
          }
        },
        cancel: {
          text: Translator.trans('Cancel', {}, 'javascript'),
          btnClass: 'btn-default btn-sm',
          keys: ['esc'],
          action: function action() {
            $refundRequestDialog.close();
          }
        }
      }
    });
  }); // Refund Request Dialog

  $('.refund-reply-button').click(function () {
    var $thisButton = $('.refund-reply-button');
    var $refundReplyDialog = $.confirm({
      title: Translator.trans('Confirmation required', {}, 'javascript'),
      content: $thisButton.data('confirmation-text') + '<textarea id="refund-reply-message" rows="5" class="form-control mt-3 refund-reply-message" placeholder="' + Translator.trans('Message', {}, 'javascript') + '"></textarea>',
      buttons: {
        confirm: {
          text: Translator.trans('Confirm', {}, 'javascript'),
          btnClass: 'btn-primary btn-sm',
          keys: ['enter'],
          action: function action() {
            location.href = $thisButton.data('target') + "?message=" + $('#refund-reply-message').val();
          }
        },
        cancel: {
          text: Translator.trans('Cancel', {}, 'javascript'),
          btnClass: 'btn-default btn-sm',
          keys: ['esc'],
          action: function action() {
            $refundReplyDialog.close();
          }
        }
      }
    });
  }); // Order cancel Dialog

  $('.order-cancel-button').click(function () {
    var $thisButton = $(this);
    var $orderCancelDialog = $.confirm({
      title: Translator.trans('Confirmation required', {}, 'javascript'),
      content: $thisButton.data('confirmation-text') + '<textarea id="order-cancel-note" rows="5" class="form-control mt-3" placeholder="' + Translator.trans('Note', {}, 'javascript') + '"></textarea>',
      buttons: {
        confirm: {
          text: Translator.trans('Confirm', {}, 'javascript'),
          btnClass: 'btn-primary btn-sm',
          keys: ['enter'],
          action: function action() {
            location.href = $thisButton.data('target') + "?note=" + $('#order-cancel-note').val();
          }
        },
        cancel: {
          text: Translator.trans('Cancel', {}, 'javascript'),
          btnClass: 'btn-default btn-sm',
          keys: ['esc'],
          action: function action() {
            $orderCancelDialog.close();
          }
        }
      }
    });
  }); // Resend order confirmation email dialog

  $('.resend-confirmation-email-button').click(function () {
    var $thisButton = $(this);
    var $resendOrderConfirmationDialog = $.confirm({
      title: Translator.trans('Confirmation required', {}, 'javascript'),
      content: $thisButton.data('confirmation-text') + '<input id="order-confirmation-email-address" type="email" class="form-control mt-3" value="' + $thisButton.data("initial-email-address") + '" placeholder="' + Translator.trans('Email address', {}, 'javascript') + '">',
      buttons: {
        confirm: {
          text: Translator.trans('Confirm', {}, 'javascript'),
          btnClass: 'btn-primary btn-sm',
          keys: ['enter'],
          action: function action() {
            if (!isEmailValid($('#order-confirmation-email-address').val())) {
              showStackBarTop('error', '', Translator.trans('Make sure to enter a valid email address', {}, 'javascript'));
              return false;
            } else {
              location.href = $thisButton.data('target') + "?email=" + $('#order-confirmation-email-address').val();
            }
          }
        },
        cancel: {
          text: Translator.trans('Cancel', {}, 'javascript'),
          btnClass: 'btn-default btn-sm',
          keys: ['esc'],
          action: function action() {
            $resendOrderConfirmationDialog.close();
          }
        }
      }
    });
  }); // Handles the point of sale presubmit button order check

  $('#pos-save-order-button').click(function () {
    var qte = 0;
    $(".pos-eventdate-ticket-qte").each(function () {
      if ($(this).val() != "") {
        qte += $(this).val();
      }
    });

    if (qte == 0) {
      showStackBarTop('error', '', Translator.trans('Please select the tickets quantity for this order', {}, 'javascript'));
    } else {
      $("#pos-order-form").submit();
    }
  }); // Multi event dates calendar

  if ($('#event-dates-calendar').length) {
    $('#add-to-cart-form .event-eventDate-wrapper:not(:first-child)').hide(); // Initializes events passed from the template as a json array

    var eventsDatesJsonArray = $('#event-dates-calendar').data("event-dates");

    if (eventsDatesJsonArray.length) {
      var eventArrayLength = eventsDatesJsonArray.length;

      for (var i = 0; i < eventArrayLength; i++) {
        for (var j = 0; j < eventArrayLength; j++) {
          if (i != j && eventsDatesJsonArray[i].Date == eventsDatesJsonArray[j].Date) {
            eventsDatesJsonArray[i].Title += ", " + eventsDatesJsonArray[j].Title;
            eventsDatesJsonArray[i].Link += "|" + eventsDatesJsonArray[j].Link;
            eventsDatesJsonArray.splice(j, 1);
            eventArrayLength = eventsDatesJsonArray.length;
          }
        }

        var eventDateArray = eventsDatesJsonArray[i].Date.split("-");
        eventsDatesJsonArray[i].Date = new Date(eventDateArray[0], eventDateArray[1] - 1, eventDateArray[2]);
      }

      var settings = {
        EventClick: '',
        //(function) a function that should instantiate on the click of any event. parameters passed in via data link attribute.
        EventTargetWholeDay: false,
        //(bool) clicking on the whole date will trigger event action, as opposed to just clicking on the title.
        DisabledDays: [] //(array of numbers) days of the week to be slightly transparent. ie: [1,6] to fade Sunday and Saturday.

      };
      Object(_vendor_caleandar_js_caleandar_js__WEBPACK_IMPORTED_MODULE_41__["default"])(document.getElementById('event-dates-calendar'), eventsDatesJsonArray, settings); // Hides the calendar back button if current month is displayed

      $('.cld-rwd').css('visibility', 'hidden');
      var nextMonthButtonClickCount = 0;
      $(document).on("click", ".cld-fwd", function () {
        nextMonthButtonClickCount++;

        if (nextMonthButtonClickCount) {
          $('.cld-rwd').css('visibility', 'visible');
        }
      });
      $(document).on("click", ".cld-rwd", function () {
        nextMonthButtonClickCount--;

        if (nextMonthButtonClickCount <= 0) {
          $('.cld-rwd').css('visibility', 'hidden');
        }
      }); // Disables the click on the time tooltip

      $(document).on("click", ".cld-title", function (e) {
        e.preventDefault();
        return false;
      }); // Switches the calendar to the first event date month

      var currentMonthEventsCount = $(".cld-days .eventday").length;

      while (currentMonthEventsCount == 0) {
        $(".cld-fwd").trigger("click");
        currentMonthEventsCount = $(".cld-days .eventday").length;
      } // Opens the respective event date pop up


      $(document).on("click", ".cld-number.eventday", function () {
        var eventDateReference = $(this).find(".cld-title > a").attr("href");
        var eventDateHour = $(this).find(".cld-title > a").text();

        if (eventDateReference.indexOf("|") == -1) {
          $('.event-eventDate-wrapper').hide();
          $("#eventDate-" + eventDateReference + "-wrapper").show();
          $('#buy-tickets-modal-eventDate-' + eventDateReference).modal('show');
        } else {
          var eventDateHoursDialogContent = "";
          var eventDatesReferences = eventDateReference.split("|");
          var eventDatesHours = eventDateHour.split(", ");

          for (var i = 0; i < eventDatesReferences.length; i++) {
            eventDateHoursDialogContent += '<div>' + '<b class="float-left">@ ' + eventDatesHours[i] + '</b>' + '<button class="eventDate-hours-modal-tickets-button float-right btn btn-primary btn-sm" data-eventDate-reference="' + eventDatesReferences[i] + '" data-dismiss="modal">' + Translator.trans("Tickets") + '</button>' + '<div class="clearfix"></div>' + '</div>';

            if (i != eventDatesReferences.length - 1) {
              eventDateHoursDialogContent += "<hr>";
            }
          }

          _vendor_bootboxjs_bootbox_min__WEBPACK_IMPORTED_MODULE_42___default.a.dialog({
            title: Translator.trans("There are multiple hours at this date"),
            message: eventDateHoursDialogContent,
            size: 'medium',
            onEscape: true,
            backdrop: true,
            className: ' modal-dialog-centered modal-dialog-scrollable',
            buttons: {
              fee: {
                label: '<i class="far fa-window-close"></i> ' + Translator.trans("Close"),
                className: 'btn btn-outline-primary',
                callback: function callback() {}
              }
            },
            onShown: function onShown(e) {
              $(document).on("click", ".eventDate-hours-modal-tickets-button", function () {
                var eventDateReference = $(this).data("eventdate-reference");
                $('.event-eventDate-wrapper').hide();
                $("#eventDate-" + eventDateReference + "-wrapper").show();
                setTimeout(function () {
                  $("#buy-tickets-modal-eventDate-" + eventDateReference).modal('show');
                }, 250);
              });
            }
          });
        }
      });
    }
  } // Payout request cancel Dialog


  $('.payoutRequest-cancel-button').click(function () {
    var $thisButton = $(this);
    var $payoutRequestCancelDialog = $.confirm({
      title: Translator.trans('Confirmation required', {}, 'javascript'),
      content: $thisButton.data('confirmation-text') + '<textarea id="payoutRequest-cancel-note" rows="5" class="form-control mt-3" placeholder="' + Translator.trans('Note', {}, 'javascript') + '"></textarea>',
      buttons: {
        confirm: {
          text: Translator.trans('Confirm', {}, 'javascript'),
          btnClass: 'btn-primary btn-sm',
          keys: ['enter'],
          action: function action() {
            location.href = $thisButton.data('target') + "?note=" + $('#payoutRequest-cancel-note').val();
          }
        },
        cancel: {
          text: Translator.trans('Cancel', {}, 'javascript'),
          btnClass: 'btn-default btn-sm',
          keys: ['esc'],
          action: function action() {
            $payoutRequestCancelDialog.close();
          }
        }
      }
    });
  }); // Dashboard sidenav

  function openDashboardSideNav() {
    document.getElementById("dashboard-sidenav").style.left = "0";
    document.body.style.backgroundColor = "rgba(0,0,0,0.4)";
  }

  function closeDashboardSideNav() {
    document.getElementById("dashboard-sidenav").style.left = "-250px";
    document.body.style.backgroundColor = "white";
  }

  global.openDashboardSideNav = openDashboardSideNav;
  global.closeDashboardSideNav = closeDashboardSideNav; // Back to top button

  if ($('.material-scrolltop').length) {
    $('body').materialScrollTop();
  } // Juqery Cookie Bar


  if (typeof $("body").data('cookie-bar-page-link') !== 'undefined') {
    $.cookieBar('addTranslation', 'fr', {
      message: 'Nous utilisons des cookies pour fournir nos services. En utilisant ce site Web, vous acceptez cela.',
      acceptText: 'D\'accord',
      infoText: 'Plus d\'information'
    });
    $.cookieBar('addTranslation', 'es', {
      message: 'Usamos cookies para brindar nuestros servicios. Al utilizar este sitio web, acepta esto.',
      acceptText: 'Bueno',
      infoText: 'M�s informaci�n'
    });
    $.cookieBar('addTranslation', 'ar', {
      message: '??? ?????? ????? ????? ???????? ?????? ???????. ???????? ??? ?????? ? ???? ????? ??? ???.',
      acceptText: '????',
      infoText: '?????? ?? ?????????'
    });
    $.cookieBar({
      style: 'bottom',
      infoLink: $("body").data('cookie-bar-page-link'),
      language: $("html").attr("lang")
    });
  } // Disables payment related settings modifications on demo mode


  if (typeof $("body").data('demo-mode') !== 'undefined') {
    var disableFormSubmissionOnDemoMode = function disableFormSubmissionOnDemoMode(event) {
      showStackBarTop('error', '', Translator.trans('This feature is disabled in demo mode', {}, 'javascript'));
      event.preventDefault();
      return false;
    };

    $('form[name="organizer_profile"],form[name="event"],form[name="venue"],form[name="scanner"],form[name="scanner_app_settings"],form[name="point_of_sale"],form[name="organizer_payout_payment_gateway"],form[name="fos_user_change_password_form"],form[name="app_layout_settings"],form[name="menu"],form[name="homepage_hero_settings"],form[name="payment_settings"],form[name="payment_gateway"],form[name="checkout_settings"],form[name="recaptcha_settings"],form[name="gmaps_settings"],form[name="social_login_settings"],form[name="events_list_page_settings"],form[name="venue_page_settings"],form[name="blog_settings"],form[name="newsletter_settings"],form[name="category"],form[name="country"],form[name="language"],form[name="audience"],form[name="venue"],form[name="venue_type"],form[name="amenity"],form[name="page"],form[name="blog_post"],form[name="blog_post_category"],form[name="help_center_article"],form[name="help_center_category"],form[name="account_settings"],form[name="payout_request"]').on("submit", function (e) {
      disableFormSubmissionOnDemoMode(e);
    });
    $('.dropdown-item').each(function () {
      if (_typeof($(this).attr('href')) !== ( true ? "undefined" : undefined) && $(this).attr('href') !== false) {
        if ($(this).attr('href').indexOf('/delete') >= 0 || $(this).attr('href').indexOf('/disable') >= 0 || $(this).attr('href').indexOf('/featured') >= 0 || $(this).attr('href').indexOf('/notfeatured') >= 0 || $(this).attr('href').indexOf('/hide') >= 0) {
          $(this).prop('onclick', null).off('click').unbind('click');
        }
      }

      if (_typeof($(this).attr('data-target')) !== ( true ? "undefined" : undefined) && $(this).attr('data-target') !== false) {
        if ($(this).attr('data-target').indexOf('/delete') >= 0 || $(this).attr('data-target').indexOf('/cancel') >= 0) {
          $(this).prop('onclick', null).off('click').unbind('click');
        }
      }
    });
    $('.requires-confirmation').each(function () {
      if (_typeof($(this).attr('href')) !== ( true ? "undefined" : undefined) && $(this).attr('href') !== false) {
        if ($(this).attr('href').indexOf('/delete') >= 0 || $(this).attr('href').indexOf('/disable') >= 0 || $(this).attr('href').indexOf('/featured') >= 0 || $(this).attr('href').indexOf('/notfeatured') >= 0 || $(this).attr('href').indexOf('/hide') >= 0) {
          $(document).off("click", '.requires-confirmation');
        }
      }

      if (_typeof($(this).attr('data-target')) !== ( true ? "undefined" : undefined) && $(this).attr('data-target') !== false) {
        if ($(this).attr('data-target').indexOf('/delete') >= 0 || $(this).attr('data-target').indexOf('/cancel') >= 0) {
          $(document).off("click", '.requires-confirmation');
        }
      }
    });
    $('.dropdown-item').click(function (e) {
      if (_typeof($(this).attr('href')) !== ( true ? "undefined" : undefined) && $(this).attr('href') !== false) {
        if ($(this).attr('href').indexOf('/delete') >= 0 || $(this).attr('href').indexOf('/disable') >= 0 || $(this).attr('href').indexOf('/featured') >= 0 || $(this).attr('href').indexOf('/notfeatured') >= 0 || $(this).attr('href').indexOf('/hide') >= 0 || $(this).attr('href').indexOf('/hidefromdirectory') >= 0) {
          disableFormSubmissionOnDemoMode(e);
        }
      }

      if (_typeof($(this).attr('data-target')) !== ( true ? "undefined" : undefined) && $(this).attr('data-target') !== false) {
        if ($(this).attr('data-target').indexOf('/delete') >= 0 || $(this).attr('data-target').indexOf('/cancel') >= 0) {
          disableFormSubmissionOnDemoMode(e);
        }
      }
    });
    $('.requires-confirmation:not(.dropdown-item)').click(function (e) {
      if (_typeof($(this).attr('href')) !== ( true ? "undefined" : undefined) && $(this).attr('href') !== false) {
        if ($(this).attr('href').indexOf('/delete') >= 0 || $(this).attr('href').indexOf('/disable') >= 0 || $(this).attr('href').indexOf('/featured') >= 0 || $(this).attr('href').indexOf('/notfeatured') >= 0 || $(this).attr('href').indexOf('/hide') >= 0) {
          disableFormSubmissionOnDemoMode(e);
        }
      }

      if (_typeof($(this).attr('data-target')) !== ( true ? "undefined" : undefined) && $(this).attr('data-target') !== false) {
        if ($(this).attr('data-target').indexOf('/delete') >= 0 || $(this).attr('data-target').indexOf('/cancel') >= 0) {
          disableFormSubmissionOnDemoMode(e);
        }
      }
    });
  } // Menu elements form collection


  if ($('.menuelements-collection').length) {
    $('.menuelements-collection').each(function () {
      $(this).collection({
        min: 1,
        prefix: 'menuelement',
        add_at_the_end: true,
        allow_add: true,
        allow_remove: true,
        allow_duplicate: false,
        allow_up: true,
        allow_down: true,
        add: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm"><i class="fas fa-plus-square"></i> ' + Translator.trans('Add', {}, 'javascript') + '</a>',
        remove: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm"><i class="fas fa-minus-square"></i> ' + Translator.trans('Remove', {}, 'javascript') + '</a>',
        up: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm"><i class="fas fa-caret-square-up"></i> ' + Translator.trans('Move up', {}, 'javascript') + '</a>',
        down: '<a href="#" class="mr-3 btn btn-outline-dark btn-sm"><i class="fas fa-caret-square-down"></i> ' + Translator.trans('Move down', {}, 'javascript') + '</a>',
        position_field_selector: '.menuelement-position',
        after_add: function after_add(menuElementsCollection, menuElement) {
          menuElement.find('.icon-picker').iconpicker({
            animation: false,
            inputSearch: true
          });
          menuElement.find('.select2').each(function () {
            if ($(this).data("sort-options") == "1") {
              $(this).select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: Translator.trans('Select an option', {}, 'javascript'),
                sortResults: function sortResults(data) {
                  return data.sort(function (a, b) {
                    return a.text.localeCompare(b.text);
                  });
                }
              });
            } else {
              $(this).select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: Translator.trans('Select an option', {}, 'javascript')
              });
            }
          });
        },
        after_init: function after_init(menuElementsCollection, menuElement) {}
      });
    });
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./assets/js/bootstrap.bundle.min.js":
/*!*******************************************!*\
  !*** ./assets/js/bootstrap.bundle.min.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");

__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");

__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.array.some.js */ "./node_modules/core-js/modules/es.array.some.js");

__webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");

__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.array.find-index.js */ "./node_modules/core-js/modules/es.array.find-index.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.array.reverse.js */ "./node_modules/core-js/modules/es.array.reverse.js");

__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/es.string.search.js */ "./node_modules/core-js/modules/es.string.search.js");

__webpack_require__(/*! core-js/modules/es.array.reduce.js */ "./node_modules/core-js/modules/es.array.reduce.js");

__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
  * Bootstrap v4.0.0 (https://getbootstrap.com)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function (t, e) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? e(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function (t, e) {
  "use strict";

  function i(t, e) {
    for (var n = 0; n < e.length; n++) {
      var i = e[n];
      i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
    }
  }

  function s(t, e, n) {
    return e && i(t.prototype, e), n && i(t, n), t;
  }

  function c(r) {
    for (var t = 1; t < arguments.length; t++) {
      var o = null != arguments[t] ? arguments[t] : {},
          e = Object.keys(o);
      "function" == typeof Object.getOwnPropertySymbols && (e = e.concat(Object.getOwnPropertySymbols(o).filter(function (t) {
        return Object.getOwnPropertyDescriptor(o, t).enumerable;
      }))), e.forEach(function (t) {
        var e, n, i;
        e = r, i = o[n = t], n in e ? Object.defineProperty(e, n, {
          value: i,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[n] = i;
      });
    }

    return r;
  }

  for (var r, n, o, a, l, f, h, u, d, p, g, m, _, v, E, y, b, T, C, w, I, D, A, S, O, N, k, L, P, x, j, R, M, H, W, F, U, B, K, V, Q, Y, G, q, z, X, J, Z, $, tt, et, nt, it, rt, ot, st, at, lt, ct, ft, ht, ut, dt, pt, gt = function (i) {
    var e = "transitionend";

    function t(t) {
      var e = this,
          n = !1;
      return i(this).one(l.TRANSITION_END, function () {
        n = !0;
      }), setTimeout(function () {
        n || l.triggerTransitionEnd(e);
      }, t), this;
    }

    var l = {
      TRANSITION_END: "bsTransitionEnd",
      getUID: function getUID(t) {
        for (; t += ~~(1e6 * Math.random()), document.getElementById(t);) {
          ;
        }

        return t;
      },
      getSelectorFromElement: function getSelectorFromElement(t) {
        var e = t.getAttribute("data-target");
        e && "#" !== e || (e = t.getAttribute("href") || "");

        try {
          return 0 < i(document).find(e).length ? e : null;
        } catch (t) {
          return null;
        }
      },
      getTransitionDurationFromElement: function getTransitionDurationFromElement(t) {
        if (!t) return 0;
        var e = i(t).css("transition-duration");
        return parseFloat(e) ? (e = e.split(",")[0], 1e3 * parseFloat(e)) : 0;
      },
      reflow: function reflow(t) {
        return t.offsetHeight;
      },
      triggerTransitionEnd: function triggerTransitionEnd(t) {
        i(t).trigger(e);
      },
      supportsTransitionEnd: function supportsTransitionEnd() {
        return Boolean(e);
      },
      isElement: function isElement(t) {
        return (t[0] || t).nodeType;
      },
      typeCheckConfig: function typeCheckConfig(t, e, n) {
        for (var i in n) {
          if (Object.prototype.hasOwnProperty.call(n, i)) {
            var r = n[i],
                o = e[i],
                s = o && l.isElement(o) ? "element" : (a = o, {}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());
            if (!new RegExp(r).test(s)) throw new Error(t.toUpperCase() + ': Option "' + i + '" provided type "' + s + '" but expected type "' + r + '".');
          }
        }

        var a;
      }
    };
    return i.fn.emulateTransitionEnd = t, i.event.special[l.TRANSITION_END] = {
      bindType: e,
      delegateType: e,
      handle: function handle(t) {
        if (i(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
      }
    }, l;
  }(e = e && e.hasOwnProperty("default") ? e["default"] : e), mt = (n = "alert", a = "." + (o = "bs.alert"), l = (r = e).fn[n], f = {
    CLOSE: "close" + a,
    CLOSED: "closed" + a,
    CLICK_DATA_API: "click" + a + ".data-api"
  }, h = "alert", u = "fade", d = "show", p = function () {
    function i(t) {
      this._element = t;
    }

    var t = i.prototype;
    return t.close = function (t) {
      t = t || this._element;

      var e = this._getRootElement(t);

      this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
    }, t.dispose = function () {
      r.removeData(this._element, o), this._element = null;
    }, t._getRootElement = function (t) {
      var e = gt.getSelectorFromElement(t),
          n = !1;
      return e && (n = r(e)[0]), n || (n = r(t).closest("." + h)[0]), n;
    }, t._triggerCloseEvent = function (t) {
      var e = r.Event(f.CLOSE);
      return r(t).trigger(e), e;
    }, t._removeElement = function (e) {
      var n = this;

      if (r(e).removeClass(d), r(e).hasClass(u)) {
        var t = gt.getTransitionDurationFromElement(e);
        r(e).one(gt.TRANSITION_END, function (t) {
          return n._destroyElement(e, t);
        }).emulateTransitionEnd(t);
      } else this._destroyElement(e);
    }, t._destroyElement = function (t) {
      r(t).detach().trigger(f.CLOSED).remove();
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var t = r(this),
            e = t.data(o);
        e || (e = new i(this), t.data(o, e)), "close" === n && e[n](this);
      });
    }, i._handleDismiss = function (e) {
      return function (t) {
        t && t.preventDefault(), e.close(this);
      };
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }]), i;
  }(), r(document).on(f.CLICK_DATA_API, '[data-dismiss="alert"]', p._handleDismiss(new p())), r.fn[n] = p._jQueryInterface, r.fn[n].Constructor = p, r.fn[n].noConflict = function () {
    return r.fn[n] = l, p._jQueryInterface;
  }, p), _t = (m = "button", v = "." + (_ = "bs.button"), E = ".data-api", y = (g = e).fn[m], b = "active", T = "btn", w = '[data-toggle^="button"]', I = '[data-toggle="buttons"]', D = "input", A = ".active", S = ".btn", O = {
    CLICK_DATA_API: "click" + v + E,
    FOCUS_BLUR_DATA_API: (C = "focus") + v + E + " blur" + v + E
  }, N = function () {
    function n(t) {
      this._element = t;
    }

    var t = n.prototype;
    return t.toggle = function () {
      var t = !0,
          e = !0,
          n = g(this._element).closest(I)[0];

      if (n) {
        var i = g(this._element).find(D)[0];

        if (i) {
          if ("radio" === i.type) if (i.checked && g(this._element).hasClass(b)) t = !1;else {
            var r = g(n).find(A)[0];
            r && g(r).removeClass(b);
          }

          if (t) {
            if (i.hasAttribute("disabled") || n.hasAttribute("disabled") || i.classList.contains("disabled") || n.classList.contains("disabled")) return;
            i.checked = !g(this._element).hasClass(b), g(i).trigger("change");
          }

          i.focus(), e = !1;
        }
      }

      e && this._element.setAttribute("aria-pressed", !g(this._element).hasClass(b)), t && g(this._element).toggleClass(b);
    }, t.dispose = function () {
      g.removeData(this._element, _), this._element = null;
    }, n._jQueryInterface = function (e) {
      return this.each(function () {
        var t = g(this).data(_);
        t || (t = new n(this), g(this).data(_, t)), "toggle" === e && t[e]();
      });
    }, s(n, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }]), n;
  }(), g(document).on(O.CLICK_DATA_API, w, function (t) {
    t.preventDefault();
    var e = t.target;
    g(e).hasClass(T) || (e = g(e).closest(S)), N._jQueryInterface.call(g(e), "toggle");
  }).on(O.FOCUS_BLUR_DATA_API, w, function (t) {
    var e = g(t.target).closest(S)[0];
    g(e).toggleClass(C, /^focus(in)?$/.test(t.type));
  }), g.fn[m] = N._jQueryInterface, g.fn[m].Constructor = N, g.fn[m].noConflict = function () {
    return g.fn[m] = y, N._jQueryInterface;
  }, N), vt = (L = "carousel", x = "." + (P = "bs.carousel"), j = ".data-api", R = (k = e).fn[L], M = {
    interval: 5e3,
    keyboard: !0,
    slide: !1,
    pause: "hover",
    wrap: !0
  }, H = {
    interval: "(number|boolean)",
    keyboard: "boolean",
    slide: "(boolean|string)",
    pause: "(string|boolean)",
    wrap: "boolean"
  }, W = "next", F = "prev", U = "left", B = "right", K = {
    SLIDE: "slide" + x,
    SLID: "slid" + x,
    KEYDOWN: "keydown" + x,
    MOUSEENTER: "mouseenter" + x,
    MOUSELEAVE: "mouseleave" + x,
    TOUCHEND: "touchend" + x,
    LOAD_DATA_API: "load" + x + j,
    CLICK_DATA_API: "click" + x + j
  }, V = "carousel", Q = "active", Y = "slide", G = "carousel-item-right", q = "carousel-item-left", z = "carousel-item-next", X = "carousel-item-prev", J = {
    ACTIVE: ".active",
    ACTIVE_ITEM: ".active.carousel-item",
    ITEM: ".carousel-item",
    NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
    INDICATORS: ".carousel-indicators",
    DATA_SLIDE: "[data-slide], [data-slide-to]",
    DATA_RIDE: '[data-ride="carousel"]'
  }, Z = function () {
    function o(t, e) {
      this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(e), this._element = k(t)[0], this._indicatorsElement = k(this._element).find(J.INDICATORS)[0], this._addEventListeners();
    }

    var t = o.prototype;
    return t.next = function () {
      this._isSliding || this._slide(W);
    }, t.nextWhenVisible = function () {
      !document.hidden && k(this._element).is(":visible") && "hidden" !== k(this._element).css("visibility") && this.next();
    }, t.prev = function () {
      this._isSliding || this._slide(F);
    }, t.pause = function (t) {
      t || (this._isPaused = !0), k(this._element).find(J.NEXT_PREV)[0] && (gt.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
    }, t.cycle = function (t) {
      t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
    }, t.to = function (t) {
      var e = this;
      this._activeElement = k(this._element).find(J.ACTIVE_ITEM)[0];

      var n = this._getItemIndex(this._activeElement);

      if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) k(this._element).one(K.SLID, function () {
        return e.to(t);
      });else {
        if (n === t) return this.pause(), void this.cycle();
        var i = n < t ? W : F;

        this._slide(i, this._items[t]);
      }
    }, t.dispose = function () {
      k(this._element).off(x), k.removeData(this._element, P), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
    }, t._getConfig = function (t) {
      return t = c({}, M, t), gt.typeCheckConfig(L, t, H), t;
    }, t._addEventListeners = function () {
      var e = this;
      this._config.keyboard && k(this._element).on(K.KEYDOWN, function (t) {
        return e._keydown(t);
      }), "hover" === this._config.pause && (k(this._element).on(K.MOUSEENTER, function (t) {
        return e.pause(t);
      }).on(K.MOUSELEAVE, function (t) {
        return e.cycle(t);
      }), ("ontouchstart" in document.documentElement) && k(this._element).on(K.TOUCHEND, function () {
        e.pause(), e.touchTimeout && clearTimeout(e.touchTimeout), e.touchTimeout = setTimeout(function (t) {
          return e.cycle(t);
        }, 500 + e._config.interval);
      }));
    }, t._keydown = function (t) {
      if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {
        case 37:
          t.preventDefault(), this.prev();
          break;

        case 39:
          t.preventDefault(), this.next();
      }
    }, t._getItemIndex = function (t) {
      return this._items = k.makeArray(k(t).parent().find(J.ITEM)), this._items.indexOf(t);
    }, t._getItemByDirection = function (t, e) {
      var n = t === W,
          i = t === F,
          r = this._getItemIndex(e),
          o = this._items.length - 1;

      if ((i && 0 === r || n && r === o) && !this._config.wrap) return e;
      var s = (r + (t === F ? -1 : 1)) % this._items.length;
      return -1 === s ? this._items[this._items.length - 1] : this._items[s];
    }, t._triggerSlideEvent = function (t, e) {
      var n = this._getItemIndex(t),
          i = this._getItemIndex(k(this._element).find(J.ACTIVE_ITEM)[0]),
          r = k.Event(K.SLIDE, {
        relatedTarget: t,
        direction: e,
        from: i,
        to: n
      });

      return k(this._element).trigger(r), r;
    }, t._setActiveIndicatorElement = function (t) {
      if (this._indicatorsElement) {
        k(this._indicatorsElement).find(J.ACTIVE).removeClass(Q);

        var e = this._indicatorsElement.children[this._getItemIndex(t)];

        e && k(e).addClass(Q);
      }
    }, t._slide = function (t, e) {
      var n,
          i,
          r,
          o = this,
          s = k(this._element).find(J.ACTIVE_ITEM)[0],
          a = this._getItemIndex(s),
          l = e || s && this._getItemByDirection(t, s),
          c = this._getItemIndex(l),
          f = Boolean(this._interval);

      if (t === W ? (n = q, i = z, r = U) : (n = G, i = X, r = B), l && k(l).hasClass(Q)) this._isSliding = !1;else if (!this._triggerSlideEvent(l, r).isDefaultPrevented() && s && l) {
        this._isSliding = !0, f && this.pause(), this._setActiveIndicatorElement(l);
        var h = k.Event(K.SLID, {
          relatedTarget: l,
          direction: r,
          from: a,
          to: c
        });

        if (k(this._element).hasClass(Y)) {
          k(l).addClass(i), gt.reflow(l), k(s).addClass(n), k(l).addClass(n);
          var u = gt.getTransitionDurationFromElement(s);
          k(s).one(gt.TRANSITION_END, function () {
            k(l).removeClass(n + " " + i).addClass(Q), k(s).removeClass(Q + " " + i + " " + n), o._isSliding = !1, setTimeout(function () {
              return k(o._element).trigger(h);
            }, 0);
          }).emulateTransitionEnd(u);
        } else k(s).removeClass(Q), k(l).addClass(Q), this._isSliding = !1, k(this._element).trigger(h);

        f && this.cycle();
      }
    }, o._jQueryInterface = function (i) {
      return this.each(function () {
        var t = k(this).data(P),
            e = c({}, M, k(this).data());
        "object" == _typeof(i) && (e = c({}, e, i));
        var n = "string" == typeof i ? i : e.slide;
        if (t || (t = new o(this, e), k(this).data(P, t)), "number" == typeof i) t.to(i);else if ("string" == typeof n) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n]();
        } else e.interval && (t.pause(), t.cycle());
      });
    }, o._dataApiClickHandler = function (t) {
      var e = gt.getSelectorFromElement(this);

      if (e) {
        var n = k(e)[0];

        if (n && k(n).hasClass(V)) {
          var i = c({}, k(n).data(), k(this).data()),
              r = this.getAttribute("data-slide-to");
          r && (i.interval = !1), o._jQueryInterface.call(k(n), i), r && k(n).data(P).to(r), t.preventDefault();
        }
      }
    }, s(o, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }, {
      key: "Default",
      get: function get() {
        return M;
      }
    }]), o;
  }(), k(document).on(K.CLICK_DATA_API, J.DATA_SLIDE, Z._dataApiClickHandler), k(window).on(K.LOAD_DATA_API, function () {
    k(J.DATA_RIDE).each(function () {
      var t = k(this);

      Z._jQueryInterface.call(t, t.data());
    });
  }), k.fn[L] = Z._jQueryInterface, k.fn[L].Constructor = Z, k.fn[L].noConflict = function () {
    return k.fn[L] = R, Z._jQueryInterface;
  }, Z), Et = (tt = "collapse", nt = "." + (et = "bs.collapse"), it = ($ = e).fn[tt], rt = {
    toggle: !0,
    parent: ""
  }, ot = {
    toggle: "boolean",
    parent: "(string|element)"
  }, st = {
    SHOW: "show" + nt,
    SHOWN: "shown" + nt,
    HIDE: "hide" + nt,
    HIDDEN: "hidden" + nt,
    CLICK_DATA_API: "click" + nt + ".data-api"
  }, at = "show", lt = "collapse", ct = "collapsing", ft = "collapsed", ht = "width", ut = "height", dt = {
    ACTIVES: ".show, .collapsing",
    DATA_TOGGLE: '[data-toggle="collapse"]'
  }, pt = function () {
    function a(t, e) {
      this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = $.makeArray($('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));

      for (var n = $(dt.DATA_TOGGLE), i = 0; i < n.length; i++) {
        var r = n[i],
            o = gt.getSelectorFromElement(r);
        null !== o && 0 < $(o).filter(t).length && (this._selector = o, this._triggerArray.push(r));
      }

      this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
    }

    var t = a.prototype;
    return t.toggle = function () {
      $(this._element).hasClass(at) ? this.hide() : this.show();
    }, t.show = function () {
      var t,
          e,
          n = this;

      if (!this._isTransitioning && !$(this._element).hasClass(at) && (this._parent && 0 === (t = $.makeArray($(this._parent).find(dt.ACTIVES).filter('[data-parent="' + this._config.parent + '"]'))).length && (t = null), !(t && (e = $(t).not(this._selector).data(et)) && e._isTransitioning))) {
        var i = $.Event(st.SHOW);

        if ($(this._element).trigger(i), !i.isDefaultPrevented()) {
          t && (a._jQueryInterface.call($(t).not(this._selector), "hide"), e || $(t).data(et, null));

          var r = this._getDimension();

          $(this._element).removeClass(lt).addClass(ct), (this._element.style[r] = 0) < this._triggerArray.length && $(this._triggerArray).removeClass(ft).attr("aria-expanded", !0), this.setTransitioning(!0);
          var o = "scroll" + (r[0].toUpperCase() + r.slice(1)),
              s = gt.getTransitionDurationFromElement(this._element);
          $(this._element).one(gt.TRANSITION_END, function () {
            $(n._element).removeClass(ct).addClass(lt).addClass(at), n._element.style[r] = "", n.setTransitioning(!1), $(n._element).trigger(st.SHOWN);
          }).emulateTransitionEnd(s), this._element.style[r] = this._element[o] + "px";
        }
      }
    }, t.hide = function () {
      var t = this;

      if (!this._isTransitioning && $(this._element).hasClass(at)) {
        var e = $.Event(st.HIDE);

        if ($(this._element).trigger(e), !e.isDefaultPrevented()) {
          var n = this._getDimension();

          if (this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", gt.reflow(this._element), $(this._element).addClass(ct).removeClass(lt).removeClass(at), 0 < this._triggerArray.length) for (var i = 0; i < this._triggerArray.length; i++) {
            var r = this._triggerArray[i],
                o = gt.getSelectorFromElement(r);
            if (null !== o) $(o).hasClass(at) || $(r).addClass(ft).attr("aria-expanded", !1);
          }
          this.setTransitioning(!0);
          this._element.style[n] = "";
          var s = gt.getTransitionDurationFromElement(this._element);
          $(this._element).one(gt.TRANSITION_END, function () {
            t.setTransitioning(!1), $(t._element).removeClass(ct).addClass(lt).trigger(st.HIDDEN);
          }).emulateTransitionEnd(s);
        }
      }
    }, t.setTransitioning = function (t) {
      this._isTransitioning = t;
    }, t.dispose = function () {
      $.removeData(this._element, et), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
    }, t._getConfig = function (t) {
      return (t = c({}, rt, t)).toggle = Boolean(t.toggle), gt.typeCheckConfig(tt, t, ot), t;
    }, t._getDimension = function () {
      return $(this._element).hasClass(ht) ? ht : ut;
    }, t._getParent = function () {
      var n = this,
          t = null;
      gt.isElement(this._config.parent) ? (t = this._config.parent, "undefined" != typeof this._config.parent.jquery && (t = this._config.parent[0])) : t = $(this._config.parent)[0];
      var e = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
      return $(t).find(e).each(function (t, e) {
        n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [e]);
      }), t;
    }, t._addAriaAndCollapsedClass = function (t, e) {
      if (t) {
        var n = $(t).hasClass(at);
        0 < e.length && $(e).toggleClass(ft, !n).attr("aria-expanded", n);
      }
    }, a._getTargetFromElement = function (t) {
      var e = gt.getSelectorFromElement(t);
      return e ? $(e)[0] : null;
    }, a._jQueryInterface = function (i) {
      return this.each(function () {
        var t = $(this),
            e = t.data(et),
            n = c({}, rt, t.data(), "object" == _typeof(i) && i);

        if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), t.data(et, e)), "string" == typeof i) {
          if ("undefined" == typeof e[i]) throw new TypeError('No method named "' + i + '"');
          e[i]();
        }
      });
    }, s(a, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }, {
      key: "Default",
      get: function get() {
        return rt;
      }
    }]), a;
  }(), $(document).on(st.CLICK_DATA_API, dt.DATA_TOGGLE, function (t) {
    "A" === t.currentTarget.tagName && t.preventDefault();
    var n = $(this),
        e = gt.getSelectorFromElement(this);
    $(e).each(function () {
      var t = $(this),
          e = t.data(et) ? "toggle" : n.data();

      pt._jQueryInterface.call(t, e);
    });
  }), $.fn[tt] = pt._jQueryInterface, $.fn[tt].Constructor = pt, $.fn[tt].noConflict = function () {
    return $.fn[tt] = it, pt._jQueryInterface;
  }, pt), yt = "undefined" != typeof window && "undefined" != typeof document, bt = ["Edge", "Trident", "Firefox"], Tt = 0, Ct = 0; Ct < bt.length; Ct += 1) {
    if (yt && 0 <= navigator.userAgent.indexOf(bt[Ct])) {
      Tt = 1;
      break;
    }
  }

  var wt = yt && window.Promise ? function (t) {
    var e = !1;
    return function () {
      e || (e = !0, window.Promise.resolve().then(function () {
        e = !1, t();
      }));
    };
  } : function (t) {
    var e = !1;
    return function () {
      e || (e = !0, setTimeout(function () {
        e = !1, t();
      }, Tt));
    };
  };

  function It(t) {
    return t && "[object Function]" === {}.toString.call(t);
  }

  function Dt(t, e) {
    if (1 !== t.nodeType) return [];
    var n = getComputedStyle(t, null);
    return e ? n[e] : n;
  }

  function At(t) {
    return "HTML" === t.nodeName ? t : t.parentNode || t.host;
  }

  function St(t) {
    if (!t) return document.body;

    switch (t.nodeName) {
      case "HTML":
      case "BODY":
        return t.ownerDocument.body;

      case "#document":
        return t.body;
    }

    var e = Dt(t),
        n = e.overflow,
        i = e.overflowX,
        r = e.overflowY;
    return /(auto|scroll|overlay)/.test(n + r + i) ? t : St(At(t));
  }

  var Ot = {},
      Nt = function Nt() {
    var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "all";
    if (t = t.toString(), Ot.hasOwnProperty(t)) return Ot[t];

    switch (t) {
      case "11":
        Ot[t] = -1 !== navigator.userAgent.indexOf("Trident");
        break;

      case "10":
        Ot[t] = -1 !== navigator.appVersion.indexOf("MSIE 10");
        break;

      case "all":
        Ot[t] = -1 !== navigator.userAgent.indexOf("Trident") || -1 !== navigator.userAgent.indexOf("MSIE");
    }

    return Ot.all = Ot.all || Object.keys(Ot).some(function (t) {
      return Ot[t];
    }), Ot[t];
  };

  function kt(t) {
    if (!t) return document.documentElement;

    for (var e = Nt(10) ? document.body : null, n = t.offsetParent; n === e && t.nextElementSibling;) {
      n = (t = t.nextElementSibling).offsetParent;
    }

    var i = n && n.nodeName;
    return i && "BODY" !== i && "HTML" !== i ? -1 !== ["TD", "TABLE"].indexOf(n.nodeName) && "static" === Dt(n, "position") ? kt(n) : n : t ? t.ownerDocument.documentElement : document.documentElement;
  }

  function Lt(t) {
    return null !== t.parentNode ? Lt(t.parentNode) : t;
  }

  function Pt(t, e) {
    if (!(t && t.nodeType && e && e.nodeType)) return document.documentElement;
    var n = t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,
        i = n ? t : e,
        r = n ? e : t,
        o = document.createRange();
    o.setStart(i, 0), o.setEnd(r, 0);
    var s,
        a,
        l = o.commonAncestorContainer;
    if (t !== l && e !== l || i.contains(r)) return "BODY" === (a = (s = l).nodeName) || "HTML" !== a && kt(s.firstElementChild) !== s ? kt(l) : l;
    var c = Lt(t);
    return c.host ? Pt(c.host, e) : Pt(t, Lt(e).host);
  }

  function xt(t) {
    var e = "top" === (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "top") ? "scrollTop" : "scrollLeft",
        n = t.nodeName;

    if ("BODY" === n || "HTML" === n) {
      var i = t.ownerDocument.documentElement;
      return (t.ownerDocument.scrollingElement || i)[e];
    }

    return t[e];
  }

  function jt(t, e) {
    var n = "x" === e ? "Left" : "Top",
        i = "Left" === n ? "Right" : "Bottom";
    return parseFloat(t["border" + n + "Width"], 10) + parseFloat(t["border" + i + "Width"], 10);
  }

  function Rt(t, e, n, i) {
    return Math.max(e["offset" + t], e["scroll" + t], n["client" + t], n["offset" + t], n["scroll" + t], Nt(10) ? n["offset" + t] + i["margin" + ("Height" === t ? "Top" : "Left")] + i["margin" + ("Height" === t ? "Bottom" : "Right")] : 0);
  }

  function Mt() {
    var t = document.body,
        e = document.documentElement,
        n = Nt(10) && getComputedStyle(e);
    return {
      height: Rt("Height", t, e, n),
      width: Rt("Width", t, e, n)
    };
  }

  var Ht = function Ht(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  },
      Wt = function () {
    function i(t, e) {
      for (var n = 0; n < e.length; n++) {
        var i = e[n];
        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }

    return function (t, e, n) {
      return e && i(t.prototype, e), n && i(t, n), t;
    };
  }(),
      Ft = function Ft(t, e, n) {
    return e in t ? Object.defineProperty(t, e, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : t[e] = n, t;
  },
      Ut = Object.assign || function (t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];

      for (var i in n) {
        Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
      }
    }

    return t;
  };

  function Bt(t) {
    return Ut({}, t, {
      right: t.left + t.width,
      bottom: t.top + t.height
    });
  }

  function Kt(t) {
    var e = {};

    try {
      if (Nt(10)) {
        e = t.getBoundingClientRect();
        var n = xt(t, "top"),
            i = xt(t, "left");
        e.top += n, e.left += i, e.bottom += n, e.right += i;
      } else e = t.getBoundingClientRect();
    } catch (t) {}

    var r = {
      left: e.left,
      top: e.top,
      width: e.right - e.left,
      height: e.bottom - e.top
    },
        o = "HTML" === t.nodeName ? Mt() : {},
        s = o.width || t.clientWidth || r.right - r.left,
        a = o.height || t.clientHeight || r.bottom - r.top,
        l = t.offsetWidth - s,
        c = t.offsetHeight - a;

    if (l || c) {
      var f = Dt(t);
      l -= jt(f, "x"), c -= jt(f, "y"), r.width -= l, r.height -= c;
    }

    return Bt(r);
  }

  function Vt(t, e) {
    var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
        i = Nt(10),
        r = "HTML" === e.nodeName,
        o = Kt(t),
        s = Kt(e),
        a = St(t),
        l = Dt(e),
        c = parseFloat(l.borderTopWidth, 10),
        f = parseFloat(l.borderLeftWidth, 10);
    n && "HTML" === e.nodeName && (s.top = Math.max(s.top, 0), s.left = Math.max(s.left, 0));
    var h = Bt({
      top: o.top - s.top - c,
      left: o.left - s.left - f,
      width: o.width,
      height: o.height
    });

    if (h.marginTop = 0, h.marginLeft = 0, !i && r) {
      var u = parseFloat(l.marginTop, 10),
          d = parseFloat(l.marginLeft, 10);
      h.top -= c - u, h.bottom -= c - u, h.left -= f - d, h.right -= f - d, h.marginTop = u, h.marginLeft = d;
    }

    return (i && !n ? e.contains(a) : e === a && "BODY" !== a.nodeName) && (h = function (t, e) {
      var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
          i = xt(e, "top"),
          r = xt(e, "left"),
          o = n ? -1 : 1;
      return t.top += i * o, t.bottom += i * o, t.left += r * o, t.right += r * o, t;
    }(h, e)), h;
  }

  function Qt(t) {
    if (!t || !t.parentElement || Nt()) return document.documentElement;

    for (var e = t.parentElement; e && "none" === Dt(e, "transform");) {
      e = e.parentElement;
    }

    return e || document.documentElement;
  }

  function Yt(t, e, n, i) {
    var r = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],
        o = {
      top: 0,
      left: 0
    },
        s = r ? Qt(t) : Pt(t, e);
    if ("viewport" === i) o = function (t) {
      var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
          n = t.ownerDocument.documentElement,
          i = Vt(t, n),
          r = Math.max(n.clientWidth, window.innerWidth || 0),
          o = Math.max(n.clientHeight, window.innerHeight || 0),
          s = e ? 0 : xt(n),
          a = e ? 0 : xt(n, "left");
      return Bt({
        top: s - i.top + i.marginTop,
        left: a - i.left + i.marginLeft,
        width: r,
        height: o
      });
    }(s, r);else {
      var a = void 0;
      "scrollParent" === i ? "BODY" === (a = St(At(e))).nodeName && (a = t.ownerDocument.documentElement) : a = "window" === i ? t.ownerDocument.documentElement : i;
      var l = Vt(a, s, r);
      if ("HTML" !== a.nodeName || function t(e) {
        var n = e.nodeName;
        return "BODY" !== n && "HTML" !== n && ("fixed" === Dt(e, "position") || t(At(e)));
      }(s)) o = l;else {
        var c = Mt(),
            f = c.height,
            h = c.width;
        o.top += l.top - l.marginTop, o.bottom = f + l.top, o.left += l.left - l.marginLeft, o.right = h + l.left;
      }
    }
    return o.left += n, o.top += n, o.right -= n, o.bottom -= n, o;
  }

  function Gt(t, e, i, n, r) {
    var o = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;
    if (-1 === t.indexOf("auto")) return t;
    var s = Yt(i, n, o, r),
        a = {
      top: {
        width: s.width,
        height: e.top - s.top
      },
      right: {
        width: s.right - e.right,
        height: s.height
      },
      bottom: {
        width: s.width,
        height: s.bottom - e.bottom
      },
      left: {
        width: e.left - s.left,
        height: s.height
      }
    },
        l = Object.keys(a).map(function (t) {
      return Ut({
        key: t
      }, a[t], {
        area: (e = a[t], e.width * e.height)
      });
      var e;
    }).sort(function (t, e) {
      return e.area - t.area;
    }),
        c = l.filter(function (t) {
      var e = t.width,
          n = t.height;
      return e >= i.clientWidth && n >= i.clientHeight;
    }),
        f = 0 < c.length ? c[0].key : l[0].key,
        h = t.split("-")[1];
    return f + (h ? "-" + h : "");
  }

  function qt(t, e, n) {
    var i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return Vt(n, i ? Qt(e) : Pt(e, n), i);
  }

  function zt(t) {
    var e = getComputedStyle(t),
        n = parseFloat(e.marginTop) + parseFloat(e.marginBottom),
        i = parseFloat(e.marginLeft) + parseFloat(e.marginRight);
    return {
      width: t.offsetWidth + i,
      height: t.offsetHeight + n
    };
  }

  function Xt(t) {
    var e = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    return t.replace(/left|right|bottom|top/g, function (t) {
      return e[t];
    });
  }

  function Jt(t, e, n) {
    n = n.split("-")[0];
    var i = zt(t),
        r = {
      width: i.width,
      height: i.height
    },
        o = -1 !== ["right", "left"].indexOf(n),
        s = o ? "top" : "left",
        a = o ? "left" : "top",
        l = o ? "height" : "width",
        c = o ? "width" : "height";
    return r[s] = e[s] + e[l] / 2 - i[l] / 2, r[a] = n === a ? e[a] - i[c] : e[Xt(a)], r;
  }

  function Zt(t, e) {
    return Array.prototype.find ? t.find(e) : t.filter(e)[0];
  }

  function $t(t, n, e) {
    return (void 0 === e ? t : t.slice(0, function (t, e, n) {
      if (Array.prototype.findIndex) return t.findIndex(function (t) {
        return t[e] === n;
      });
      var i = Zt(t, function (t) {
        return t[e] === n;
      });
      return t.indexOf(i);
    }(t, "name", e))).forEach(function (t) {
      t["function"] && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
      var e = t["function"] || t.fn;
      t.enabled && It(e) && (n.offsets.popper = Bt(n.offsets.popper), n.offsets.reference = Bt(n.offsets.reference), n = e(n, t));
    }), n;
  }

  function te(t, n) {
    return t.some(function (t) {
      var e = t.name;
      return t.enabled && e === n;
    });
  }

  function ee(t) {
    for (var e = [!1, "ms", "Webkit", "Moz", "O"], n = t.charAt(0).toUpperCase() + t.slice(1), i = 0; i < e.length; i++) {
      var r = e[i],
          o = r ? "" + r + n : t;
      if ("undefined" != typeof document.body.style[o]) return o;
    }

    return null;
  }

  function ne(t) {
    var e = t.ownerDocument;
    return e ? e.defaultView : window;
  }

  function ie(t, e, n, i) {
    n.updateBound = i, ne(t).addEventListener("resize", n.updateBound, {
      passive: !0
    });
    var r = St(t);
    return function t(e, n, i, r) {
      var o = "BODY" === e.nodeName,
          s = o ? e.ownerDocument.defaultView : e;
      s.addEventListener(n, i, {
        passive: !0
      }), o || t(St(s.parentNode), n, i, r), r.push(s);
    }(r, "scroll", n.updateBound, n.scrollParents), n.scrollElement = r, n.eventsEnabled = !0, n;
  }

  function re() {
    var t, e;
    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (t = this.reference, e = this.state, ne(t).removeEventListener("resize", e.updateBound), e.scrollParents.forEach(function (t) {
      t.removeEventListener("scroll", e.updateBound);
    }), e.updateBound = null, e.scrollParents = [], e.scrollElement = null, e.eventsEnabled = !1, e));
  }

  function oe(t) {
    return "" !== t && !isNaN(parseFloat(t)) && isFinite(t);
  }

  function se(n, i) {
    Object.keys(i).forEach(function (t) {
      var e = "";
      -1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(t) && oe(i[t]) && (e = "px"), n.style[t] = i[t] + e;
    });
  }

  function ae(t, e, n) {
    var i = Zt(t, function (t) {
      return t.name === e;
    }),
        r = !!i && t.some(function (t) {
      return t.name === n && t.enabled && t.order < i.order;
    });

    if (!r) {
      var o = "`" + e + "`",
          s = "`" + n + "`";
      console.warn(s + " modifier is required by " + o + " modifier in order to work, be sure to include it before " + o + "!");
    }

    return r;
  }

  var le = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
      ce = le.slice(3);

  function fe(t) {
    var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
        n = ce.indexOf(t),
        i = ce.slice(n + 1).concat(ce.slice(0, n));
    return e ? i.reverse() : i;
  }

  var he = {
    FLIP: "flip",
    CLOCKWISE: "clockwise",
    COUNTERCLOCKWISE: "counterclockwise"
  };

  function ue(t, r, o, e) {
    var s = [0, 0],
        a = -1 !== ["right", "left"].indexOf(e),
        n = t.split(/(\+|\-)/).map(function (t) {
      return t.trim();
    }),
        i = n.indexOf(Zt(n, function (t) {
      return -1 !== t.search(/,|\s/);
    }));
    n[i] && -1 === n[i].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
    var l = /\s*,\s*|\s+/,
        c = -1 !== i ? [n.slice(0, i).concat([n[i].split(l)[0]]), [n[i].split(l)[1]].concat(n.slice(i + 1))] : [n];
    return (c = c.map(function (t, e) {
      var n = (1 === e ? !a : a) ? "height" : "width",
          i = !1;
      return t.reduce(function (t, e) {
        return "" === t[t.length - 1] && -1 !== ["+", "-"].indexOf(e) ? (t[t.length - 1] = e, i = !0, t) : i ? (t[t.length - 1] += e, i = !1, t) : t.concat(e);
      }, []).map(function (t) {
        return function (t, e, n, i) {
          var r = t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
              o = +r[1],
              s = r[2];
          if (!o) return t;

          if (0 === s.indexOf("%")) {
            var a = void 0;

            switch (s) {
              case "%p":
                a = n;
                break;

              case "%":
              case "%r":
              default:
                a = i;
            }

            return Bt(a)[e] / 100 * o;
          }

          if ("vh" === s || "vw" === s) return ("vh" === s ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * o;
          return o;
        }(t, n, r, o);
      });
    })).forEach(function (n, i) {
      n.forEach(function (t, e) {
        oe(t) && (s[i] += t * ("-" === n[e - 1] ? -1 : 1));
      });
    }), s;
  }

  var de = {
    placement: "bottom",
    positionFixed: !1,
    eventsEnabled: !0,
    removeOnDestroy: !1,
    onCreate: function onCreate() {},
    onUpdate: function onUpdate() {},
    modifiers: {
      shift: {
        order: 100,
        enabled: !0,
        fn: function fn(t) {
          var e = t.placement,
              n = e.split("-")[0],
              i = e.split("-")[1];

          if (i) {
            var r = t.offsets,
                o = r.reference,
                s = r.popper,
                a = -1 !== ["bottom", "top"].indexOf(n),
                l = a ? "left" : "top",
                c = a ? "width" : "height",
                f = {
              start: Ft({}, l, o[l]),
              end: Ft({}, l, o[l] + o[c] - s[c])
            };
            t.offsets.popper = Ut({}, s, f[i]);
          }

          return t;
        }
      },
      offset: {
        order: 200,
        enabled: !0,
        fn: function fn(t, e) {
          var n = e.offset,
              i = t.placement,
              r = t.offsets,
              o = r.popper,
              s = r.reference,
              a = i.split("-")[0],
              l = void 0;
          return l = oe(+n) ? [+n, 0] : ue(n, o, s, a), "left" === a ? (o.top += l[0], o.left -= l[1]) : "right" === a ? (o.top += l[0], o.left += l[1]) : "top" === a ? (o.left += l[0], o.top -= l[1]) : "bottom" === a && (o.left += l[0], o.top += l[1]), t.popper = o, t;
        },
        offset: 0
      },
      preventOverflow: {
        order: 300,
        enabled: !0,
        fn: function fn(t, i) {
          var e = i.boundariesElement || kt(t.instance.popper);
          t.instance.reference === e && (e = kt(e));
          var r = Yt(t.instance.popper, t.instance.reference, i.padding, e, t.positionFixed);
          i.boundaries = r;
          var n = i.priority,
              o = t.offsets.popper,
              s = {
            primary: function primary(t) {
              var e = o[t];
              return o[t] < r[t] && !i.escapeWithReference && (e = Math.max(o[t], r[t])), Ft({}, t, e);
            },
            secondary: function secondary(t) {
              var e = "right" === t ? "left" : "top",
                  n = o[e];
              return o[t] > r[t] && !i.escapeWithReference && (n = Math.min(o[e], r[t] - ("right" === t ? o.width : o.height))), Ft({}, e, n);
            }
          };
          return n.forEach(function (t) {
            var e = -1 !== ["left", "top"].indexOf(t) ? "primary" : "secondary";
            o = Ut({}, o, s[e](t));
          }), t.offsets.popper = o, t;
        },
        priority: ["left", "right", "top", "bottom"],
        padding: 5,
        boundariesElement: "scrollParent"
      },
      keepTogether: {
        order: 400,
        enabled: !0,
        fn: function fn(t) {
          var e = t.offsets,
              n = e.popper,
              i = e.reference,
              r = t.placement.split("-")[0],
              o = Math.floor,
              s = -1 !== ["top", "bottom"].indexOf(r),
              a = s ? "right" : "bottom",
              l = s ? "left" : "top",
              c = s ? "width" : "height";
          return n[a] < o(i[l]) && (t.offsets.popper[l] = o(i[l]) - n[c]), n[l] > o(i[a]) && (t.offsets.popper[l] = o(i[a])), t;
        }
      },
      arrow: {
        order: 500,
        enabled: !0,
        fn: function fn(t, e) {
          var n;
          if (!ae(t.instance.modifiers, "arrow", "keepTogether")) return t;
          var i = e.element;

          if ("string" == typeof i) {
            if (!(i = t.instance.popper.querySelector(i))) return t;
          } else if (!t.instance.popper.contains(i)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), t;

          var r = t.placement.split("-")[0],
              o = t.offsets,
              s = o.popper,
              a = o.reference,
              l = -1 !== ["left", "right"].indexOf(r),
              c = l ? "height" : "width",
              f = l ? "Top" : "Left",
              h = f.toLowerCase(),
              u = l ? "left" : "top",
              d = l ? "bottom" : "right",
              p = zt(i)[c];
          a[d] - p < s[h] && (t.offsets.popper[h] -= s[h] - (a[d] - p)), a[h] + p > s[d] && (t.offsets.popper[h] += a[h] + p - s[d]), t.offsets.popper = Bt(t.offsets.popper);

          var g = a[h] + a[c] / 2 - p / 2,
              m = Dt(t.instance.popper),
              _ = parseFloat(m["margin" + f], 10),
              v = parseFloat(m["border" + f + "Width"], 10),
              E = g - t.offsets.popper[h] - _ - v;

          return E = Math.max(Math.min(s[c] - p, E), 0), t.arrowElement = i, t.offsets.arrow = (Ft(n = {}, h, Math.round(E)), Ft(n, u, ""), n), t;
        },
        element: "[x-arrow]"
      },
      flip: {
        order: 600,
        enabled: !0,
        fn: function fn(p, g) {
          if (te(p.instance.modifiers, "inner")) return p;
          if (p.flipped && p.placement === p.originalPlacement) return p;
          var m = Yt(p.instance.popper, p.instance.reference, g.padding, g.boundariesElement, p.positionFixed),
              _ = p.placement.split("-")[0],
              v = Xt(_),
              E = p.placement.split("-")[1] || "",
              y = [];

          switch (g.behavior) {
            case he.FLIP:
              y = [_, v];
              break;

            case he.CLOCKWISE:
              y = fe(_);
              break;

            case he.COUNTERCLOCKWISE:
              y = fe(_, !0);
              break;

            default:
              y = g.behavior;
          }

          return y.forEach(function (t, e) {
            if (_ !== t || y.length === e + 1) return p;
            _ = p.placement.split("-")[0], v = Xt(_);
            var n,
                i = p.offsets.popper,
                r = p.offsets.reference,
                o = Math.floor,
                s = "left" === _ && o(i.right) > o(r.left) || "right" === _ && o(i.left) < o(r.right) || "top" === _ && o(i.bottom) > o(r.top) || "bottom" === _ && o(i.top) < o(r.bottom),
                a = o(i.left) < o(m.left),
                l = o(i.right) > o(m.right),
                c = o(i.top) < o(m.top),
                f = o(i.bottom) > o(m.bottom),
                h = "left" === _ && a || "right" === _ && l || "top" === _ && c || "bottom" === _ && f,
                u = -1 !== ["top", "bottom"].indexOf(_),
                d = !!g.flipVariations && (u && "start" === E && a || u && "end" === E && l || !u && "start" === E && c || !u && "end" === E && f);
            (s || h || d) && (p.flipped = !0, (s || h) && (_ = y[e + 1]), d && (E = "end" === (n = E) ? "start" : "start" === n ? "end" : n), p.placement = _ + (E ? "-" + E : ""), p.offsets.popper = Ut({}, p.offsets.popper, Jt(p.instance.popper, p.offsets.reference, p.placement)), p = $t(p.instance.modifiers, p, "flip"));
          }), p;
        },
        behavior: "flip",
        padding: 5,
        boundariesElement: "viewport"
      },
      inner: {
        order: 700,
        enabled: !1,
        fn: function fn(t) {
          var e = t.placement,
              n = e.split("-")[0],
              i = t.offsets,
              r = i.popper,
              o = i.reference,
              s = -1 !== ["left", "right"].indexOf(n),
              a = -1 === ["top", "left"].indexOf(n);
          return r[s ? "left" : "top"] = o[n] - (a ? r[s ? "width" : "height"] : 0), t.placement = Xt(e), t.offsets.popper = Bt(r), t;
        }
      },
      hide: {
        order: 800,
        enabled: !0,
        fn: function fn(t) {
          if (!ae(t.instance.modifiers, "hide", "preventOverflow")) return t;
          var e = t.offsets.reference,
              n = Zt(t.instance.modifiers, function (t) {
            return "preventOverflow" === t.name;
          }).boundaries;

          if (e.bottom < n.top || e.left > n.right || e.top > n.bottom || e.right < n.left) {
            if (!0 === t.hide) return t;
            t.hide = !0, t.attributes["x-out-of-boundaries"] = "";
          } else {
            if (!1 === t.hide) return t;
            t.hide = !1, t.attributes["x-out-of-boundaries"] = !1;
          }

          return t;
        }
      },
      computeStyle: {
        order: 850,
        enabled: !0,
        fn: function fn(t, e) {
          var n = e.x,
              i = e.y,
              r = t.offsets.popper,
              o = Zt(t.instance.modifiers, function (t) {
            return "applyStyle" === t.name;
          }).gpuAcceleration;
          void 0 !== o && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
          var s = void 0 !== o ? o : e.gpuAcceleration,
              a = Kt(kt(t.instance.popper)),
              l = {
            position: r.position
          },
              c = {
            left: Math.floor(r.left),
            top: Math.floor(r.top),
            bottom: Math.floor(r.bottom),
            right: Math.floor(r.right)
          },
              f = "bottom" === n ? "top" : "bottom",
              h = "right" === i ? "left" : "right",
              u = ee("transform"),
              d = void 0,
              p = void 0;
          if (p = "bottom" === f ? -a.height + c.bottom : c.top, d = "right" === h ? -a.width + c.right : c.left, s && u) l[u] = "translate3d(" + d + "px, " + p + "px, 0)", l[f] = 0, l[h] = 0, l.willChange = "transform";else {
            var g = "bottom" === f ? -1 : 1,
                m = "right" === h ? -1 : 1;
            l[f] = p * g, l[h] = d * m, l.willChange = f + ", " + h;
          }
          var _ = {
            "x-placement": t.placement
          };
          return t.attributes = Ut({}, _, t.attributes), t.styles = Ut({}, l, t.styles), t.arrowStyles = Ut({}, t.offsets.arrow, t.arrowStyles), t;
        },
        gpuAcceleration: !0,
        x: "bottom",
        y: "right"
      },
      applyStyle: {
        order: 900,
        enabled: !0,
        fn: function fn(t) {
          var e, n;
          return se(t.instance.popper, t.styles), e = t.instance.popper, n = t.attributes, Object.keys(n).forEach(function (t) {
            !1 !== n[t] ? e.setAttribute(t, n[t]) : e.removeAttribute(t);
          }), t.arrowElement && Object.keys(t.arrowStyles).length && se(t.arrowElement, t.arrowStyles), t;
        },
        onLoad: function onLoad(t, e, n, i, r) {
          var o = qt(r, e, t, n.positionFixed),
              s = Gt(n.placement, o, e, t, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);
          return e.setAttribute("x-placement", s), se(e, {
            position: n.positionFixed ? "fixed" : "absolute"
          }), n;
        },
        gpuAcceleration: void 0
      }
    }
  },
      pe = function () {
    function o(t, e) {
      var n = this,
          i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
      Ht(this, o), this.scheduleUpdate = function () {
        return requestAnimationFrame(n.update);
      }, this.update = wt(this.update.bind(this)), this.options = Ut({}, o.Defaults, i), this.state = {
        isDestroyed: !1,
        isCreated: !1,
        scrollParents: []
      }, this.reference = t && t.jquery ? t[0] : t, this.popper = e && e.jquery ? e[0] : e, this.options.modifiers = {}, Object.keys(Ut({}, o.Defaults.modifiers, i.modifiers)).forEach(function (t) {
        n.options.modifiers[t] = Ut({}, o.Defaults.modifiers[t] || {}, i.modifiers ? i.modifiers[t] : {});
      }), this.modifiers = Object.keys(this.options.modifiers).map(function (t) {
        return Ut({
          name: t
        }, n.options.modifiers[t]);
      }).sort(function (t, e) {
        return t.order - e.order;
      }), this.modifiers.forEach(function (t) {
        t.enabled && It(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);
      }), this.update();
      var r = this.options.eventsEnabled;
      r && this.enableEventListeners(), this.state.eventsEnabled = r;
    }

    return Wt(o, [{
      key: "update",
      value: function value() {
        return function () {
          if (!this.state.isDestroyed) {
            var t = {
              instance: this,
              styles: {},
              arrowStyles: {},
              attributes: {},
              flipped: !1,
              offsets: {}
            };
            t.offsets.reference = qt(this.state, this.popper, this.reference, this.options.positionFixed), t.placement = Gt(this.options.placement, t.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), t.originalPlacement = t.placement, t.positionFixed = this.options.positionFixed, t.offsets.popper = Jt(this.popper, t.offsets.reference, t.placement), t.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", t = $t(this.modifiers, t), this.state.isCreated ? this.options.onUpdate(t) : (this.state.isCreated = !0, this.options.onCreate(t));
          }
        }.call(this);
      }
    }, {
      key: "destroy",
      value: function value() {
        return function () {
          return this.state.isDestroyed = !0, te(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[ee("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
        }.call(this);
      }
    }, {
      key: "enableEventListeners",
      value: function value() {
        return function () {
          this.state.eventsEnabled || (this.state = ie(this.reference, this.options, this.state, this.scheduleUpdate));
        }.call(this);
      }
    }, {
      key: "disableEventListeners",
      value: function value() {
        return re.call(this);
      }
    }]), o;
  }();

  pe.Utils = ("undefined" != typeof window ? window : global).PopperUtils, pe.placements = le, pe.Defaults = de;

  var ge,
      me,
      _e,
      ve,
      Ee,
      ye,
      be,
      Te,
      Ce,
      we,
      Ie,
      De,
      Ae,
      Se,
      Oe,
      Ne,
      ke,
      Le,
      Pe,
      xe,
      je,
      Re,
      Me,
      He,
      We,
      Fe,
      Ue,
      Be,
      Ke,
      Ve,
      Qe,
      Ye,
      Ge,
      qe,
      ze,
      Xe,
      Je,
      Ze,
      $e,
      tn,
      en,
      nn,
      rn,
      on,
      sn,
      an,
      ln,
      cn,
      fn,
      hn,
      un,
      dn,
      pn,
      gn,
      mn,
      _n,
      vn,
      En,
      yn,
      bn,
      Tn,
      Cn,
      wn,
      In,
      Dn,
      An,
      Sn,
      On,
      Nn,
      kn,
      Ln,
      Pn,
      xn,
      jn,
      Rn,
      Mn,
      Hn,
      Wn,
      Fn,
      Un,
      Bn,
      Kn,
      Vn,
      Qn,
      Yn,
      Gn,
      qn,
      zn,
      Xn,
      Jn,
      Zn,
      $n,
      ti,
      ei,
      ni,
      ii,
      ri,
      oi,
      si,
      ai,
      li,
      ci,
      fi,
      hi,
      ui,
      di,
      pi,
      gi,
      mi,
      _i,
      vi,
      Ei,
      yi,
      bi = (me = "dropdown", ve = "." + (_e = "bs.dropdown"), Ee = ".data-api", ye = (ge = e).fn[me], be = new RegExp("38|40|27"), Te = {
    HIDE: "hide" + ve,
    HIDDEN: "hidden" + ve,
    SHOW: "show" + ve,
    SHOWN: "shown" + ve,
    CLICK: "click" + ve,
    CLICK_DATA_API: "click" + ve + Ee,
    KEYDOWN_DATA_API: "keydown" + ve + Ee,
    KEYUP_DATA_API: "keyup" + ve + Ee
  }, Ce = "disabled", we = "show", Ie = "dropup", De = "dropright", Ae = "dropleft", Se = "dropdown-menu-right", Oe = "position-static", Ne = '[data-toggle="dropdown"]', ke = ".dropdown form", Le = ".dropdown-menu", Pe = ".navbar-nav", xe = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", je = "top-start", Re = "top-end", Me = "bottom-start", He = "bottom-end", We = "right-start", Fe = "left-start", Ue = {
    offset: 0,
    flip: !0,
    boundary: "scrollParent",
    reference: "toggle",
    display: "dynamic"
  }, Be = {
    offset: "(number|string|function)",
    flip: "boolean",
    boundary: "(string|element)",
    reference: "(string|element)",
    display: "string"
  }, Ke = function () {
    function l(t, e) {
      this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
    }

    var t = l.prototype;
    return t.toggle = function () {
      if (!this._element.disabled && !ge(this._element).hasClass(Ce)) {
        var t = l._getParentFromElement(this._element),
            e = ge(this._menu).hasClass(we);

        if (l._clearMenus(), !e) {
          var n = {
            relatedTarget: this._element
          },
              i = ge.Event(Te.SHOW, n);

          if (ge(t).trigger(i), !i.isDefaultPrevented()) {
            if (!this._inNavbar) {
              if ("undefined" == typeof pe) throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
              var r = this._element;
              "parent" === this._config.reference ? r = t : gt.isElement(this._config.reference) && (r = this._config.reference, "undefined" != typeof this._config.reference.jquery && (r = this._config.reference[0])), "scrollParent" !== this._config.boundary && ge(t).addClass(Oe), this._popper = new pe(r, this._menu, this._getPopperConfig());
            }

            "ontouchstart" in document.documentElement && 0 === ge(t).closest(Pe).length && ge(document.body).children().on("mouseover", null, ge.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), ge(this._menu).toggleClass(we), ge(t).toggleClass(we).trigger(ge.Event(Te.SHOWN, n));
          }
        }
      }
    }, t.dispose = function () {
      ge.removeData(this._element, _e), ge(this._element).off(ve), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);
    }, t.update = function () {
      this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
    }, t._addEventListeners = function () {
      var e = this;
      ge(this._element).on(Te.CLICK, function (t) {
        t.preventDefault(), t.stopPropagation(), e.toggle();
      });
    }, t._getConfig = function (t) {
      return t = c({}, this.constructor.Default, ge(this._element).data(), t), gt.typeCheckConfig(me, t, this.constructor.DefaultType), t;
    }, t._getMenuElement = function () {
      if (!this._menu) {
        var t = l._getParentFromElement(this._element);

        this._menu = ge(t).find(Le)[0];
      }

      return this._menu;
    }, t._getPlacement = function () {
      var t = ge(this._element).parent(),
          e = Me;
      return t.hasClass(Ie) ? (e = je, ge(this._menu).hasClass(Se) && (e = Re)) : t.hasClass(De) ? e = We : t.hasClass(Ae) ? e = Fe : ge(this._menu).hasClass(Se) && (e = He), e;
    }, t._detectNavbar = function () {
      return 0 < ge(this._element).closest(".navbar").length;
    }, t._getPopperConfig = function () {
      var e = this,
          t = {};
      "function" == typeof this._config.offset ? t.fn = function (t) {
        return t.offsets = c({}, t.offsets, e._config.offset(t.offsets) || {}), t;
      } : t.offset = this._config.offset;
      var n = {
        placement: this._getPlacement(),
        modifiers: {
          offset: t,
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      };
      return "static" === this._config.display && (n.modifiers.applyStyle = {
        enabled: !1
      }), n;
    }, l._jQueryInterface = function (e) {
      return this.each(function () {
        var t = ge(this).data(_e);

        if (t || (t = new l(this, "object" == _typeof(e) ? e : null), ge(this).data(_e, t)), "string" == typeof e) {
          if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');
          t[e]();
        }
      });
    }, l._clearMenus = function (t) {
      if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var e = ge.makeArray(ge(Ne)), n = 0; n < e.length; n++) {
        var i = l._getParentFromElement(e[n]),
            r = ge(e[n]).data(_e),
            o = {
          relatedTarget: e[n]
        };

        if (r) {
          var s = r._menu;

          if (ge(i).hasClass(we) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && ge.contains(i, t.target))) {
            var a = ge.Event(Te.HIDE, o);
            ge(i).trigger(a), a.isDefaultPrevented() || ("ontouchstart" in document.documentElement && ge(document.body).children().off("mouseover", null, ge.noop), e[n].setAttribute("aria-expanded", "false"), ge(s).removeClass(we), ge(i).removeClass(we).trigger(ge.Event(Te.HIDDEN, o)));
          }
        }
      }
    }, l._getParentFromElement = function (t) {
      var e,
          n = gt.getSelectorFromElement(t);
      return n && (e = ge(n)[0]), e || t.parentNode;
    }, l._dataApiKeydownHandler = function (t) {
      if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || ge(t.target).closest(Le).length)) : be.test(t.which)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !ge(this).hasClass(Ce))) {
        var e = l._getParentFromElement(this),
            n = ge(e).hasClass(we);

        if ((n || 27 === t.which && 32 === t.which) && (!n || 27 !== t.which && 32 !== t.which)) {
          var i = ge(e).find(xe).get();

          if (0 !== i.length) {
            var r = i.indexOf(t.target);
            38 === t.which && 0 < r && r--, 40 === t.which && r < i.length - 1 && r++, r < 0 && (r = 0), i[r].focus();
          }
        } else {
          if (27 === t.which) {
            var o = ge(e).find(Ne)[0];
            ge(o).trigger("focus");
          }

          ge(this).trigger("click");
        }
      }
    }, s(l, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }, {
      key: "Default",
      get: function get() {
        return Ue;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return Be;
      }
    }]), l;
  }(), ge(document).on(Te.KEYDOWN_DATA_API, Ne, Ke._dataApiKeydownHandler).on(Te.KEYDOWN_DATA_API, Le, Ke._dataApiKeydownHandler).on(Te.CLICK_DATA_API + " " + Te.KEYUP_DATA_API, Ke._clearMenus).on(Te.CLICK_DATA_API, Ne, function (t) {
    t.preventDefault(), t.stopPropagation(), Ke._jQueryInterface.call(ge(this), "toggle");
  }).on(Te.CLICK_DATA_API, ke, function (t) {
    t.stopPropagation();
  }), ge.fn[me] = Ke._jQueryInterface, ge.fn[me].Constructor = Ke, ge.fn[me].noConflict = function () {
    return ge.fn[me] = ye, Ke._jQueryInterface;
  }, Ke),
      Ti = (Qe = "modal", Ge = "." + (Ye = "bs.modal"), qe = (Ve = e).fn[Qe], ze = {
    backdrop: !0,
    keyboard: !0,
    focus: !0,
    show: !0
  }, Xe = {
    backdrop: "(boolean|string)",
    keyboard: "boolean",
    focus: "boolean",
    show: "boolean"
  }, Je = {
    HIDE: "hide" + Ge,
    HIDDEN: "hidden" + Ge,
    SHOW: "show" + Ge,
    SHOWN: "shown" + Ge,
    FOCUSIN: "focusin" + Ge,
    RESIZE: "resize" + Ge,
    CLICK_DISMISS: "click.dismiss" + Ge,
    KEYDOWN_DISMISS: "keydown.dismiss" + Ge,
    MOUSEUP_DISMISS: "mouseup.dismiss" + Ge,
    MOUSEDOWN_DISMISS: "mousedown.dismiss" + Ge,
    CLICK_DATA_API: "click" + Ge + ".data-api"
  }, Ze = "modal-scrollbar-measure", $e = "modal-backdrop", tn = "modal-open", en = "fade", nn = "show", rn = {
    DIALOG: ".modal-dialog",
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
    STICKY_CONTENT: ".sticky-top",
    NAVBAR_TOGGLER: ".navbar-toggler"
  }, on = function () {
    function r(t, e) {
      this._config = this._getConfig(e), this._element = t, this._dialog = Ve(t).find(rn.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._scrollbarWidth = 0;
    }

    var t = r.prototype;
    return t.toggle = function (t) {
      return this._isShown ? this.hide() : this.show(t);
    }, t.show = function (t) {
      var e = this;

      if (!this._isTransitioning && !this._isShown) {
        Ve(this._element).hasClass(en) && (this._isTransitioning = !0);
        var n = Ve.Event(Je.SHOW, {
          relatedTarget: t
        });
        Ve(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), Ve(document.body).addClass(tn), this._setEscapeEvent(), this._setResizeEvent(), Ve(this._element).on(Je.CLICK_DISMISS, rn.DATA_DISMISS, function (t) {
          return e.hide(t);
        }), Ve(this._dialog).on(Je.MOUSEDOWN_DISMISS, function () {
          Ve(e._element).one(Je.MOUSEUP_DISMISS, function (t) {
            Ve(t.target).is(e._element) && (e._ignoreBackdropClick = !0);
          });
        }), this._showBackdrop(function () {
          return e._showElement(t);
        }));
      }
    }, t.hide = function (t) {
      var e = this;

      if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {
        var n = Ve.Event(Je.HIDE);

        if (Ve(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {
          this._isShown = !1;
          var i = Ve(this._element).hasClass(en);

          if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), Ve(document).off(Je.FOCUSIN), Ve(this._element).removeClass(nn), Ve(this._element).off(Je.CLICK_DISMISS), Ve(this._dialog).off(Je.MOUSEDOWN_DISMISS), i) {
            var r = gt.getTransitionDurationFromElement(this._element);
            Ve(this._element).one(gt.TRANSITION_END, function (t) {
              return e._hideModal(t);
            }).emulateTransitionEnd(r);
          } else this._hideModal();
        }
      }
    }, t.dispose = function () {
      Ve.removeData(this._element, Ye), Ve(window, document, this._element, this._backdrop).off(Ge), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null;
    }, t.handleUpdate = function () {
      this._adjustDialog();
    }, t._getConfig = function (t) {
      return t = c({}, ze, t), gt.typeCheckConfig(Qe, t, Xe), t;
    }, t._showElement = function (t) {
      var e = this,
          n = Ve(this._element).hasClass(en);
      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, n && gt.reflow(this._element), Ve(this._element).addClass(nn), this._config.focus && this._enforceFocus();

      var i = Ve.Event(Je.SHOWN, {
        relatedTarget: t
      }),
          r = function r() {
        e._config.focus && e._element.focus(), e._isTransitioning = !1, Ve(e._element).trigger(i);
      };

      if (n) {
        var o = gt.getTransitionDurationFromElement(this._element);
        Ve(this._dialog).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
      } else r();
    }, t._enforceFocus = function () {
      var e = this;
      Ve(document).off(Je.FOCUSIN).on(Je.FOCUSIN, function (t) {
        document !== t.target && e._element !== t.target && 0 === Ve(e._element).has(t.target).length && e._element.focus();
      });
    }, t._setEscapeEvent = function () {
      var e = this;
      this._isShown && this._config.keyboard ? Ve(this._element).on(Je.KEYDOWN_DISMISS, function (t) {
        27 === t.which && (t.preventDefault(), e.hide());
      }) : this._isShown || Ve(this._element).off(Je.KEYDOWN_DISMISS);
    }, t._setResizeEvent = function () {
      var e = this;
      this._isShown ? Ve(window).on(Je.RESIZE, function (t) {
        return e.handleUpdate(t);
      }) : Ve(window).off(Je.RESIZE);
    }, t._hideModal = function () {
      var t = this;
      this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._isTransitioning = !1, this._showBackdrop(function () {
        Ve(document.body).removeClass(tn), t._resetAdjustments(), t._resetScrollbar(), Ve(t._element).trigger(Je.HIDDEN);
      });
    }, t._removeBackdrop = function () {
      this._backdrop && (Ve(this._backdrop).remove(), this._backdrop = null);
    }, t._showBackdrop = function (t) {
      var e = this,
          n = Ve(this._element).hasClass(en) ? en : "";

      if (this._isShown && this._config.backdrop) {
        if (this._backdrop = document.createElement("div"), this._backdrop.className = $e, n && Ve(this._backdrop).addClass(n), Ve(this._backdrop).appendTo(document.body), Ve(this._element).on(Je.CLICK_DISMISS, function (t) {
          e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === e._config.backdrop ? e._element.focus() : e.hide());
        }), n && gt.reflow(this._backdrop), Ve(this._backdrop).addClass(nn), !t) return;
        if (!n) return void t();
        var i = gt.getTransitionDurationFromElement(this._backdrop);
        Ve(this._backdrop).one(gt.TRANSITION_END, t).emulateTransitionEnd(i);
      } else if (!this._isShown && this._backdrop) {
        Ve(this._backdrop).removeClass(nn);

        var r = function r() {
          e._removeBackdrop(), t && t();
        };

        if (Ve(this._element).hasClass(en)) {
          var o = gt.getTransitionDurationFromElement(this._backdrop);
          Ve(this._backdrop).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
        } else r();
      } else t && t();
    }, t._adjustDialog = function () {
      var t = this._element.scrollHeight > document.documentElement.clientHeight;
      !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
    }, t._resetAdjustments = function () {
      this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
    }, t._checkScrollbar = function () {
      var t = document.body.getBoundingClientRect();
      this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
    }, t._setScrollbar = function () {
      var r = this;

      if (this._isBodyOverflowing) {
        Ve(rn.FIXED_CONTENT).each(function (t, e) {
          var n = Ve(e)[0].style.paddingRight,
              i = Ve(e).css("padding-right");
          Ve(e).data("padding-right", n).css("padding-right", parseFloat(i) + r._scrollbarWidth + "px");
        }), Ve(rn.STICKY_CONTENT).each(function (t, e) {
          var n = Ve(e)[0].style.marginRight,
              i = Ve(e).css("margin-right");
          Ve(e).data("margin-right", n).css("margin-right", parseFloat(i) - r._scrollbarWidth + "px");
        }), Ve(rn.NAVBAR_TOGGLER).each(function (t, e) {
          var n = Ve(e)[0].style.marginRight,
              i = Ve(e).css("margin-right");
          Ve(e).data("margin-right", n).css("margin-right", parseFloat(i) + r._scrollbarWidth + "px");
        });
        var t = document.body.style.paddingRight,
            e = Ve(document.body).css("padding-right");
        Ve(document.body).data("padding-right", t).css("padding-right", parseFloat(e) + this._scrollbarWidth + "px");
      }
    }, t._resetScrollbar = function () {
      Ve(rn.FIXED_CONTENT).each(function (t, e) {
        var n = Ve(e).data("padding-right");
        "undefined" != typeof n && Ve(e).css("padding-right", n).removeData("padding-right");
      }), Ve(rn.STICKY_CONTENT + ", " + rn.NAVBAR_TOGGLER).each(function (t, e) {
        var n = Ve(e).data("margin-right");
        "undefined" != typeof n && Ve(e).css("margin-right", n).removeData("margin-right");
      });
      var t = Ve(document.body).data("padding-right");
      "undefined" != typeof t && Ve(document.body).css("padding-right", t).removeData("padding-right");
    }, t._getScrollbarWidth = function () {
      var t = document.createElement("div");
      t.className = Ze, document.body.appendChild(t);
      var e = t.getBoundingClientRect().width - t.clientWidth;
      return document.body.removeChild(t), e;
    }, r._jQueryInterface = function (n, i) {
      return this.each(function () {
        var t = Ve(this).data(Ye),
            e = c({}, r.Default, Ve(this).data(), "object" == _typeof(n) && n);

        if (t || (t = new r(this, e), Ve(this).data(Ye, t)), "string" == typeof n) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n](i);
        } else e.show && t.show(i);
      });
    }, s(r, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }, {
      key: "Default",
      get: function get() {
        return ze;
      }
    }]), r;
  }(), Ve(document).on(Je.CLICK_DATA_API, rn.DATA_TOGGLE, function (t) {
    var e,
        n = this,
        i = gt.getSelectorFromElement(this);
    i && (e = Ve(i)[0]);
    var r = Ve(e).data(Ye) ? "toggle" : c({}, Ve(e).data(), Ve(this).data());
    "A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();
    var o = Ve(e).one(Je.SHOW, function (t) {
      t.isDefaultPrevented() || o.one(Je.HIDDEN, function () {
        Ve(n).is(":visible") && n.focus();
      });
    });

    on._jQueryInterface.call(Ve(e), r, this);
  }), Ve.fn[Qe] = on._jQueryInterface, Ve.fn[Qe].Constructor = on, Ve.fn[Qe].noConflict = function () {
    return Ve.fn[Qe] = qe, on._jQueryInterface;
  }, on),
      Ci = (an = "tooltip", cn = "." + (ln = "bs.tooltip"), fn = (sn = e).fn[an], hn = "bs-tooltip", un = new RegExp("(^|\\s)" + hn + "\\S+", "g"), gn = {
    animation: !0,
    template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: "hover focus",
    title: "",
    delay: 0,
    html: !(pn = {
      AUTO: "auto",
      TOP: "top",
      RIGHT: "right",
      BOTTOM: "bottom",
      LEFT: "left"
    }),
    selector: !(dn = {
      animation: "boolean",
      template: "string",
      title: "(string|element|function)",
      trigger: "string",
      delay: "(number|object)",
      html: "boolean",
      selector: "(string|boolean)",
      placement: "(string|function)",
      offset: "(number|string)",
      container: "(string|element|boolean)",
      fallbackPlacement: "(string|array)",
      boundary: "(string|element)"
    }),
    placement: "top",
    offset: 0,
    container: !1,
    fallbackPlacement: "flip",
    boundary: "scrollParent"
  }, _n = "out", vn = {
    HIDE: "hide" + cn,
    HIDDEN: "hidden" + cn,
    SHOW: (mn = "show") + cn,
    SHOWN: "shown" + cn,
    INSERTED: "inserted" + cn,
    CLICK: "click" + cn,
    FOCUSIN: "focusin" + cn,
    FOCUSOUT: "focusout" + cn,
    MOUSEENTER: "mouseenter" + cn,
    MOUSELEAVE: "mouseleave" + cn
  }, En = "fade", yn = "show", bn = ".tooltip-inner", Tn = ".arrow", Cn = "hover", wn = "focus", In = "click", Dn = "manual", An = function () {
    function i(t, e) {
      if ("undefined" == typeof pe) throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");
      this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();
    }

    var t = i.prototype;
    return t.enable = function () {
      this._isEnabled = !0;
    }, t.disable = function () {
      this._isEnabled = !1;
    }, t.toggleEnabled = function () {
      this._isEnabled = !this._isEnabled;
    }, t.toggle = function (t) {
      if (this._isEnabled) if (t) {
        var e = this.constructor.DATA_KEY,
            n = sn(t.currentTarget).data(e);
        n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), sn(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);
      } else {
        if (sn(this.getTipElement()).hasClass(yn)) return void this._leave(null, this);

        this._enter(null, this);
      }
    }, t.dispose = function () {
      clearTimeout(this._timeout), sn.removeData(this.element, this.constructor.DATA_KEY), sn(this.element).off(this.constructor.EVENT_KEY), sn(this.element).closest(".modal").off("hide.bs.modal"), this.tip && sn(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
    }, t.show = function () {
      var e = this;
      if ("none" === sn(this.element).css("display")) throw new Error("Please use show on visible elements");
      var t = sn.Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        sn(this.element).trigger(t);
        var n = sn.contains(this.element.ownerDocument.documentElement, this.element);
        if (t.isDefaultPrevented() || !n) return;
        var i = this.getTipElement(),
            r = gt.getUID(this.constructor.NAME);
        i.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), this.config.animation && sn(i).addClass(En);

        var o = "function" == typeof this.config.placement ? this.config.placement.call(this, i, this.element) : this.config.placement,
            s = this._getAttachment(o);

        this.addAttachmentClass(s);
        var a = !1 === this.config.container ? document.body : sn(this.config.container);
        sn(i).data(this.constructor.DATA_KEY, this), sn.contains(this.element.ownerDocument.documentElement, this.tip) || sn(i).appendTo(a), sn(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new pe(this.element, i, {
          placement: s,
          modifiers: {
            offset: {
              offset: this.config.offset
            },
            flip: {
              behavior: this.config.fallbackPlacement
            },
            arrow: {
              element: Tn
            },
            preventOverflow: {
              boundariesElement: this.config.boundary
            }
          },
          onCreate: function onCreate(t) {
            t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);
          },
          onUpdate: function onUpdate(t) {
            e._handlePopperPlacementChange(t);
          }
        }), sn(i).addClass(yn), "ontouchstart" in document.documentElement && sn(document.body).children().on("mouseover", null, sn.noop);

        var l = function l() {
          e.config.animation && e._fixTransition();
          var t = e._hoverState;
          e._hoverState = null, sn(e.element).trigger(e.constructor.Event.SHOWN), t === _n && e._leave(null, e);
        };

        if (sn(this.tip).hasClass(En)) {
          var c = gt.getTransitionDurationFromElement(this.tip);
          sn(this.tip).one(gt.TRANSITION_END, l).emulateTransitionEnd(c);
        } else l();
      }
    }, t.hide = function (t) {
      var e = this,
          n = this.getTipElement(),
          i = sn.Event(this.constructor.Event.HIDE),
          r = function r() {
        e._hoverState !== mn && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute("aria-describedby"), sn(e.element).trigger(e.constructor.Event.HIDDEN), null !== e._popper && e._popper.destroy(), t && t();
      };

      if (sn(this.element).trigger(i), !i.isDefaultPrevented()) {
        if (sn(n).removeClass(yn), "ontouchstart" in document.documentElement && sn(document.body).children().off("mouseover", null, sn.noop), this._activeTrigger[In] = !1, this._activeTrigger[wn] = !1, this._activeTrigger[Cn] = !1, sn(this.tip).hasClass(En)) {
          var o = gt.getTransitionDurationFromElement(n);
          sn(n).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
        } else r();

        this._hoverState = "";
      }
    }, t.update = function () {
      null !== this._popper && this._popper.scheduleUpdate();
    }, t.isWithContent = function () {
      return Boolean(this.getTitle());
    }, t.addAttachmentClass = function (t) {
      sn(this.getTipElement()).addClass(hn + "-" + t);
    }, t.getTipElement = function () {
      return this.tip = this.tip || sn(this.config.template)[0], this.tip;
    }, t.setContent = function () {
      var t = sn(this.getTipElement());
      this.setElementContent(t.find(bn), this.getTitle()), t.removeClass(En + " " + yn);
    }, t.setElementContent = function (t, e) {
      var n = this.config.html;
      "object" == _typeof(e) && (e.nodeType || e.jquery) ? n ? sn(e).parent().is(t) || t.empty().append(e) : t.text(sn(e).text()) : t[n ? "html" : "text"](e);
    }, t.getTitle = function () {
      var t = this.element.getAttribute("data-original-title");
      return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
    }, t._getAttachment = function (t) {
      return pn[t.toUpperCase()];
    }, t._setListeners = function () {
      var i = this;
      this.config.trigger.split(" ").forEach(function (t) {
        if ("click" === t) sn(i.element).on(i.constructor.Event.CLICK, i.config.selector, function (t) {
          return i.toggle(t);
        });else if (t !== Dn) {
          var e = t === Cn ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN,
              n = t === Cn ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;
          sn(i.element).on(e, i.config.selector, function (t) {
            return i._enter(t);
          }).on(n, i.config.selector, function (t) {
            return i._leave(t);
          });
        }
        sn(i.element).closest(".modal").on("hide.bs.modal", function () {
          return i.hide();
        });
      }), this.config.selector ? this.config = c({}, this.config, {
        trigger: "manual",
        selector: ""
      }) : this._fixTitle();
    }, t._fixTitle = function () {
      var t = _typeof(this.element.getAttribute("data-original-title"));

      (this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
    }, t._enter = function (t, e) {
      var n = this.constructor.DATA_KEY;
      (e = e || sn(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), sn(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusin" === t.type ? wn : Cn] = !0), sn(e.getTipElement()).hasClass(yn) || e._hoverState === mn ? e._hoverState = mn : (clearTimeout(e._timeout), e._hoverState = mn, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {
        e._hoverState === mn && e.show();
      }, e.config.delay.show) : e.show());
    }, t._leave = function (t, e) {
      var n = this.constructor.DATA_KEY;
      (e = e || sn(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), sn(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusout" === t.type ? wn : Cn] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = _n, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {
        e._hoverState === _n && e.hide();
      }, e.config.delay.hide) : e.hide());
    }, t._isWithActiveTrigger = function () {
      for (var t in this._activeTrigger) {
        if (this._activeTrigger[t]) return !0;
      }

      return !1;
    }, t._getConfig = function (t) {
      return "number" == typeof (t = c({}, this.constructor.Default, sn(this.element).data(), t)).delay && (t.delay = {
        show: t.delay,
        hide: t.delay
      }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), gt.typeCheckConfig(an, t, this.constructor.DefaultType), t;
    }, t._getDelegateConfig = function () {
      var t = {};
      if (this.config) for (var e in this.config) {
        this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
      }
      return t;
    }, t._cleanTipClass = function () {
      var t = sn(this.getTipElement()),
          e = t.attr("class").match(un);
      null !== e && 0 < e.length && t.removeClass(e.join(""));
    }, t._handlePopperPlacementChange = function (t) {
      this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
    }, t._fixTransition = function () {
      var t = this.getTipElement(),
          e = this.config.animation;
      null === t.getAttribute("x-placement") && (sn(t).removeClass(En), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var t = sn(this).data(ln),
            e = "object" == _typeof(n) && n;

        if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), sn(this).data(ln, t)), "string" == typeof n)) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }, {
      key: "Default",
      get: function get() {
        return gn;
      }
    }, {
      key: "NAME",
      get: function get() {
        return an;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return ln;
      }
    }, {
      key: "Event",
      get: function get() {
        return vn;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return cn;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return dn;
      }
    }]), i;
  }(), sn.fn[an] = An._jQueryInterface, sn.fn[an].Constructor = An, sn.fn[an].noConflict = function () {
    return sn.fn[an] = fn, An._jQueryInterface;
  }, An),
      wi = (On = "popover", kn = "." + (Nn = "bs.popover"), Ln = (Sn = e).fn[On], Pn = "bs-popover", xn = new RegExp("(^|\\s)" + Pn + "\\S+", "g"), jn = c({}, Ci.Default, {
    placement: "right",
    trigger: "click",
    content: "",
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
  }), Rn = c({}, Ci.DefaultType, {
    content: "(string|element|function)"
  }), Mn = "fade", Wn = ".popover-header", Fn = ".popover-body", Un = {
    HIDE: "hide" + kn,
    HIDDEN: "hidden" + kn,
    SHOW: (Hn = "show") + kn,
    SHOWN: "shown" + kn,
    INSERTED: "inserted" + kn,
    CLICK: "click" + kn,
    FOCUSIN: "focusin" + kn,
    FOCUSOUT: "focusout" + kn,
    MOUSEENTER: "mouseenter" + kn,
    MOUSELEAVE: "mouseleave" + kn
  }, Bn = function (t) {
    var e, n;

    function i() {
      return t.apply(this, arguments) || this;
    }

    n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n;
    var r = i.prototype;
    return r.isWithContent = function () {
      return this.getTitle() || this._getContent();
    }, r.addAttachmentClass = function (t) {
      Sn(this.getTipElement()).addClass(Pn + "-" + t);
    }, r.getTipElement = function () {
      return this.tip = this.tip || Sn(this.config.template)[0], this.tip;
    }, r.setContent = function () {
      var t = Sn(this.getTipElement());
      this.setElementContent(t.find(Wn), this.getTitle());

      var e = this._getContent();

      "function" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(Fn), e), t.removeClass(Mn + " " + Hn);
    }, r._getContent = function () {
      return this.element.getAttribute("data-content") || this.config.content;
    }, r._cleanTipClass = function () {
      var t = Sn(this.getTipElement()),
          e = t.attr("class").match(xn);
      null !== e && 0 < e.length && t.removeClass(e.join(""));
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var t = Sn(this).data(Nn),
            e = "object" == _typeof(n) ? n : null;

        if ((t || !/destroy|hide/.test(n)) && (t || (t = new i(this, e), Sn(this).data(Nn, t)), "string" == typeof n)) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }, {
      key: "Default",
      get: function get() {
        return jn;
      }
    }, {
      key: "NAME",
      get: function get() {
        return On;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return Nn;
      }
    }, {
      key: "Event",
      get: function get() {
        return Un;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return kn;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return Rn;
      }
    }]), i;
  }(Ci), Sn.fn[On] = Bn._jQueryInterface, Sn.fn[On].Constructor = Bn, Sn.fn[On].noConflict = function () {
    return Sn.fn[On] = Ln, Bn._jQueryInterface;
  }, Bn),
      Ii = (Vn = "scrollspy", Yn = "." + (Qn = "bs.scrollspy"), Gn = (Kn = e).fn[Vn], qn = {
    offset: 10,
    method: "auto",
    target: ""
  }, zn = {
    offset: "number",
    method: "string",
    target: "(string|element)"
  }, Xn = {
    ACTIVATE: "activate" + Yn,
    SCROLL: "scroll" + Yn,
    LOAD_DATA_API: "load" + Yn + ".data-api"
  }, Jn = "dropdown-item", Zn = "active", $n = {
    DATA_SPY: '[data-spy="scroll"]',
    ACTIVE: ".active",
    NAV_LIST_GROUP: ".nav, .list-group",
    NAV_LINKS: ".nav-link",
    NAV_ITEMS: ".nav-item",
    LIST_ITEMS: ".list-group-item",
    DROPDOWN: ".dropdown",
    DROPDOWN_ITEMS: ".dropdown-item",
    DROPDOWN_TOGGLE: ".dropdown-toggle"
  }, ti = "offset", ei = "position", ni = function () {
    function n(t, e) {
      var n = this;
      this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + " " + $n.NAV_LINKS + "," + this._config.target + " " + $n.LIST_ITEMS + "," + this._config.target + " " + $n.DROPDOWN_ITEMS, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, Kn(this._scrollElement).on(Xn.SCROLL, function (t) {
        return n._process(t);
      }), this.refresh(), this._process();
    }

    var t = n.prototype;
    return t.refresh = function () {
      var e = this,
          t = this._scrollElement === this._scrollElement.window ? ti : ei,
          r = "auto" === this._config.method ? t : this._config.method,
          o = r === ei ? this._getScrollTop() : 0;
      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), Kn.makeArray(Kn(this._selector)).map(function (t) {
        var e,
            n = gt.getSelectorFromElement(t);

        if (n && (e = Kn(n)[0]), e) {
          var i = e.getBoundingClientRect();
          if (i.width || i.height) return [Kn(e)[r]().top + o, n];
        }

        return null;
      }).filter(function (t) {
        return t;
      }).sort(function (t, e) {
        return t[0] - e[0];
      }).forEach(function (t) {
        e._offsets.push(t[0]), e._targets.push(t[1]);
      });
    }, t.dispose = function () {
      Kn.removeData(this._element, Qn), Kn(this._scrollElement).off(Yn), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
    }, t._getConfig = function (t) {
      if ("string" != typeof (t = c({}, qn, t)).target) {
        var e = Kn(t.target).attr("id");
        e || (e = gt.getUID(Vn), Kn(t.target).attr("id", e)), t.target = "#" + e;
      }

      return gt.typeCheckConfig(Vn, t, zn), t;
    }, t._getScrollTop = function () {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    }, t._getScrollHeight = function () {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }, t._getOffsetHeight = function () {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    }, t._process = function () {
      var t = this._getScrollTop() + this._config.offset,
          e = this._getScrollHeight(),
          n = this._config.offset + e - this._getOffsetHeight();

      if (this._scrollHeight !== e && this.refresh(), n <= t) {
        var i = this._targets[this._targets.length - 1];
        this._activeTarget !== i && this._activate(i);
      } else {
        if (this._activeTarget && t < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();

        for (var r = this._offsets.length; r--;) {
          this._activeTarget !== this._targets[r] && t >= this._offsets[r] && ("undefined" == typeof this._offsets[r + 1] || t < this._offsets[r + 1]) && this._activate(this._targets[r]);
        }
      }
    }, t._activate = function (e) {
      this._activeTarget = e, this._clear();

      var t = this._selector.split(",");

      t = t.map(function (t) {
        return t + '[data-target="' + e + '"],' + t + '[href="' + e + '"]';
      });
      var n = Kn(t.join(","));
      n.hasClass(Jn) ? (n.closest($n.DROPDOWN).find($n.DROPDOWN_TOGGLE).addClass(Zn), n.addClass(Zn)) : (n.addClass(Zn), n.parents($n.NAV_LIST_GROUP).prev($n.NAV_LINKS + ", " + $n.LIST_ITEMS).addClass(Zn), n.parents($n.NAV_LIST_GROUP).prev($n.NAV_ITEMS).children($n.NAV_LINKS).addClass(Zn)), Kn(this._scrollElement).trigger(Xn.ACTIVATE, {
        relatedTarget: e
      });
    }, t._clear = function () {
      Kn(this._selector).filter($n.ACTIVE).removeClass(Zn);
    }, n._jQueryInterface = function (e) {
      return this.each(function () {
        var t = Kn(this).data(Qn);

        if (t || (t = new n(this, "object" == _typeof(e) && e), Kn(this).data(Qn, t)), "string" == typeof e) {
          if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');
          t[e]();
        }
      });
    }, s(n, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }, {
      key: "Default",
      get: function get() {
        return qn;
      }
    }]), n;
  }(), Kn(window).on(Xn.LOAD_DATA_API, function () {
    for (var t = Kn.makeArray(Kn($n.DATA_SPY)), e = t.length; e--;) {
      var n = Kn(t[e]);

      ni._jQueryInterface.call(n, n.data());
    }
  }), Kn.fn[Vn] = ni._jQueryInterface, Kn.fn[Vn].Constructor = ni, Kn.fn[Vn].noConflict = function () {
    return Kn.fn[Vn] = Gn, ni._jQueryInterface;
  }, ni),
      Di = (oi = "." + (ri = "bs.tab"), si = (ii = e).fn.tab, ai = {
    HIDE: "hide" + oi,
    HIDDEN: "hidden" + oi,
    SHOW: "show" + oi,
    SHOWN: "shown" + oi,
    CLICK_DATA_API: "click" + oi + ".data-api"
  }, li = "dropdown-menu", ci = "active", fi = "disabled", hi = "fade", ui = "show", di = ".dropdown", pi = ".nav, .list-group", gi = ".active", mi = "> li > .active", _i = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', vi = ".dropdown-toggle", Ei = "> .dropdown-menu .active", yi = function () {
    function i(t) {
      this._element = t;
    }

    var t = i.prototype;
    return t.show = function () {
      var n = this;

      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && ii(this._element).hasClass(ci) || ii(this._element).hasClass(fi))) {
        var t,
            i,
            e = ii(this._element).closest(pi)[0],
            r = gt.getSelectorFromElement(this._element);

        if (e) {
          var o = "UL" === e.nodeName ? mi : gi;
          i = (i = ii.makeArray(ii(e).find(o)))[i.length - 1];
        }

        var s = ii.Event(ai.HIDE, {
          relatedTarget: this._element
        }),
            a = ii.Event(ai.SHOW, {
          relatedTarget: i
        });

        if (i && ii(i).trigger(s), ii(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {
          r && (t = ii(r)[0]), this._activate(this._element, e);

          var l = function l() {
            var t = ii.Event(ai.HIDDEN, {
              relatedTarget: n._element
            }),
                e = ii.Event(ai.SHOWN, {
              relatedTarget: i
            });
            ii(i).trigger(t), ii(n._element).trigger(e);
          };

          t ? this._activate(t, t.parentNode, l) : l();
        }
      }
    }, t.dispose = function () {
      ii.removeData(this._element, ri), this._element = null;
    }, t._activate = function (t, e, n) {
      var i = this,
          r = ("UL" === e.nodeName ? ii(e).find(mi) : ii(e).children(gi))[0],
          o = n && r && ii(r).hasClass(hi),
          s = function s() {
        return i._transitionComplete(t, r, n);
      };

      if (r && o) {
        var a = gt.getTransitionDurationFromElement(r);
        ii(r).one(gt.TRANSITION_END, s).emulateTransitionEnd(a);
      } else s();
    }, t._transitionComplete = function (t, e, n) {
      if (e) {
        ii(e).removeClass(ui + " " + ci);
        var i = ii(e.parentNode).find(Ei)[0];
        i && ii(i).removeClass(ci), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !1);
      }

      if (ii(t).addClass(ci), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), gt.reflow(t), ii(t).addClass(ui), t.parentNode && ii(t.parentNode).hasClass(li)) {
        var r = ii(t).closest(di)[0];
        r && ii(r).find(vi).addClass(ci), t.setAttribute("aria-expanded", !0);
      }

      n && n();
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var t = ii(this),
            e = t.data(ri);

        if (e || (e = new i(this), t.data(ri, e)), "string" == typeof n) {
          if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');
          e[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function get() {
        return "4.0.0";
      }
    }]), i;
  }(), ii(document).on(ai.CLICK_DATA_API, _i, function (t) {
    t.preventDefault(), yi._jQueryInterface.call(ii(this), "show");
  }), ii.fn.tab = yi._jQueryInterface, ii.fn.tab.Constructor = yi, ii.fn.tab.noConflict = function () {
    return ii.fn.tab = si, yi._jQueryInterface;
  }, yi);

  !function (t) {
    if ("undefined" == typeof t) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
    var e = t.fn.jquery.split(" ")[0].split(".");
    if (e[0] < 2 && e[1] < 9 || 1 === e[0] && 9 === e[1] && e[2] < 1 || 4 <= e[0]) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
  }(e), t.Util = gt, t.Alert = mt, t.Button = _t, t.Carousel = vt, t.Collapse = Et, t.Dropdown = bi, t.Modal = Ti, t.Popover = wi, t.Scrollspy = Ii, t.Tab = Di, t.Tooltip = Ci, Object.defineProperty(t, "__esModule", {
    value: !0
  });
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./assets/js/translations/ar.js":
/*!**************************************!*\
  !*** ./assets/js/translations/ar.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function (t) {
  // ar
  t.add("Add", "\u0623\u0636\u0641", "javascript", "ar");
  t.add("Add a new event date", "\u0623\u0636\u0641 \u062A\u0627\u0631\u064A\u062E \u062D\u062F\u062B \u062C\u062F\u064A\u062F", "javascript", "ar");
  t.add("Add a new ticket", "\u0623\u0636\u0641 \u062A\u0630\u0643\u0631\u0629 \u062C\u062F\u064A\u062F\u0629", "javascript", "ar");
  t.add("An error has occured", "\u0644\u0642\u062F \u062D\u062F\u062B \u062E\u0637\u0623", "javascript", "ar");
  t.add("April", "\u0623\u0628\u0631\u064A\u0644", "javascript", "ar");
  t.add("August", "\u0623\u063A\u0633\u0637\u0633", "javascript", "ar");
  t.add("Cancel", "\u0625\u0644\u063A\u0627\u0621", "javascript", "ar");
  t.add("Close", "\u063A\u0644\u0642", "javascript", "ar");
  t.add("Confirm", "\u0623\u0643\u062F", "javascript", "ar");
  t.add("Confirmation required", "\u0627\u0644\u062A\u0623\u0643\u064A\u062F \u0645\u0637\u0644\u0648\u0628", "javascript", "ar");
  t.add("December", "\u062F\u064A\u0633\u0645\u0628\u0631", "javascript", "ar");
  t.add("Duplicate this event date", "\u062A\u0643\u0631\u0627\u0631 \u0647\u0630\u0627 \u0627\u0644\u062A\u0627\u0631\u064A\u062E", "javascript", "ar");
  t.add("Duplicate this ticket", "\u062A\u0643\u0631\u0627\u0631 \u0647\u0630\u0647 \u0627\u0644\u062A\u0630\u0643\u0631\u0629", "javascript", "ar");
  t.add("Email address", "\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0627\u0644\u0643\u062A\u0631\u0648\u0646\u0649", "javascript", "ar");
  t.add("February", "\u0641\u0628\u0631\u0627\u064A\u0631", "javascript", "ar");
  t.add("Insert at least 3 characters", "\u0623\u062F\u062E\u0644 3 \u0623\u062D\u0631\u0641 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644", "javascript", "ar");
  t.add("January", "\u064A\u0646\u0627\u064A\u0631", "javascript", "ar");
  t.add("July", "\u064A\u0648\u0644\u064A\u0648", "javascript", "ar");
  t.add("June", "\u064A\u0648\u0646\u064A\u0648", "javascript", "ar");
  t.add("Load more", "\u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0645\u0632\u064A\u062F", "javascript", "ar");
  t.add("Loading...", "\u062C\u0627\u0631 \u0627\u0644\u062A\u062D\u0645\u064A\u0644...", "javascript", "ar");
  t.add("Make sure to enter a valid email address", "\u062A\u0623\u0643\u062F \u0645\u0646 \u0625\u062F\u062E\u0627\u0644 \u0639\u0646\u0648\u0627\u0646 \u0628\u0631\u064A\u062F \u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0635\u0627\u0644\u062D", "javascript", "ar");
  t.add("March", "\u0645\u0627\u0631\u0633", "javascript", "ar");
  t.add("May", "\u0645\u0627\u064A\u0648", "javascript", "ar");
  t.add("Message", "\u0627\u0644\u0631\u0633\u0627\u0644\u0629", "javascript", "ar");
  t.add("Move down", "\u062A\u0646\u0642\u064A\u0644 \u0644\u0644\u0623\u0633\u0641\u0644", "javascript", "ar");
  t.add("Move up", "\u062A\u0646\u0642\u064A\u0644 \u0644\u0644\u0623\u0639\u0644\u0649", "javascript", "ar");
  t.add("No results found", "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0646\u062A\u0627\u0626\u062C", "javascript", "ar");
  t.add("Note", "\u0645\u0644\u062D\u0648\u0638\u0629", "javascript", "ar");
  t.add("November", "\u0646\u0648\u0641\u0645\u0628\u0631", "javascript", "ar");
  t.add("October", "October", "javascript", "ar");
  t.add("Please select the tickets quantity for this order", "\u0627\u0644\u0631\u062C\u0627\u0621 \u062A\u062D\u062F\u064A\u062F \u0643\u0645\u064A\u0629 \u0627\u0644\u062A\u0630\u0627\u0643\u0631 \u0644\u0647\u0630\u0627 \u0627\u0644\u0637\u0644\u0628", "javascript", "ar");
  t.add("Please select the tickets quantity you want to buy", "\u0627\u0644\u0631\u062C\u0627\u0621 \u062A\u062D\u062F\u064A\u062F \u0643\u0645\u064A\u0629 \u0627\u0644\u062A\u0630\u0627\u0643\u0631 \u0627\u0644\u062A\u064A \u062A\u0631\u064A\u062F \u0634\u0631\u0627\u0621\u0647\u0627", "javascript", "ar");
  t.add("Read more", "\u0642\u0631\u0627\u0621\u0629 \u0627\u0644\u0645\u0632\u064A\u062F", "javascript", "ar");
  t.add("Remove", "\u062D\u0630\u0641", "javascript", "ar");
  t.add("Remove this event date", "\u062D\u0630\u0641 \u0647\u0630\u0627 \u0627\u0644\u062A\u0627\u0631\u064A\u062E", "javascript", "ar");
  t.add("Remove this ticket", "\u062D\u0630\u0641 \u0647\u0630\u0647 \u0627\u0644\u062A\u0630\u0643\u0631\u0629", "javascript", "ar");
  t.add("Return to cart", "\u0627\u0644\u0639\u0648\u062F\u0629 \u0625\u0644\u0649 \u0639\u0631\u0628\u0629 \u0627\u0644\u062A\u0633\u0648\u0642", "javascript", "ar");
  t.add("Searching ...", "\u0628\u062D\u062B...", "javascript", "ar");
  t.add("Select an option", "\u062D\u062F\u062F \u0627\u062E\u062A\u064A\u0627\u0631", "javascript", "ar");
  t.add("September", "\u0633\u0628\u062A\u0645\u0628\u0631", "javascript", "ar");
  t.add("Stick", "\u0644\u0635\u0642", "javascript", "ar");
  t.add("The email address is not valid", "\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u063A\u064A\u0631 \u0635\u0627\u0644\u062D", "javascript", "ar");
  t.add("The tickets have been released", "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0639\u0646 \u0627\u0644\u062A\u0630\u0627\u0643\u0631 \u0627\u0644\u0645\u062D\u062C\u0648\u0632\u0629", "javascript", "ar");
  t.add("This feature is disabled in demo mode", "\u062A\u0645 \u062A\u0639\u0637\u064A\u0644 \u0647\u0630\u0647 \u0627\u0644\u0645\u064A\u0632\u0629 \u0641\u064A \u0627\u0644\u0648\u0636\u0639 \u0627\u0644\u062A\u062C\u0631\u064A\u0628\u064A", "javascript", "ar");
  t.add("Time's up", "\u0627\u0646\u062A\u0647\u0649 \u0627\u0644\u0648\u0642\u062A", "javascript", "ar");
  t.add("Unstick", "\u0641\u0635\u0644", "javascript", "ar");
  t.add("days", "\u0623\u064A\u0627\u0645", "javascript", "ar");
  t.add("hr", "\u0633\u0627\u0639\u0627\u062A", "javascript", "ar");
  t.add("javascript string translation", "javascript string translation", "javascript", "ar");
  t.add("min", "\u062F\u0642\u064A\u0642\u0629", "javascript", "ar");
  t.add("sec", "\u062B\u0627\u0646\u064A\u0629", "javascript", "ar");
  t.add("weeks", "\u0623\u0633\u0627\u0628\u064A\u0639", "javascript", "ar");
})(Translator);

/***/ }),

/***/ "./assets/js/translations/config.js":
/*!******************************************!*\
  !*** ./assets/js/translations/config.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function (t) {
  t.fallback = 'en';
  t.defaultDomain = 'javascript';
})(Translator);

/***/ }),

/***/ "./assets/js/translations/en.js":
/*!**************************************!*\
  !*** ./assets/js/translations/en.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function (t) {
  // en
  t.add("Add", "Add", "javascript", "en");
  t.add("Add a new event date", "Add a new event date", "javascript", "en");
  t.add("Add a new ticket", "Add a new ticket", "javascript", "en");
  t.add("An error has occured", "An error has occured", "javascript", "en");
  t.add("April", "April", "javascript", "en");
  t.add("August", "August", "javascript", "en");
  t.add("Cancel", "Cancel", "javascript", "en");
  t.add("Close", "Close", "javascript", "en");
  t.add("Confirm", "Confirm", "javascript", "en");
  t.add("Confirmation required", "Confirmation required", "javascript", "en");
  t.add("December", "December", "javascript", "en");
  t.add("Duplicate this event date", "Duplicate this event date", "javascript", "en");
  t.add("Duplicate this ticket", "Duplicate this ticket", "javascript", "en");
  t.add("Email address", "Email address", "javascript", "en");
  t.add("February", "February", "javascript", "en");
  t.add("Insert at least 3 characters", "Insert at least 3 characters", "javascript", "en");
  t.add("January", "January", "javascript", "en");
  t.add("July", "July", "javascript", "en");
  t.add("June", "June", "javascript", "en");
  t.add("Load more", "Load more", "javascript", "en");
  t.add("Loading...", "Loading...", "javascript", "en");
  t.add("Make sure to enter a valid email address", "Make sure to enter a valid email address", "javascript", "en");
  t.add("March", "March", "javascript", "en");
  t.add("May", "May", "javascript", "en");
  t.add("Message", "Message", "javascript", "en");
  t.add("Move down", "Move down", "javascript", "en");
  t.add("Move up", "Move up", "javascript", "en");
  t.add("No results found", "No results found", "javascript", "en");
  t.add("Note", "Note", "javascript", "en");
  t.add("November", "November", "javascript", "en");
  t.add("October", "October", "javascript", "en");
  t.add("Please select the tickets quantity for this order", "Please select the tickets quantity for this order", "javascript", "en");
  t.add("Please select the tickets quantity you want to buy", "Please select the tickets quantity you want to buy", "javascript", "en");
  t.add("Read more", "Read more", "javascript", "en");
  t.add("Remove", "Remove", "javascript", "en");
  t.add("Remove this event date", "Remove this event date", "javascript", "en");
  t.add("Remove this ticket", "Remove this ticket", "javascript", "en");
  t.add("Return to cart", "Return to cart", "javascript", "en");
  t.add("Searching ...", "Searching ...", "javascript", "en");
  t.add("Select an option", "Select an option", "javascript", "en");
  t.add("September", "September", "javascript", "en");
  t.add("Stick", "Stick", "javascript", "en");
  t.add("The email address is not valid", "The email address is not valid", "javascript", "en");
  t.add("The tickets have been released", "The tickets have been released", "javascript", "en");
  t.add("This feature is disabled in demo mode", "This feature is disabled in demo mode", "javascript", "en");
  t.add("Time's up", "Time's up", "javascript", "en");
  t.add("Unstick", "Unstick", "javascript", "en");
  t.add("days", "days", "javascript", "en");
  t.add("hr", "hr", "javascript", "en");
  t.add("javascript string translation", "javascript string translation", "javascript", "en");
  t.add("min", "min", "javascript", "en");
  t.add("sec", "sec", "javascript", "en");
  t.add("weeks", "weeks", "javascript", "en");
})(Translator);

/***/ }),

/***/ "./assets/js/translations/es.js":
/*!**************************************!*\
  !*** ./assets/js/translations/es.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function (t) {
  // es
  t.add("Add", "A\xF1adir", "javascript", "es");
  t.add("Add a new event date", "Agregar una nueva fecha de evento", "javascript", "es");
  t.add("Add a new ticket", "Agregar un boleto nuevo", "javascript", "es");
  t.add("An error has occured", "Se ha producido un error", "javascript", "es");
  t.add("April", "Abril", "javascript", "es");
  t.add("August", "Agosto", "javascript", "es");
  t.add("Cancel", "Cancelar", "javascript", "es");
  t.add("Close", "Cerca", "javascript", "es");
  t.add("Confirm", "Confirmar", "javascript", "es");
  t.add("Confirmation required", "Confirmaci\xF3n requerida", "javascript", "es");
  t.add("December", "Diciembre", "javascript", "es");
  t.add("Duplicate this event date", "Duplica la fecha de este evento", "javascript", "es");
  t.add("Duplicate this ticket", "Duplica este ticket", "javascript", "es");
  t.add("Email address", "Direcci\xF3n de correo electr\xF3nico", "javascript", "es");
  t.add("February", "Febrero", "javascript", "es");
  t.add("Insert at least 3 characters", "Inserta al menos 3 caracteres", "javascript", "es");
  t.add("January", "Enero", "javascript", "es");
  t.add("July", "Julio", "javascript", "es");
  t.add("June", "Junio", "javascript", "es");
  t.add("Load more", "Carga m\xE1s", "javascript", "es");
  t.add("Loading...", "Cargando...", "javascript", "es");
  t.add("Make sure to enter a valid email address", "Aseg\xFArese de ingresar una direcci\xF3n de correo electr\xF3nico v\xE1lida", "javascript", "es");
  t.add("March", "Marzo", "javascript", "es");
  t.add("May", "Mayo", "javascript", "es");
  t.add("Message", "Mensaje", "javascript", "es");
  t.add("Move down", "Mover hacia abajo", "javascript", "es");
  t.add("Move up", "Ascender", "javascript", "es");
  t.add("No results found", "No se han encontrado resultados", "javascript", "es");
  t.add("Note", "Nota", "javascript", "es");
  t.add("November", "Noviembre", "javascript", "es");
  t.add("October", "Octubre", "javascript", "es");
  t.add("Please select the tickets quantity for this order", "Seleccione la cantidad de boletos para este pedido", "javascript", "es");
  t.add("Please select the tickets quantity you want to buy", "Seleccione la cantidad de entradas que desea comprar", "javascript", "es");
  t.add("Read more", "Lee mas", "javascript", "es");
  t.add("Remove", "Eliminar", "javascript", "es");
  t.add("Remove this event date", "Eliminar esta fecha de evento", "javascript", "es");
  t.add("Remove this ticket", "Quitar este ticket", "javascript", "es");
  t.add("Return to cart", "Volver al carrito", "javascript", "es");
  t.add("Searching ...", "Buscando ...", "javascript", "es");
  t.add("Select an option", "Seleccione una opci\xF3n", "javascript", "es");
  t.add("September", "Septiembre", "javascript", "es");
  t.add("Stick", "Palo", "javascript", "es");
  t.add("The email address is not valid", "La direcci\xF3n de correo electr\xF3nico no es v\xE1lida", "javascript", "es");
  t.add("The tickets have been released", "Las entradas han sido liberadas", "javascript", "es");
  t.add("This feature is disabled in demo mode", "Esta funci\xF3n est\xE1 desactivada en el modo de demostraci\xF3n", "javascript", "es");
  t.add("Time's up", "Se acab\xF3 el tiempo", "javascript", "es");
  t.add("Unstick", "Despegar", "javascript", "es");
  t.add("days", "dias", "javascript", "es");
  t.add("hr", "hora", "javascript", "es");
  t.add("min", "min", "javascript", "es");
  t.add("sec", "seg", "javascript", "es");
  t.add("weeks", "sem", "javascript", "es");
})(Translator);

/***/ }),

/***/ "./assets/js/translations/fr.js":
/*!**************************************!*\
  !*** ./assets/js/translations/fr.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function (t) {
  // fr
  t.add("Add", "Ajouter", "javascript", "fr");
  t.add("Add a new event date", "Ajouter une nouvelle date d'\xE9v\xE9nement", "javascript", "fr");
  t.add("Add a new ticket", "Ajouter un nouveau billet", "javascript", "fr");
  t.add("An error has occured", "Une erreur est survenue", "javascript", "fr");
  t.add("April", "Avril", "javascript", "fr");
  t.add("August", "Ao\xFBt", "javascript", "fr");
  t.add("Cancel", "Annuler", "javascript", "fr");
  t.add("Close", "Fermer", "javascript", "fr");
  t.add("Confirm", "Confirmer", "javascript", "fr");
  t.add("Confirmation required", "Confirmation requise", "javascript", "fr");
  t.add("December", "D\xE9cembre", "javascript", "fr");
  t.add("Duplicate this event date", "Dupliquer cette date d'\xE9v\xE9nement", "javascript", "fr");
  t.add("Duplicate this ticket", "Dupliquer ce billet", "javascript", "fr");
  t.add("Email address", "Adresse e-mail", "javascript", "fr");
  t.add("February", "F\xE9vrier", "javascript", "fr");
  t.add("Insert at least 3 characters", "Ins\xE9rez au moins 3 caract\xE8res", "javascript", "fr");
  t.add("January", "Janvier", "javascript", "fr");
  t.add("July", "Juillet", "javascript", "fr");
  t.add("June", "Juin", "javascript", "fr");
  t.add("Load more", "Charger plus", "javascript", "fr");
  t.add("Loading...", "Chargement...", "javascript", "fr");
  t.add("Make sure to enter a valid email address", "Assurez-vous de saisir une adresse e-mail valide", "javascript", "fr");
  t.add("March", "Mars", "javascript", "fr");
  t.add("May", "Mai", "javascript", "fr");
  t.add("Message", "Message", "javascript", "fr");
  t.add("Move down", "D\xE9placer vers le bas", "javascript", "fr");
  t.add("Move up", "D\xE9placer vers le haut", "javascript", "fr");
  t.add("No results found", "Aucun r\xE9sultat trouv\xE9", "javascript", "fr");
  t.add("Note", "Note", "javascript", "fr");
  t.add("November", "Novembre", "javascript", "fr");
  t.add("October", "Octobre", "javascript", "fr");
  t.add("Please select the tickets quantity for this order", "Veuillez s\xE9lectionner la quantit\xE9 de billets pour cette commande", "javascript", "fr");
  t.add("Please select the tickets quantity you want to buy", "Veuillez s\xE9lectionner la quantit\xE9 de billets que vous souhaitez acheter", "javascript", "fr");
  t.add("Read more", "Lire la suite", "javascript", "fr");
  t.add("Remove", "Supprimer", "javascript", "fr");
  t.add("Remove this event date", "Supprimer cette date d'\xE9v\xE9nement", "javascript", "fr");
  t.add("Remove this ticket", "Supprimer ce billet", "javascript", "fr");
  t.add("Return to cart", "Retour au panier", "javascript", "fr");
  t.add("Searching ...", "Recherche ...", "javascript", "fr");
  t.add("Select an option", "S\xE9lectionnez une option", "javascript", "fr");
  t.add("September", "Septembre", "javascript", "fr");
  t.add("Stick", "Pers\xE9v\xE9rer", "javascript", "fr");
  t.add("The email address is not valid", "L'adresse e-mail n'est pas valide", "javascript", "fr");
  t.add("The tickets have been released", "Les billets ont \xE9t\xE9 lib\xE9r\xE9s", "javascript", "fr");
  t.add("This feature is disabled in demo mode", "Cette fonctionnalit\xE9 est d\xE9sactiv\xE9e en mode d\xE9mo", "javascript", "fr");
  t.add("Time's up", "Le temps est \xE9coul\xE9", "javascript", "fr");
  t.add("Unstick", "D\xE9coller", "javascript", "fr");
  t.add("days", "jours", "javascript", "fr");
  t.add("hr", "heures", "javascript", "fr");
  t.add("javascript string translation", "javascript string translation", "javascript", "fr");
  t.add("min", "min", "javascript", "fr");
  t.add("sec", "sec", "javascript", "fr");
  t.add("weeks", "sem", "javascript", "fr");
})(Translator);

/***/ }),

/***/ "./assets/vendor/bootboxjs/bootbox.min.js":
/*!************************************************!*\
  !*** ./assets/vendor/bootboxjs/bootbox.min.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.array.reverse.js */ "./node_modules/core-js/modules/es.array.reverse.js");

__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * bootbox.js 5.4.0
 *
 * http://bootboxjs.com/license.txt
 */
!function (t, e) {
  'use strict';

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function e(p, u) {
  'use strict';

  var r, n, i, l;
  Object.keys || (Object.keys = (r = Object.prototype.hasOwnProperty, n = !{
    toString: null
  }.propertyIsEnumerable('toString'), l = (i = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor']).length, function (t) {
    if ('function' != typeof t && ('object' != _typeof(t) || null === t)) throw new TypeError('Object.keys called on non-object');
    var e,
        o,
        a = [];

    for (e in t) {
      r.call(t, e) && a.push(e);
    }

    if (n) for (o = 0; o < l; o++) {
      r.call(t, i[o]) && a.push(i[o]);
    }
    return a;
  }));
  var d = {};
  d.VERSION = '5.0.0';
  var b = {
    en: {
      OK: 'OK',
      CANCEL: 'Cancel',
      CONFIRM: 'OK'
    }
  },
      f = {
    dialog: "<div class=\"bootbox modal\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-body\"><div class=\"bootbox-body\"></div></div></div></div></div>",
    header: "<div class=\"modal-header\"><h5 class=\"modal-title\"></h5></div>",
    footer: '<div class="modal-footer"></div>',
    closeButton: '<button type="button" class="bootbox-close-button close" aria-hidden="true">&times;</button>',
    form: '<form class="bootbox-form"></form>',
    button: '<button type="button" class="btn"></button>',
    option: '<option></option>',
    promptMessage: '<div class="bootbox-prompt-message"></div>',
    inputs: {
      text: '<input class="bootbox-input bootbox-input-text form-control" autocomplete="off" type="text" />',
      textarea: '<textarea class="bootbox-input bootbox-input-textarea form-control"></textarea>',
      email: '<input class="bootbox-input bootbox-input-email form-control" autocomplete="off" type="email" />',
      select: '<select class="bootbox-input bootbox-input-select form-control"></select>',
      checkbox: '<div class="form-check checkbox"><label class="form-check-label"><input class="form-check-input bootbox-input bootbox-input-checkbox" type="checkbox" /></label></div>',
      radio: '<div class="form-check radio"><label class="form-check-label"><input class="form-check-input bootbox-input bootbox-input-radio" type="radio" name="bootbox-radio" /></label></div>',
      date: '<input class="bootbox-input bootbox-input-date form-control" autocomplete="off" type="date" />',
      time: '<input class="bootbox-input bootbox-input-time form-control" autocomplete="off" type="time" />',
      number: '<input class="bootbox-input bootbox-input-number form-control" autocomplete="off" type="number" />',
      password: '<input class="bootbox-input bootbox-input-password form-control" autocomplete="off" type="password" />',
      range: '<input class="bootbox-input bootbox-input-range form-control-range" autocomplete="off" type="range" />'
    }
  },
      m = {
    locale: 'en',
    backdrop: 'static',
    animate: !0,
    className: null,
    closeButton: !0,
    show: !0,
    container: 'body',
    value: '',
    inputType: 'text',
    swapButtonOrder: !1,
    centerVertical: !1,
    multiple: !1,
    scrollable: !1
  };

  function c(t, e, o) {
    return p.extend(!0, {}, t, function (t, e) {
      var o = t.length,
          a = {};
      if (o < 1 || 2 < o) throw new Error('Invalid argument length');
      return 2 === o || 'string' == typeof t[0] ? (a[e[0]] = t[0], a[e[1]] = t[1]) : a = t[0], a;
    }(e, o));
  }

  function h(t, e, o, a) {
    var r;
    a && a[0] && (r = a[0].locale || m.locale, (a[0].swapButtonOrder || m.swapButtonOrder) && (e = e.reverse()));
    var n,
        i,
        l,
        s = {
      className: 'bootbox-' + t,
      buttons: function (t, e) {
        for (var o = {}, a = 0, r = t.length; a < r; a++) {
          var n = t[a],
              i = n.toLowerCase(),
              l = n.toUpperCase();
          o[i] = {
            label: (s = l, c = e, p = b[c], p ? p[s] : b.en[s])
          };
        }

        var s, c, p;
        return o;
      }(e, r)
    };
    return n = c(s, a, o), l = {}, v(i = e, function (t, e) {
      l[e] = !0;
    }), v(n.buttons, function (t) {
      if (l[t] === u) throw new Error('button key "' + t + '" is not allowed (options are ' + i.join(' ') + ')');
    }), n;
  }

  function w(t) {
    return Object.keys(t).length;
  }

  function v(t, o) {
    var a = 0;
    p.each(t, function (t, e) {
      o(t, e, a++);
    });
  }

  function g(t) {
    t.data.dialog.find('.bootbox-accept').first().trigger('focus');
  }

  function y(t) {
    t.target === t.data.dialog[0] && t.data.dialog.remove();
  }

  function x(t) {
    t.target === t.data.dialog[0] && (t.data.dialog.off('escape.close.bb'), t.data.dialog.off('click'));
  }

  function k(t, e, o) {
    t.stopPropagation(), t.preventDefault(), p.isFunction(o) && !1 === o.call(e, t) || e.modal('hide');
  }

  function E(t) {
    return /([01][0-9]|2[0-3]):[0-5][0-9]?:[0-5][0-9]/.test(t);
  }

  function O(t) {
    return /(\d{4})-(\d{2})-(\d{2})/.test(t);
  }

  return d.locales = function (t) {
    return t ? b[t] : b;
  }, d.addLocale = function (t, o) {
    return p.each(['OK', 'CANCEL', 'CONFIRM'], function (t, e) {
      if (!o[e]) throw new Error('Please supply a translation for "' + e + '"');
    }), b[t] = {
      OK: o.OK,
      CANCEL: o.CANCEL,
      CONFIRM: o.CONFIRM
    }, d;
  }, d.removeLocale = function (t) {
    if ('en' === t) throw new Error('"en" is used as the default and fallback locale and cannot be removed.');
    return delete b[t], d;
  }, d.setLocale = function (t) {
    return d.setDefaults('locale', t);
  }, d.setDefaults = function () {
    var t = {};
    return 2 === arguments.length ? t[arguments[0]] = arguments[1] : t = arguments[0], p.extend(m, t), d;
  }, d.hideAll = function () {
    return p('.bootbox').modal('hide'), d;
  }, d.init = function (t) {
    return e(t || p);
  }, d.dialog = function (t) {
    if (p.fn.modal === u) throw new Error("\"$.fn.modal\" is not defined; please double check you have included the Bootstrap JavaScript library. See https://getbootstrap.com/docs/4.4/getting-started/javascript/ for more details.");

    if (t = function (r) {
      var n, i;
      if ('object' != _typeof(r)) throw new Error('Please supply an object of options');
      if (!r.message) throw new Error('"message" option must not be null or an empty string.');
      (r = p.extend({}, m, r)).buttons || (r.buttons = {});
      return n = r.buttons, i = w(n), v(n, function (t, e, o) {
        if (p.isFunction(e) && (e = n[t] = {
          callback: e
        }), 'object' !== p.type(e)) throw new Error('button with key "' + t + '" must be an object');

        if (e.label || (e.label = t), !e.className) {
          var a = !1;
          a = r.swapButtonOrder ? 0 === o : o === i - 1, e.className = i <= 2 && a ? 'btn-primary' : 'btn-secondary btn-default';
        }
      }), r;
    }(t), p.fn.modal.Constructor.VERSION) {
      t.fullBootstrapVersion = p.fn.modal.Constructor.VERSION;
      var e = t.fullBootstrapVersion.indexOf('.');
      t.bootstrap = t.fullBootstrapVersion.substring(0, e);
    } else t.bootstrap = '2', t.fullBootstrapVersion = '2.3.2', console.warn('Bootbox will *mostly* work with Bootstrap 2, but we do not officially support it. Please upgrade, if possible.');

    var o = p(f.dialog),
        a = o.find('.modal-dialog'),
        r = o.find('.modal-body'),
        n = p(f.header),
        i = p(f.footer),
        l = t.buttons,
        s = {
      onEscape: t.onEscape
    };
    if (r.find('.bootbox-body').html(t.message), 0 < w(t.buttons) && (v(l, function (t, e) {
      var o = p(f.button);

      switch (o.data('bb-handler', t), o.addClass(e.className), t) {
        case 'ok':
        case 'confirm':
          o.addClass('bootbox-accept');
          break;

        case 'cancel':
          o.addClass('bootbox-cancel');
      }

      o.html(e.label), i.append(o), s[t] = e.callback;
    }), r.after(i)), !0 === t.animate && o.addClass('fade'), t.className && o.addClass(t.className), t.size) switch (t.fullBootstrapVersion.substring(0, 3) < '3.1' && console.warn('"size" requires Bootstrap 3.1.0 or higher. You appear to be using ' + t.fullBootstrapVersion + '. Please upgrade to use this option.'), t.size) {
      case 'small':
      case 'sm':
        a.addClass('modal-sm');
        break;

      case 'large':
      case 'lg':
        a.addClass('modal-lg');
        break;

      case 'extra-large':
      case 'xl':
        a.addClass('modal-xl'), t.fullBootstrapVersion.substring(0, 3) < '4.2' && console.warn('Using size "xl"/"extra-large" requires Bootstrap 4.2.0 or higher. You appear to be using ' + t.fullBootstrapVersion + '. Please upgrade to use this option.');
    }

    if (t.scrollable && (a.addClass('modal-dialog-scrollable'), t.fullBootstrapVersion.substring(0, 3) < '4.3' && console.warn('Using "scrollable" requires Bootstrap 4.3.0 or higher. You appear to be using ' + t.fullBootstrapVersion + '. Please upgrade to use this option.')), t.title && (r.before(n), o.find('.modal-title').html(t.title)), t.closeButton) {
      var c = p(f.closeButton);
      t.title ? 3 < t.bootstrap ? o.find('.modal-header').append(c) : o.find('.modal-header').prepend(c) : c.prependTo(r);
    }

    if (t.centerVertical && (a.addClass('modal-dialog-centered'), t.fullBootstrapVersion < '4.0.0' && console.warn('"centerVertical" requires Bootstrap 4.0.0-beta.3 or higher. You appear to be using ' + t.fullBootstrapVersion + '. Please upgrade to use this option.')), o.one('hide.bs.modal', {
      dialog: o
    }, x), t.onHide) {
      if (!p.isFunction(t.onHide)) throw new Error('Argument supplied to "onHide" must be a function');
      o.on('hide.bs.modal', t.onHide);
    }

    if (o.one('hidden.bs.modal', {
      dialog: o
    }, y), t.onHidden) {
      if (!p.isFunction(t.onHidden)) throw new Error('Argument supplied to "onHidden" must be a function');
      o.on('hidden.bs.modal', t.onHidden);
    }

    if (t.onShow) {
      if (!p.isFunction(t.onShow)) throw new Error('Argument supplied to "onShow" must be a function');
      o.on('show.bs.modal', t.onShow);
    }

    if (o.one('shown.bs.modal', {
      dialog: o
    }, g), t.onShown) {
      if (!p.isFunction(t.onShown)) throw new Error('Argument supplied to "onShown" must be a function');
      o.on('shown.bs.modal', t.onShown);
    }

    return 'static' !== t.backdrop && o.on('click.dismiss.bs.modal', function (t) {
      o.children('.modal-backdrop').length && (t.currentTarget = o.children('.modal-backdrop').get(0)), t.target === t.currentTarget && o.trigger('escape.close.bb');
    }), o.on('escape.close.bb', function (t) {
      s.onEscape && k(t, o, s.onEscape);
    }), o.on('click', '.modal-footer button:not(.disabled)', function (t) {
      var e = p(this).data('bb-handler');
      e !== u && k(t, o, s[e]);
    }), o.on('click', '.bootbox-close-button', function (t) {
      k(t, o, s.onEscape);
    }), o.on('keyup', function (t) {
      27 === t.which && o.trigger('escape.close.bb');
    }), p(t.container).append(o), o.modal({
      backdrop: !!t.backdrop && 'static',
      keyboard: !1,
      show: !1
    }), t.show && o.modal('show'), o;
  }, d.alert = function () {
    var t;
    if ((t = h('alert', ['ok'], ['message', 'callback'], arguments)).callback && !p.isFunction(t.callback)) throw new Error('alert requires the "callback" property to be a function when provided');
    return t.buttons.ok.callback = t.onEscape = function () {
      return !p.isFunction(t.callback) || t.callback.call(this);
    }, d.dialog(t);
  }, d.confirm = function () {
    var t;
    if (t = h('confirm', ['cancel', 'confirm'], ['message', 'callback'], arguments), !p.isFunction(t.callback)) throw new Error('confirm requires a callback');
    return t.buttons.cancel.callback = t.onEscape = function () {
      return t.callback.call(this, !1);
    }, t.buttons.confirm.callback = function () {
      return t.callback.call(this, !0);
    }, d.dialog(t);
  }, d.prompt = function () {
    var r, e, t, n, o, a;
    if (t = p(f.form), (r = h('prompt', ['cancel', 'confirm'], ['title', 'callback'], arguments)).value || (r.value = m.value), r.inputType || (r.inputType = m.inputType), o = r.show === u ? m.show : r.show, r.show = !1, r.buttons.cancel.callback = r.onEscape = function () {
      return r.callback.call(this, null);
    }, r.buttons.confirm.callback = function () {
      var t;
      if ('checkbox' === r.inputType) t = n.find('input:checked').map(function () {
        return p(this).val();
      }).get();else if ('radio' === r.inputType) t = n.find('input:checked').val();else {
        if (n[0].checkValidity && !n[0].checkValidity()) return !1;
        t = 'select' === r.inputType && !0 === r.multiple ? n.find('option:selected').map(function () {
          return p(this).val();
        }).get() : n.val();
      }
      return r.callback.call(this, t);
    }, !r.title) throw new Error('prompt requires a title');
    if (!p.isFunction(r.callback)) throw new Error('prompt requires a callback');
    if (!f.inputs[r.inputType]) throw new Error('Invalid prompt type');

    switch (n = p(f.inputs[r.inputType]), r.inputType) {
      case 'text':
      case 'textarea':
      case 'email':
      case 'password':
        n.val(r.value), r.placeholder && n.attr('placeholder', r.placeholder), r.pattern && n.attr('pattern', r.pattern), r.maxlength && n.attr('maxlength', r.maxlength), r.required && n.prop({
          required: !0
        }), r.rows && !isNaN(parseInt(r.rows)) && 'textarea' === r.inputType && n.attr({
          rows: r.rows
        });
        break;

      case 'date':
      case 'time':
      case 'number':
      case 'range':
        if (n.val(r.value), r.placeholder && n.attr('placeholder', r.placeholder), r.pattern && n.attr('pattern', r.pattern), r.required && n.prop({
          required: !0
        }), 'date' !== r.inputType && r.step) {
          if (!('any' === r.step || !isNaN(r.step) && 0 < parseFloat(r.step))) throw new Error('"step" must be a valid positive number or the value "any". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step for more information.');
          n.attr('step', r.step);
        }

        !function (t, e, o) {
          var a = !1,
              r = !0,
              n = !0;
          if ('date' === t) e === u || (r = O(e)) ? o === u || (n = O(o)) || console.warn('Browsers which natively support the "date" input type expect date values to be of the form "YYYY-MM-DD" (see ISO-8601 https://www.iso.org/iso-8601-date-and-time-format.html). Bootbox does not enforce this rule, but your max value may not be enforced by this browser.') : console.warn('Browsers which natively support the "date" input type expect date values to be of the form "YYYY-MM-DD" (see ISO-8601 https://www.iso.org/iso-8601-date-and-time-format.html). Bootbox does not enforce this rule, but your min value may not be enforced by this browser.');else if ('time' === t) {
            if (e !== u && !(r = E(e))) throw new Error('"min" is not a valid time. See https://www.w3.org/TR/2012/WD-html-markup-20120315/datatypes.html#form.data.time for more information.');
            if (o !== u && !(n = E(o))) throw new Error('"max" is not a valid time. See https://www.w3.org/TR/2012/WD-html-markup-20120315/datatypes.html#form.data.time for more information.');
          } else {
            if (e !== u && isNaN(e)) throw r = !1, new Error('"min" must be a valid number. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min for more information.');
            if (o !== u && isNaN(o)) throw n = !1, new Error('"max" must be a valid number. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max for more information.');
          }

          if (r && n) {
            if (o <= e) throw new Error('"max" must be greater than "min". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max for more information.');
            a = !0;
          }

          return a;
        }(r.inputType, r.min, r.max) || (r.min !== u && n.attr('min', r.min), r.max !== u && n.attr('max', r.max));
        break;

      case 'select':
        var i = {};
        if (a = r.inputOptions || [], !p.isArray(a)) throw new Error('Please pass an array of input options');
        if (!a.length) throw new Error('prompt with "inputType" set to "select" requires at least one option');
        r.placeholder && n.attr('placeholder', r.placeholder), r.required && n.prop({
          required: !0
        }), r.multiple && n.prop({
          multiple: !0
        }), v(a, function (t, e) {
          var o = n;
          if (e.value === u || e.text === u) throw new Error('each option needs a "value" property and a "text" property');
          e.group && (i[e.group] || (i[e.group] = p('<optgroup />').attr('label', e.group)), o = i[e.group]);
          var a = p(f.option);
          a.attr('value', e.value).text(e.text), o.append(a);
        }), v(i, function (t, e) {
          n.append(e);
        }), n.val(r.value);
        break;

      case 'checkbox':
        var l = p.isArray(r.value) ? r.value : [r.value];
        if (!(a = r.inputOptions || []).length) throw new Error('prompt with "inputType" set to "checkbox" requires at least one option');
        n = p('<div class="bootbox-checkbox-list"></div>'), v(a, function (t, o) {
          if (o.value === u || o.text === u) throw new Error('each option needs a "value" property and a "text" property');
          var a = p(f.inputs[r.inputType]);
          a.find('input').attr('value', o.value), a.find('label').append('\n' + o.text), v(l, function (t, e) {
            e === o.value && a.find('input').prop('checked', !0);
          }), n.append(a);
        });
        break;

      case 'radio':
        if (r.value !== u && p.isArray(r.value)) throw new Error('prompt with "inputType" set to "radio" requires a single, non-array value for "value"');
        if (!(a = r.inputOptions || []).length) throw new Error('prompt with "inputType" set to "radio" requires at least one option');
        n = p('<div class="bootbox-radiobutton-list"></div>');
        var s = !0;
        v(a, function (t, e) {
          if (e.value === u || e.text === u) throw new Error('each option needs a "value" property and a "text" property');
          var o = p(f.inputs[r.inputType]);
          o.find('input').attr('value', e.value), o.find('label').append('\n' + e.text), r.value !== u && e.value === r.value && (o.find('input').prop('checked', !0), s = !1), n.append(o);
        }), s && n.find('input[type="radio"]').first().prop('checked', !0);
    }

    if (t.append(n), t.on('submit', function (t) {
      t.preventDefault(), t.stopPropagation(), e.find('.bootbox-accept').trigger('click');
    }), '' !== p.trim(r.message)) {
      var c = p(f.promptMessage).html(r.message);
      t.prepend(c), r.message = t;
    } else r.message = t;

    return (e = d.dialog(r)).off('shown.bs.modal', g), e.on('shown.bs.modal', function () {
      n.focus();
    }), !0 === o && e.modal('show'), e;
  }, d;
});

/***/ }),

/***/ "./assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css":
/*!******************************************************************************!*\
  !*** ./assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js":
/*!*****************************************************************************!*\
  !*** ./assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*
 *  Bootstrap TouchSpin - v4.2.5
 *  A mobile and touch friendly input spinner component for Bootstrap 3 & 4.
 *  http://www.virtuosoft.eu/code/bootstrap-touchspin/
 *
 *  Made by István Ujj-Mészáros
 *  Under Apache License v2.0 License
 */
!function (o) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (o),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(function (j) {
  "use strict";

  var D = 0;

  j.fn.TouchSpin = function (y) {
    var k = {
      min: 0,
      max: 100,
      initval: "",
      replacementval: "",
      step: 1,
      decimals: 0,
      stepinterval: 100,
      forcestepdivisibility: "round",
      stepintervaldelay: 500,
      verticalbuttons: !1,
      verticalup: "+",
      verticaldown: "-",
      verticalupclass: "",
      verticaldownclass: "",
      prefix: "",
      postfix: "",
      prefix_extraclass: "",
      postfix_extraclass: "",
      booster: !0,
      boostat: 10,
      maxboostedstep: !1,
      mousewheel: !0,
      buttondown_class: "btn btn-primary",
      buttonup_class: "btn btn-primary",
      buttondown_txt: "-",
      buttonup_txt: "+",
      callback_before_calculation: function callback_before_calculation(t) {
        return t;
      },
      callback_after_calculation: function callback_after_calculation(t) {
        return t;
      }
    },
        C = {
      min: "min",
      max: "max",
      initval: "init-val",
      replacementval: "replacement-val",
      step: "step",
      decimals: "decimals",
      stepinterval: "step-interval",
      verticalbuttons: "vertical-buttons",
      verticalupclass: "vertical-up-class",
      verticaldownclass: "vertical-down-class",
      forcestepdivisibility: "force-step-divisibility",
      stepintervaldelay: "step-interval-delay",
      prefix: "prefix",
      postfix: "postfix",
      prefix_extraclass: "prefix-extra-class",
      postfix_extraclass: "postfix-extra-class",
      booster: "booster",
      boostat: "boostat",
      maxboostedstep: "max-boosted-step",
      mousewheel: "mouse-wheel",
      buttondown_class: "button-down-class",
      buttonup_class: "button-up-class",
      buttondown_txt: "button-down-txt",
      buttonup_txt: "button-up-txt"
    };
    return this.each(function () {
      var i,
          p,
          a,
          u,
          o,
          s,
          t,
          n,
          e,
          r,
          c = j(this),
          l = c.data(),
          d = 0,
          f = !1;

      function b() {
        "" === i.prefix && (p = o.prefix.detach()), "" === i.postfix && (a = o.postfix.detach());
      }

      function h() {
        var t, n, o;
        "" !== (t = i.callback_before_calculation(c.val())) ? 0 < i.decimals && "." === t || (n = parseFloat(t), isNaN(n) && (n = "" !== i.replacementval ? i.replacementval : 0), (o = n).toString() !== t && (o = n), null !== i.min && n < i.min && (o = i.min), null !== i.max && n > i.max && (o = i.max), o = function (t) {
          switch (i.forcestepdivisibility) {
            case "round":
              return (Math.round(t / i.step) * i.step).toFixed(i.decimals);

            case "floor":
              return (Math.floor(t / i.step) * i.step).toFixed(i.decimals);

            case "ceil":
              return (Math.ceil(t / i.step) * i.step).toFixed(i.decimals);

            default:
              return t;
          }
        }(o), Number(t).toString() !== o.toString() && (c.val(o), c.trigger("change"))) : "" !== i.replacementval && (c.val(i.replacementval), c.trigger("change"));
      }

      function v() {
        if (i.booster) {
          var t = Math.pow(2, Math.floor(d / i.boostat)) * i.step;
          return i.maxboostedstep && t > i.maxboostedstep && (t = i.maxboostedstep, s = Math.round(s / t) * t), Math.max(i.step, t);
        }

        return i.step;
      }

      function x() {
        h(), s = parseFloat(i.callback_before_calculation(o.input.val())), isNaN(s) && (s = 0);
        var t = s,
            n = v();
        s += n, null !== i.max && s > i.max && (s = i.max, c.trigger("touchspin.on.max"), _()), o.input.val(i.callback_after_calculation(Number(s).toFixed(i.decimals))), t !== s && c.trigger("change");
      }

      function g() {
        h(), s = parseFloat(i.callback_before_calculation(o.input.val())), isNaN(s) && (s = 0);
        var t = s,
            n = v();
        s -= n, null !== i.min && s < i.min && (s = i.min, c.trigger("touchspin.on.min"), _()), o.input.val(i.callback_after_calculation(Number(s).toFixed(i.decimals))), t !== s && c.trigger("change");
      }

      function m() {
        _(), d = 0, f = "down", c.trigger("touchspin.on.startspin"), c.trigger("touchspin.on.startdownspin"), e = setTimeout(function () {
          t = setInterval(function () {
            d++, g();
          }, i.stepinterval);
        }, i.stepintervaldelay);
      }

      function w() {
        _(), d = 0, f = "up", c.trigger("touchspin.on.startspin"), c.trigger("touchspin.on.startupspin"), r = setTimeout(function () {
          n = setInterval(function () {
            d++, x();
          }, i.stepinterval);
        }, i.stepintervaldelay);
      }

      function _() {
        switch (clearTimeout(e), clearTimeout(r), clearInterval(t), clearInterval(n), f) {
          case "up":
            c.trigger("touchspin.on.stopupspin"), c.trigger("touchspin.on.stopspin");
            break;

          case "down":
            c.trigger("touchspin.on.stopdownspin"), c.trigger("touchspin.on.stopspin");
        }

        d = 0, f = !1;
      }

      !function () {
        if (c.data("alreadyinitialized")) return;
        if (c.data("alreadyinitialized", !0), D += 1, c.data("spinnerid", D), !c.is("input")) return console.log("Must be an input.");
        i = j.extend({}, k, l, (s = {}, j.each(C, function (t, n) {
          var o = "bts-" + n;
          c.is("[data-" + o + "]") && (s[t] = c.data(o));
        }), s), y), "" !== i.initval && "" === c.val() && c.val(i.initval), h(), function () {
          var t = c.val(),
              n = c.parent();
          "" !== t && (t = i.callback_after_calculation(Number(t).toFixed(i.decimals)));
          c.data("initvalue", t).val(t), c.addClass("form-control"), n.hasClass("input-group") ? function (t) {
            t.addClass("bootstrap-touchspin");
            var n,
                o,
                s = c.prev(),
                p = c.next(),
                a = '<span class="input-group-addon input-group-prepend bootstrap-touchspin-prefix input-group-prepend bootstrap-touchspin-injected"><span class="input-group-text">' + i.prefix + "</span></span>",
                e = '<span class="input-group-addon input-group-append bootstrap-touchspin-postfix input-group-append bootstrap-touchspin-injected"><span class="input-group-text">' + i.postfix + "</span></span>";
            s.hasClass("input-group-btn") || s.hasClass("input-group-prepend") ? (n = '<button class="' + i.buttondown_class + ' bootstrap-touchspin-down bootstrap-touchspin-injected" type="button">' + i.buttondown_txt + "</button>", s.append(n)) : (n = '<span class="input-group-btn input-group-prepend bootstrap-touchspin-injected"><button class="' + i.buttondown_class + ' bootstrap-touchspin-down" type="button">' + i.buttondown_txt + "</button></span>", j(n).insertBefore(c));
            p.hasClass("input-group-btn") || p.hasClass("input-group-append") ? (o = '<button class="' + i.buttonup_class + ' bootstrap-touchspin-up bootstrap-touchspin-injected" type="button">' + i.buttonup_txt + "</button>", p.prepend(o)) : (o = '<span class="input-group-btn input-group-append bootstrap-touchspin-injected"><button class="' + i.buttonup_class + ' bootstrap-touchspin-up" type="button">' + i.buttonup_txt + "</button></span>", j(o).insertAfter(c));
            j(a).insertBefore(c), j(e).insertAfter(c), u = t;
          }(n) : function () {
            var t,
                n = "";
            c.hasClass("input-sm") && (n = "input-group-sm");
            c.hasClass("input-lg") && (n = "input-group-lg");
            t = i.verticalbuttons ? '<div class="input-group ' + n + ' bootstrap-touchspin bootstrap-touchspin-injected"><span class="input-group-addon input-group-prepend bootstrap-touchspin-prefix"><span class="input-group-text">' + i.prefix + '</span></span><span class="input-group-addon bootstrap-touchspin-postfix input-group-append"><span class="input-group-text">' + i.postfix + '</span></span><span class="input-group-btn-vertical"><button class="' + i.buttondown_class + " bootstrap-touchspin-up " + i.verticalupclass + '" type="button">' + i.verticalup + '</button><button class="' + i.buttonup_class + " bootstrap-touchspin-down " + i.verticaldownclass + '" type="button">' + i.verticaldown + "</button></span></div>" : '<div class="input-group bootstrap-touchspin bootstrap-touchspin-injected"><span class="input-group-btn input-group-prepend"><button class="' + i.buttondown_class + ' bootstrap-touchspin-down" type="button">' + i.buttondown_txt + '</button></span><span class="input-group-addon bootstrap-touchspin-prefix input-group-prepend"><span class="input-group-text">' + i.prefix + '</span></span><span class="input-group-addon bootstrap-touchspin-postfix input-group-append"><span class="input-group-text">' + i.postfix + '</span></span><span class="input-group-btn input-group-append"><button class="' + i.buttonup_class + ' bootstrap-touchspin-up" type="button">' + i.buttonup_txt + "</button></span></div>";
            u = j(t).insertBefore(c), j(".bootstrap-touchspin-prefix", u).after(c), c.hasClass("input-sm") ? u.addClass("input-group-sm") : c.hasClass("input-lg") && u.addClass("input-group-lg");
          }();
        }(), o = {
          down: j(".bootstrap-touchspin-down", u),
          up: j(".bootstrap-touchspin-up", u),
          input: j("input", u),
          prefix: j(".bootstrap-touchspin-prefix", u).addClass(i.prefix_extraclass),
          postfix: j(".bootstrap-touchspin-postfix", u).addClass(i.postfix_extraclass)
        }, b(), c.on("keydown.touchspin", function (t) {
          var n = t.keyCode || t.which;
          38 === n ? ("up" !== f && (x(), w()), t.preventDefault()) : 40 === n && ("down" !== f && (g(), m()), t.preventDefault());
        }), c.on("keyup.touchspin", function (t) {
          var n = t.keyCode || t.which;
          38 === n ? _() : 40 === n && _();
        }), c.on("blur.touchspin", function () {
          h(), c.val(i.callback_after_calculation(c.val()));
        }), o.down.on("keydown", function (t) {
          var n = t.keyCode || t.which;
          32 !== n && 13 !== n || ("down" !== f && (g(), m()), t.preventDefault());
        }), o.down.on("keyup.touchspin", function (t) {
          var n = t.keyCode || t.which;
          32 !== n && 13 !== n || _();
        }), o.up.on("keydown.touchspin", function (t) {
          var n = t.keyCode || t.which;
          32 !== n && 13 !== n || ("up" !== f && (x(), w()), t.preventDefault());
        }), o.up.on("keyup.touchspin", function (t) {
          var n = t.keyCode || t.which;
          32 !== n && 13 !== n || _();
        }), o.down.on("mousedown.touchspin", function (t) {
          o.down.off("touchstart.touchspin"), c.is(":disabled") || (g(), m(), t.preventDefault(), t.stopPropagation());
        }), o.down.on("touchstart.touchspin", function (t) {
          o.down.off("mousedown.touchspin"), c.is(":disabled") || (g(), m(), t.preventDefault(), t.stopPropagation());
        }), o.up.on("mousedown.touchspin", function (t) {
          o.up.off("touchstart.touchspin"), c.is(":disabled") || (x(), w(), t.preventDefault(), t.stopPropagation());
        }), o.up.on("touchstart.touchspin", function (t) {
          o.up.off("mousedown.touchspin"), c.is(":disabled") || (x(), w(), t.preventDefault(), t.stopPropagation());
        }), o.up.on("mouseup.touchspin mouseout.touchspin touchleave.touchspin touchend.touchspin touchcancel.touchspin", function (t) {
          f && (t.stopPropagation(), _());
        }), o.down.on("mouseup.touchspin mouseout.touchspin touchleave.touchspin touchend.touchspin touchcancel.touchspin", function (t) {
          f && (t.stopPropagation(), _());
        }), o.down.on("mousemove.touchspin touchmove.touchspin", function (t) {
          f && (t.stopPropagation(), t.preventDefault());
        }), o.up.on("mousemove.touchspin touchmove.touchspin", function (t) {
          f && (t.stopPropagation(), t.preventDefault());
        }), c.on("mousewheel.touchspin DOMMouseScroll.touchspin", function (t) {
          if (i.mousewheel && c.is(":focus")) {
            var n = t.originalEvent.wheelDelta || -t.originalEvent.deltaY || -t.originalEvent.detail;
            t.stopPropagation(), t.preventDefault(), n < 0 ? g() : x();
          }
        }), c.on("touchspin.destroy", function () {
          var t;
          t = c.parent(), _(), c.off(".touchspin"), t.hasClass("bootstrap-touchspin-injected") ? (c.siblings().remove(), c.unwrap()) : (j(".bootstrap-touchspin-injected", t).remove(), t.removeClass("bootstrap-touchspin")), c.data("alreadyinitialized", !1);
        }), c.on("touchspin.uponce", function () {
          _(), x();
        }), c.on("touchspin.downonce", function () {
          _(), g();
        }), c.on("touchspin.startupspin", function () {
          w();
        }), c.on("touchspin.startdownspin", function () {
          m();
        }), c.on("touchspin.stopspin", function () {
          _();
        }), c.on("touchspin.updatesettings", function (t, n) {
          !function (t) {
            (function (t) {
              if (i = j.extend({}, i, t), t.postfix) {
                var n = c.parent().find(".bootstrap-touchspin-postfix");
                0 === n.length && a.insertAfter(c), c.parent().find(".bootstrap-touchspin-postfix .input-group-text").text(t.postfix);
              }

              if (t.prefix) {
                var o = c.parent().find(".bootstrap-touchspin-prefix");
                0 === o.length && p.insertBefore(c), c.parent().find(".bootstrap-touchspin-prefix .input-group-text").text(t.prefix);
              }

              b();
            })(t), h();
            var n = o.input.val();
            "" !== n && (n = Number(i.callback_before_calculation(o.input.val())), o.input.val(i.callback_after_calculation(Number(n).toFixed(i.decimals))));
          }(n);
        });
        var s;
      }();
    });
  };
});

/***/ }),

/***/ "./assets/vendor/caleandar.js/caleandar.js":
/*!*************************************************!*\
  !*** ./assets/vendor/caleandar.js/caleandar.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return caleandar; });
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }












/*
 Author: Jack Ducasse;
 Version: 0.1.0;
 (◠‿◠✿)
 */
var Calendar = function Calendar(model, options, date) {
  // Default Values
  this.Options = {
    Color: '',
    LinkColor: '',
    NavShow: true,
    NavVertical: false,
    NavLocation: '',
    DateTimeShow: true,
    DateTimeFormat: 'mmm, yyyy',
    DatetimeLocation: '',
    EventClick: '',
    EventTargetWholeDay: false,
    DisabledDays: [],
    ModelChange: model
  }; // Overwriting default values

  for (var key in options) {
    this.Options[key] = typeof options[key] == 'string' ? options[key].toLowerCase() : options[key];
  }

  model ? this.Model = model : this.Model = {};
  this.Today = new Date();
  this.Selected = this.Today;
  this.Today.Month = this.Today.getMonth();
  this.Today.Year = this.Today.getFullYear();

  if (date) {
    this.Selected = date;
  }

  this.Selected.Month = this.Selected.getMonth();
  this.Selected.Year = this.Selected.getFullYear();
  this.Selected.Days = new Date(this.Selected.Year, this.Selected.Month + 1, 0).getDate();
  this.Selected.FirstDay = new Date(this.Selected.Year, this.Selected.Month, 1).getDay();
  this.Selected.LastDay = new Date(this.Selected.Year, this.Selected.Month + 1, 0).getDay();
  this.Prev = new Date(this.Selected.Year, this.Selected.Month - 1, 1);

  if (this.Selected.Month == 0) {
    this.Prev = new Date(this.Selected.Year - 1, 11, 1);
  }

  this.Prev.Days = new Date(this.Prev.getFullYear(), this.Prev.getMonth() + 1, 0).getDate();
};

function createCalendar(calendar, element, adjuster) {
  if (typeof adjuster !== 'undefined') {
    var newDate = new Date(calendar.Selected.Year, calendar.Selected.Month + adjuster, 1);
    calendar = new Calendar(calendar.Model, calendar.Options, newDate);
    element.innerHTML = '';
  } else {
    for (var key in calendar.Options) {
      typeof calendar.Options[key] != 'function' && _typeof(calendar.Options[key]) != 'object' && calendar.Options[key] ? element.className += " " + key + "-" + calendar.Options[key] : 0;
    }
  }

  var months = [Translator.trans("January", {}, 'javascript'), Translator.trans("February", {}, 'javascript'), Translator.trans("March", {}, 'javascript'), Translator.trans("April", {}, 'javascript'), Translator.trans("May", {}, 'javascript'), Translator.trans("June", {}, 'javascript'), Translator.trans("July", {}, 'javascript'), Translator.trans("August", {}, 'javascript'), Translator.trans("September", {}, 'javascript'), Translator.trans("October", {}, 'javascript'), Translator.trans("November", {}, 'javascript'), Translator.trans("December", {}, 'javascript')];

  function AddSidebar() {
    var sidebar = document.createElement('div');
    sidebar.className += 'cld-sidebar';
    var monthList = document.createElement('ul');
    monthList.className += 'cld-monthList';

    for (var i = 0; i < months.length - 3; i++) {
      var x = document.createElement('li');
      x.className += 'cld-month';
      var n = i - (4 - calendar.Selected.Month); // Account for overflowing month values

      if (n < 0) {
        n += 12;
      } else if (n > 11) {
        n -= 12;
      } // Add Appropriate Class


      if (i == 0) {
        x.className += ' cld-rwd cld-nav';
        x.addEventListener('click', function () {
          typeof calendar.Options.ModelChange == 'function' ? calendar.Model = calendar.Options.ModelChange() : calendar.Model = calendar.Options.ModelChange;
          createCalendar(calendar, element, -1);
        });
        x.innerHTML += '<svg height="15" width="15" viewBox="0 0 100 75" fill="rgba(255,255,255,0.5)"><polyline points="0,75 100,75 50,0"></polyline></svg>';
      } else if (i == months.length - 4) {
        x.className += ' cld-fwd cld-nav';
        x.addEventListener('click', function () {
          typeof calendar.Options.ModelChange == 'function' ? calendar.Model = calendar.Options.ModelChange() : calendar.Model = calendar.Options.ModelChange;
          createCalendar(calendar, element, 1);
        });
        x.innerHTML += '<svg height="15" width="15" viewBox="0 0 100 75" fill="rgba(255,255,255,0.5)"><polyline points="0,0 100,0 50,75"></polyline></svg>';
      } else {
        if (i < 4) {
          x.className += ' cld-pre';
        } else if (i > 4) {
          x.className += ' cld-post';
        } else {
          x.className += ' cld-curr';
        } //prevent losing var adj value (for whatever reason that is happening)


        (function () {
          var adj = i - 4; //x.addEventListener('click', function(){createCalendar(calendar, element, adj);console.log('kk', adj);} );

          x.addEventListener('click', function () {
            typeof calendar.Options.ModelChange == 'function' ? calendar.Model = calendar.Options.ModelChange() : calendar.Model = calendar.Options.ModelChange;
            createCalendar(calendar, element, adj);
          });
          x.setAttribute('style', 'opacity:' + (1 - Math.abs(adj) / 4));
          x.innerHTML += months[n].substr(0, 3);
        })(); // immediate invocation


        if (n == 0) {
          var y = document.createElement('li');
          y.className += 'cld-year';

          if (i < 5) {
            y.innerHTML += calendar.Selected.Year;
          } else {
            y.innerHTML += calendar.Selected.Year + 1;
          }

          monthList.appendChild(y);
        }
      }

      monthList.appendChild(x);
    }

    sidebar.appendChild(monthList);

    if (calendar.Options.NavLocation) {
      document.getElementById(calendar.Options.NavLocation).innerHTML = "";
      document.getElementById(calendar.Options.NavLocation).appendChild(sidebar);
    } else {
      element.appendChild(sidebar);
    }
  }

  var mainSection = document.createElement('div');
  mainSection.className += "cld-main";

  function AddDateTime() {
    var datetime = document.createElement('div');
    datetime.className += "cld-datetime";

    if (calendar.Options.NavShow && !calendar.Options.NavVertical) {
      var rwd = document.createElement('div');
      rwd.className += " cld-rwd cld-nav";
      rwd.addEventListener('click', function () {
        createCalendar(calendar, element, -1);
      });
      rwd.innerHTML = '<svg height="15" width="15" viewBox="0 0 75 100" fill="rgba(0,0,0,0.5)"><polyline points="0,50 75,0 75,100"></polyline></svg>';
      datetime.appendChild(rwd);
    }

    var today = document.createElement('div');
    today.className += ' today';
    today.innerHTML = months[calendar.Selected.Month] + ", " + calendar.Selected.Year;
    datetime.appendChild(today);

    if (calendar.Options.NavShow && !calendar.Options.NavVertical) {
      var fwd = document.createElement('div');
      fwd.className += " cld-fwd cld-nav";
      fwd.addEventListener('click', function () {
        createCalendar(calendar, element, 1);
      });
      fwd.innerHTML = '<svg height="15" width="15" viewBox="0 0 75 100" fill="rgba(0,0,0,0.5)"><polyline points="0,0 75,50 0,100"></polyline></svg>';
      datetime.appendChild(fwd);
    }

    if (calendar.Options.DatetimeLocation) {
      document.getElementById(calendar.Options.DatetimeLocation).innerHTML = "";
      document.getElementById(calendar.Options.DatetimeLocation).appendChild(datetime);
    } else {
      mainSection.appendChild(datetime);
    }
  }

  function AddLabels() {
    var labels = document.createElement('ul');
    labels.className = 'cld-labels';
    var labelsList = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

    for (var i = 0; i < labelsList.length; i++) {
      var label = document.createElement('li');
      label.className += "cld-label";
      label.innerHTML = labelsList[i];
      labels.appendChild(label);
    }

    mainSection.appendChild(labels);
  }

  function AddDays() {
    // Create Number Element
    function DayNumber(n) {
      var number = document.createElement('p');
      number.className += "cld-number";
      number.innerHTML += n;
      return number;
    }

    var days = document.createElement('ul');
    days.className += "cld-days"; // Previous Month's Days

    for (var i = 0; i < calendar.Selected.FirstDay; i++) {
      var day = document.createElement('li');
      day.className += "cld-day prevMonth"; //Disabled Days

      var d = i % 7;

      for (var q = 0; q < calendar.Options.DisabledDays.length; q++) {
        if (d == calendar.Options.DisabledDays[q]) {
          day.className += " disableDay";
        }
      }

      var number = DayNumber(calendar.Prev.Days - calendar.Selected.FirstDay + (i + 1));
      day.appendChild(number);
      days.appendChild(day);
    } // Current Month's Days


    for (var i = 0; i < calendar.Selected.Days; i++) {
      var day = document.createElement('li');
      day.className += "cld-day currMonth"; //Disabled Days

      var d = (i + calendar.Selected.FirstDay) % 7;

      for (var q = 0; q < calendar.Options.DisabledDays.length; q++) {
        if (d == calendar.Options.DisabledDays[q]) {
          day.className += " disableDay";
        }
      }

      var number = DayNumber(i + 1); // Check Date against Event Dates

      for (var n = 0; n < calendar.Model.length; n++) {
        var evDate = calendar.Model[n].Date;
        var toDate = new Date(calendar.Selected.Year, calendar.Selected.Month, i + 1);

        if (evDate.getTime() == toDate.getTime()) {
          number.className += " eventday";
          var title = document.createElement('span');
          title.className += "cld-title";

          if (typeof calendar.Model[n].Link == 'function' || calendar.Options.EventClick) {
            var a = document.createElement('a');
            a.setAttribute('href', '#');
            a.innerHTML += calendar.Model[n].Title;

            if (calendar.Options.EventClick) {
              var z = calendar.Model[n].Link;

              if (typeof calendar.Model[n].Link != 'string') {
                a.addEventListener('click', calendar.Options.EventClick.bind.apply(calendar.Options.EventClick, [null].concat(z)));

                if (calendar.Options.EventTargetWholeDay) {
                  day.className += " clickable";
                  day.addEventListener('click', calendar.Options.EventClick.bind.apply(calendar.Options.EventClick, [null].concat(z)));
                }
              } else {
                a.addEventListener('click', calendar.Options.EventClick.bind(null, z));

                if (calendar.Options.EventTargetWholeDay) {
                  day.className += " clickable";
                  day.addEventListener('click', calendar.Options.EventClick.bind(null, z));
                }
              }
            } else {
              a.addEventListener('click', calendar.Model[n].Link);

              if (calendar.Options.EventTargetWholeDay) {
                day.className += " clickable";
                day.addEventListener('click', calendar.Model[n].Link);
              }
            }

            title.appendChild(a);
          } else {
            title.innerHTML += '<a href="' + calendar.Model[n].Link + '">' + calendar.Model[n].Title + '</a>';
          }

          number.appendChild(title);
        }
      }

      day.appendChild(number); // If Today..

      if (i + 1 == calendar.Today.getDate() && calendar.Selected.Month == calendar.Today.Month && calendar.Selected.Year == calendar.Today.Year) {
        day.className += " today";
      }

      days.appendChild(day);
    } // Next Month's Days
    // Always same amount of days in calander


    var extraDays = 13;

    if (days.children.length > 35) {
      extraDays = 6;
    } else if (days.children.length < 29) {
      extraDays = 20;
    }

    for (var i = 0; i < extraDays - calendar.Selected.LastDay; i++) {
      var day = document.createElement('li');
      day.className += "cld-day nextMonth"; //Disabled Days

      var d = (i + calendar.Selected.LastDay + 1) % 7;

      for (var q = 0; q < calendar.Options.DisabledDays.length; q++) {
        if (d == calendar.Options.DisabledDays[q]) {
          day.className += " disableDay";
        }
      }

      var number = DayNumber(i + 1);
      day.appendChild(number);
      days.appendChild(day);
    }

    mainSection.appendChild(days);
  }

  if (calendar.Options.Color) {
    mainSection.innerHTML += '<style>.cld-main{color:' + calendar.Options.Color + ';}</style>';
  }

  if (calendar.Options.LinkColor) {
    mainSection.innerHTML += '<style>.cld-title a{color:' + calendar.Options.LinkColor + ';}</style>';
  }

  element.appendChild(mainSection);

  if (calendar.Options.NavShow && calendar.Options.NavVertical) {
    AddSidebar();
  }

  if (calendar.Options.DateTimeShow) {
    AddDateTime();
  }

  AddLabels();
  AddDays();
}

function caleandar(el, data, settings) {
  var obj = new Calendar(data, settings);
  createCalendar(obj, el);
}

/***/ }),

/***/ "./assets/vendor/circle-progress/circle-progress.min.js":
/*!**************************************************************!*\
  !*** ./assets/vendor/circle-progress/circle-progress.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.array.fill.js */ "./node_modules/core-js/modules/es.array.fill.js");

__webpack_require__(/*! core-js/modules/es.array.reverse.js */ "./node_modules/core-js/modules/es.array.reverse.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * jquery-circle-progress - jQuery Plugin to draw animated circular progress bars:
 * {@link http://kottenator.github.io/jquery-circle-progress/}
 *
 * @author Rostyslav Bryzgunov <kottenator@gmail.com>
 * @version 1.2.2
 * @licence MIT
 * @preserve
 */
!function (i) {
  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (i),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var t; }
}(function (i) {
  function t(i) {
    this.init(i);
  }

  t.prototype = {
    value: 0,
    size: 100,
    startAngle: -Math.PI,
    thickness: "auto",
    fill: {
      gradient: ["#3aeabb", "#fdd250"]
    },
    emptyFill: "rgba(0, 0, 0, .1)",
    animation: {
      duration: 1200,
      easing: "circleProgressEasing"
    },
    animationStartValue: 0,
    reverse: !1,
    lineCap: "butt",
    insertMode: "prepend",
    constructor: t,
    el: null,
    canvas: null,
    ctx: null,
    radius: 0,
    arcFill: null,
    lastFrameValue: 0,
    init: function init(t) {
      i.extend(this, t), this.radius = this.size / 2, this.initWidget(), this.initFill(), this.draw(), this.el.trigger("circle-inited");
    },
    initWidget: function initWidget() {
      this.canvas || (this.canvas = i("<canvas>")["prepend" == this.insertMode ? "prependTo" : "appendTo"](this.el)[0]);
      var t = this.canvas;

      if (t.width = this.size, t.height = this.size, this.ctx = t.getContext("2d"), window.devicePixelRatio > 1) {
        var e = window.devicePixelRatio;
        t.style.width = t.style.height = this.size + "px", t.width = t.height = this.size * e, this.ctx.scale(e, e);
      }
    },
    initFill: function initFill() {
      function t() {
        var t = i("<canvas>")[0];
        t.width = e.size, t.height = e.size, t.getContext("2d").drawImage(g, 0, 0, r, r), e.arcFill = e.ctx.createPattern(t, "no-repeat"), e.drawFrame(e.lastFrameValue);
      }

      var e = this,
          a = this.fill,
          n = this.ctx,
          r = this.size;
      if (!a) throw Error("The fill is not specified!");

      if ("string" == typeof a && (a = {
        color: a
      }), a.color && (this.arcFill = a.color), a.gradient) {
        var s = a.gradient;
        if (1 == s.length) this.arcFill = s[0];else if (s.length > 1) {
          for (var l = a.gradientAngle || 0, o = a.gradientDirection || [r / 2 * (1 - Math.cos(l)), r / 2 * (1 + Math.sin(l)), r / 2 * (1 + Math.cos(l)), r / 2 * (1 - Math.sin(l))], h = n.createLinearGradient.apply(n, o), c = 0; c < s.length; c++) {
            var d = s[c],
                u = c / (s.length - 1);
            i.isArray(d) && (u = d[1], d = d[0]), h.addColorStop(u, d);
          }

          this.arcFill = h;
        }
      }

      if (a.image) {
        var g;
        a.image instanceof Image ? g = a.image : (g = new Image(), g.src = a.image), g.complete ? t() : g.onload = t;
      }
    },
    draw: function draw() {
      this.animation ? this.drawAnimated(this.value) : this.drawFrame(this.value);
    },
    drawFrame: function drawFrame(i) {
      this.lastFrameValue = i, this.ctx.clearRect(0, 0, this.size, this.size), this.drawEmptyArc(i), this.drawArc(i);
    },
    drawArc: function drawArc(i) {
      if (0 !== i) {
        var t = this.ctx,
            e = this.radius,
            a = this.getThickness(),
            n = this.startAngle;
        t.save(), t.beginPath(), this.reverse ? t.arc(e, e, e - a / 2, n - 2 * Math.PI * i, n) : t.arc(e, e, e - a / 2, n, n + 2 * Math.PI * i), t.lineWidth = a, t.lineCap = this.lineCap, t.strokeStyle = this.arcFill, t.stroke(), t.restore();
      }
    },
    drawEmptyArc: function drawEmptyArc(i) {
      var t = this.ctx,
          e = this.radius,
          a = this.getThickness(),
          n = this.startAngle;
      i < 1 && (t.save(), t.beginPath(), i <= 0 ? t.arc(e, e, e - a / 2, 0, 2 * Math.PI) : this.reverse ? t.arc(e, e, e - a / 2, n, n - 2 * Math.PI * i) : t.arc(e, e, e - a / 2, n + 2 * Math.PI * i, n), t.lineWidth = a, t.strokeStyle = this.emptyFill, t.stroke(), t.restore());
    },
    drawAnimated: function drawAnimated(t) {
      var e = this,
          a = this.el,
          n = i(this.canvas);
      n.stop(!0, !1), a.trigger("circle-animation-start"), n.css({
        animationProgress: 0
      }).animate({
        animationProgress: 1
      }, i.extend({}, this.animation, {
        step: function step(i) {
          var n = e.animationStartValue * (1 - i) + t * i;
          e.drawFrame(n), a.trigger("circle-animation-progress", [i, n]);
        }
      })).promise().always(function () {
        a.trigger("circle-animation-end");
      });
    },
    getThickness: function getThickness() {
      return i.isNumeric(this.thickness) ? this.thickness : this.size / 14;
    },
    getValue: function getValue() {
      return this.value;
    },
    setValue: function setValue(i) {
      this.animation && (this.animationStartValue = this.lastFrameValue), this.value = i, this.draw();
    }
  }, i.circleProgress = {
    defaults: t.prototype
  }, i.easing.circleProgressEasing = function (i) {
    return i < .5 ? (i = 2 * i, .5 * i * i * i) : (i = 2 - 2 * i, 1 - .5 * i * i * i);
  }, i.fn.circleProgress = function (e, a) {
    var n = "circle-progress",
        r = this.data(n);

    if ("widget" == e) {
      if (!r) throw Error('Calling "widget" method on not initialized instance is forbidden');
      return r.canvas;
    }

    if ("value" == e) {
      if (!r) throw Error('Calling "value" method on not initialized instance is forbidden');
      if ("undefined" == typeof a) return r.getValue();
      var s = arguments[1];
      return this.each(function () {
        i(this).data(n).setValue(s);
      });
    }

    return this.each(function () {
      var a = i(this),
          r = a.data(n),
          s = i.isPlainObject(e) ? e : {};
      if (r) r.init(s);else {
        var l = i.extend({}, a.data());
        "string" == typeof l.fill && (l.fill = JSON.parse(l.fill)), "string" == typeof l.animation && (l.animation = JSON.parse(l.animation)), s = i.extend(l, s), s.el = a, r = new t(s), a.data(n, r);
      }
    });
  };
});

/***/ }),

/***/ "./assets/vendor/counter-up/jquery.counterup.min.js":
/*!**********************************************************!*\
  !*** ./assets/vendor/counter-up/jquery.counterup.min.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

/*!
 *
 * *********** Updated with https://github.com/ciromattia/jquery.counterup/blob/master/jquery.counterup.js to stop repeating the counting
 *
 * jquery.counterup.js 2.1.0
 *
 * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal
 * Released under the GPL v2 License
 *
 * Amended by Jeremy Paris, Ciro Mattia Gonano and others
 *
 * Date: Feb 24, 2017
 */
(function ($) {
  "use strict";

  $.fn.counterUp = function (options) {
    // Defaults
    var settings = $.extend({
      'time': 400,
      'delay': 10,
      'offset': 100,
      'beginAt': 0,
      'formatter': false,
      'context': 'window',
      callback: function callback() {}
    }, options),
        s;
    return this.each(function () {
      // Store the object
      var $this = $(this),
          counter = {
        time: $(this).data('counterup-time') || settings.time,
        delay: $(this).data('counterup-delay') || settings.delay,
        offset: $(this).data('counterup-offset') || settings.offset,
        beginAt: $(this).data('counterup-beginat') || settings.beginAt,
        context: $(this).data('counterup-context') || settings.context
      };

      var counterUpper = function counterUpper() {
        var nums = [];
        var divisions = counter.time / counter.delay;
        var num = $this.attr('data-num') ? $this.attr('data-num') : $this.text();
        var isComma = /[0-9]+,[0-9]+/.test(num);
        num = num.replace(/,/g, '');
        var decimalPlaces = (num.split('.')[1] || []).length;
        if (counter.beginAt > num) counter.beginAt = num;
        var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num); // Convert time to total seconds

        if (isTime) {
          var times = num.split(':'),
              m = 1;
          s = 0;

          while (times.length > 0) {
            s += m * parseInt(times.pop(), 10);
            m *= 60;
          }
        } // Generate list of incremental numbers to display


        for (var i = divisions; i >= counter.beginAt / num * divisions; i--) {
          var newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces); // Add incremental seconds and convert back to time

          if (isTime) {
            newNum = parseInt(s / divisions * i);
            var hours = parseInt(newNum / 3600) % 24;
            var minutes = parseInt(newNum / 60) % 60;
            var seconds = parseInt(newNum % 60, 10);
            newNum = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
          } // Preserve commas if input had commas


          if (isComma) {
            while (/(\d+)(\d{3})/.test(newNum.toString())) {
              newNum = newNum.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
            }
          }

          if (settings.formatter) {
            newNum = settings.formatter.call(this, newNum);
          }

          nums.unshift(newNum);
        }

        $this.data('counterup-nums', nums);
        $this.text(counter.beginAt); // Updates the number until we're done

        var f = function f() {
          if (!$this.data('counterup-nums')) {
            settings.callback.call(this);
            return;
          }

          $this.html($this.data('counterup-nums').shift());

          if ($this.data('counterup-nums').length) {
            setTimeout($this.data('counterup-func'), counter.delay);
          } else {
            $this.data('counterup-nums', null);
            $this.data('counterup-func', null);
            settings.callback.call(this);
          }
        };

        $this.data('counterup-func', f); // Start the count up

        setTimeout($this.data('counterup-func'), counter.delay);
      }; // Perform counts when the element gets into view


      $this.waypoint(function (direction) {
        counterUpper();
        this.destroy(); //-- Waypoint 3.0 version of triggerOnce
      }, {
        offset: counter.offset + "%",
        context: counter.context
      });
    });
  };
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/jq-photoswipe/jqPhotoSwipe.min.js":
/*!*********************************************************!*\
  !*** ./assets/vendor/jq-photoswipe/jqPhotoSwipe.min.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery, $) {__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

/*!
jqPhotoSwipe v0.1.1 - jQuery for PhotoSwipe
https://ergec.github.io/jQuery-for-PhotoSwipe/
*/
(function (a) {
  a.fn.jqPhotoSwipe = function (e) {
    if (this.length) {
      var f = function f() {
        var l = window.location.hash.substring(1),
            n = {};
        var k = l.split("&");

        for (var j = 0; j < k.length; j++) {
          if (!k[j]) {
            continue;
          }

          var m = k[j].split("=");

          if (m.length < 2) {
            continue;
          }

          n[m[0]] = m[1];
        }

        if (n.gid) {
          n.gid = n.gid;
        }

        return n;
      };

      var i = {};
      var g = {
        forceSingleGallery: false,
        galleryOpen: function galleryOpen(j) {}
      };
      i.galleries = [];
      i.galleriesindex = [];
      var h = 0;
      var d;

      if ($(".pswp[role='dialog']").length) {
        d = $(".pswp[role='dialog']")[0];
      } else {
        var b = '<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true"><div class="pswp__bg"></div><div class="pswp__scroll-wrap"><div class="pswp__container"><div class="pswp__item"></div><div class="pswp__item"></div><div class="pswp__item"></div></div><div class="pswp__ui pswp__ui--hidden"><div class="pswp__top-bar"><div class="pswp__counter"></div><button class="pswp__button pswp__button--close" title="Close (Esc)"></button><button class="pswp__button pswp__button--share" title="Share"></button><button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button><button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button><div class="pswp__preloader"><div class="pswp__preloader__icn"><div class="pswp__preloader__cut"><div class="pswp__preloader__donut"></div></div></div></div></div><div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap"><div class="pswp__share-tooltip"></div> </div><button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button><button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button><div class="pswp__caption"><div class="pswp__caption__center"></div></div></div></div></div>';
        d = $(b).appendTo("body")[0];
      }

      var c = "pswg-forced";
      this.each(function () {
        var j = $.extend(g, e);
        var n = $(this);
        var m = n.data("fancybox-group");

        if (!m) {
          if (j.forceSingleGallery) {
            m = c;
            n.data("fancybox-group", m);
          } else {
            m = "pswgname" + i.galleriesindex.length;
            n.data("fancybox-group", m);
          }
        }

        if (i.galleriesindex.indexOf(m) === -1) {
          h = i.galleriesindex.length;
          i.galleriesindex.push(m);
          i.galleries[h] = {};
          i.galleries[h].items = [];
          i.galleries[h].i = 0;
        } else {
          h = i.galleriesindex.indexOf(m);
        }

        var k = h;
        n.data("i", i.galleries[h].i);
        n.data("gid", m);
        i.galleries[k].items.push({
          src: n.attr("href"),
          title: n.attr("title"),
          w: 0,
          h: 0
        });
        n.off("click").on("click", function (q) {
          q.preventDefault();
          var o = $(this).data("i");
          j.index = o;
          j.galleryUID = $(this).data("gid");
          i.galleries[k].obj = new PhotoSwipe(d, PhotoSwipeUI_Default, i.galleries[k].items, j);
          i.galleries[k].obj.init();
          i.galleries[k].obj.listen("initialZoomInEnd", function () {
            j.galleryOpen(i.galleries[k].obj);
          });
          i.galleries[k].obj.listen("imageLoadComplete", function (r, s) {
            p(r, s);
          });
          i.galleries[k].obj.listen("gettingData", function (r, s) {
            p(r, s);
          });

          function p(r, s) {
            if (s.w == 0 && s.h == 0) {
              var t = new Image();

              t.onload = function () {
                s.w = this.width;
                s.h = this.height;
                s.needsUpdate = true;
                i.galleries[k].obj.updateSize(true);
              };

              t.src = s.src;
            }
          }
        });
        var l = f();

        if (l.gid) {
          if (l.gid.toString() === m && l.pid.toString() === (i.galleries[h].i + 1).toString()) {
            n.trigger("click");
          }
        }

        i.galleries[h].i++;
      });
      return i;
    }
  };
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/jquery.cookieBar/jquery.cookieBar.min.css":
/*!*****************************************************************!*\
  !*** ./assets/vendor/jquery.cookieBar/jquery.cookieBar.min.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/vendor/jquery.cookieBar/jquery.cookieBar.min.js":
/*!****************************************************************!*\
  !*** ./assets/vendor/jquery.cookieBar/jquery.cookieBar.min.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

/*!
 * Cookie Bar component (https://github.com/kovarp/jquery.cookieBar)
 * Version 1.2.3
 *
 * Copyright 2019 Pavel Kovář - Frontend developer [www.pavelkovar.cz]
 * @license: MIT (https://github.com/kovarp/jquery.cookieBar/blob/master/LICENSE)
 */
if ("undefined" == typeof jQuery) throw new Error("Cookie Bar component requires jQuery");
!function (t) {
  var a,
      r,
      n = [];
  n.en = {
    message: "We use cookies to provide our services. By using this website, you agree to this.",
    acceptText: "OK",
    infoText: "More information",
    privacyText: "Privacy protection"
  }, n.de = {
    message: "Zur Bereitstellung von Diensten verwenden wir Cookies. Durch die Nutzung dieser Website stimmen Sie zu.",
    acceptText: "OK",
    infoText: "Mehr Informationen",
    privacyText: "Datenschutz"
  }, n.cs = {
    message: "K poskytování služeb využíváme soubory cookie. Používáním tohoto webu s&nbsp;tím souhlasíte.",
    acceptText: "V pořádku",
    infoText: "Více informací",
    privacyText: "Ochrana soukromí"
  }, n.sk = {
    message: "Na poskytovanie služieb využívame súbory cookie. Používaním tohto webu s&nbsp;tým súhlasíte.",
    acceptText: "V poriadku",
    infoText: "Viac informácií",
    privacyText: "Ochrana súkromia"
  }, n.ru = {
    message: "Данный сайт использует для предоставления услуг, персонализации объявлений и анализа трафика печенье. Используя этот сайт, вы соглашаетесь.",
    acceptText: "Я согласен",
    infoText: "Больше информации",
    privacyText: "Конфиденциальность"
  }, n.pl = {
    message: "Używamy plików cookie w celu świadczenia naszych usług. Korzystając z tej strony, zgadzasz się na to.",
    acceptText: "Dobrze",
    infoText: "Więcej informacji",
    privacyText: "Ochrona prywatności"
  }, n.es = {
    message: "Este sitio web utiliza cookies para mejorar su experiencia. Si continúas navegando, consideraremos que aceptas su uso.",
    acceptText: "Aceptar",
    infoText: "Más información",
    privacyText: "Protección de datos"
  };
  var c = {
    init: function init(e) {
      a = "#cookie-bar";
      var o = {
        infoLink: "https://www.google.com/policies/technologies/cookies/",
        infoTarget: "_blank",
        wrapper: "body",
        expireDays: 365,
        style: "top",
        language: t("html").attr("lang") || "en",
        privacy: !1,
        privacyTarget: "_blank",
        privacyContent: null
      };
      r = t.extend(o, e), n[r.language] || (r.language = "en"), "accepted" !== c.getCookie("cookies-state") && c.displayBar(), t(document).on("click", a + " .cookie-bar__btn", function (e) {
        e.preventDefault(), c.setCookie("cookies-state", "accepted", r.expireDays), c.hideBar();
      }), t(document).on("click", '[data-toggle="cookieBarPrivacyPopup"]', function (e) {
        e.preventDefault(), c.showPopup();
      }), t(document).on("click", ".cookie-bar-privacy-popup, .cookie-bar-privacy-popup__dialog__close", function (e) {
        c.hidePopup();
      }), t(document).on("click", ".cookie-bar-privacy-popup__dialog", function (e) {
        e.stopPropagation();
      });
    },
    displayBar: function displayBar() {
      t.trim(t(r.wrapper).html()) || t(r.wrapper).empty();
      var e = '<button type="button" class="cookie-bar__btn">' + n[r.language].acceptText + "</button>",
          o = '<a href="' + r.infoLink + '" target="' + r.infoTarget + '" class="cookie-bar__link cookie-bar__link--cookies-info">' + n[r.language].infoText + "</a>",
          a = "";
      r.privacy && ("link" === r.privacy ? a = '<a href="' + r.privacyContent + '" target="' + r.privacyTarget + '" class="cookie-bar__link cookie-bar__link--privacy-info">' + n[r.language].privacyText + "</a>" : "bs_modal" === r.privacy ? a = '<a href="' + r.privacyContent + '" data-toggle="modal" class="cookie-bar__link cookie-bar__link--privacy-info">' + n[r.language].privacyText + "</a>" : "popup" === r.privacy && (c.renderPopup(), a = '<a href="#" data-toggle="cookieBarPrivacyPopup" class="cookie-bar__link cookie-bar__link--privacy-info">' + n[r.language].privacyText + "</a>"));
      var i = '<div id="cookie-bar" class="cookie-bar cookie-bar--' + r.style + '"><div class="cookie-bar__inner"><span class="cookie-bar__message">' + n[r.language].message + '</span><span class="cookie-bar__buttons">' + e + o + a + "</span></div></div>";
      t(r.wrapper).prepend(i), t("body").addClass("has-cookie-bar");
    },
    hideBar: function hideBar() {
      t(a).slideUp(), t("body").removeClass("has-cookie-bar");
    },
    renderPopup: function renderPopup() {
      var e = t('<div id="cookieBarPrivacyPopup" class="cookie-bar-privacy-popup cookie-bar-privacy-popup--hidden"><div class="cookie-bar-privacy-popup__dialog"><button type="button" class="cookie-bar-privacy-popup__dialog__close"></button></div></div>');
      t("body").append(e), t(".cookie-bar-privacy-popup__dialog", e).append(r.privacyContent);
    },
    showPopup: function showPopup() {
      t("#cookieBarPrivacyPopup").removeClass("cookie-bar-privacy-popup--hidden");
    },
    hidePopup: function hidePopup() {
      t("#cookieBarPrivacyPopup").addClass("cookie-bar-privacy-popup--hidden");
    },
    addTranslation: function addTranslation(e, o) {
      n[e] = o;
    },
    switchTranslation: function switchTranslation(e) {
      e === r.language || r.privacy || (n[e] ? r.language = e : r.language = "en", "accepted" !== c.getCookie("cookies-state") && c.displayBar());
    },
    setCookie: function setCookie(e, o, a) {
      var i = new Date();
      i.setTime(i.getTime() + 24 * a * 60 * 60 * 1e3);
      var t = "expires=" + i.toUTCString();
      document.cookie = e + "=" + o + ";" + t + ";path=/";
    },
    getCookie: function getCookie(e) {
      for (var o = e + "=", a = document.cookie.split(";"), i = 0; i < a.length; i++) {
        for (var t = a[i]; " " === t.charAt(0);) {
          t = t.substring(1);
        }

        if (0 === t.indexOf(o)) return t.substring(o.length, t.length);
      }

      return "";
    }
  };

  t.cookieBar = function (e) {
    return c[e] ? c[e].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != _typeof(e) && e ? void t.error("Method " + e + " does not exist on Cookie Bar component") : c.init.apply(this, arguments);
  };
}(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/jquery.countdown/jquery.countdown.min.js":
/*!****************************************************************!*\
  !*** ./assets/vendor/jquery.countdown/jquery.countdown.min.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");

__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

/*!
 * The Final Countdown for jQuery v2.2.0 (http://hilios.github.io/jQuery.countdown/)
 * Copyright (c) 2016 Edson Hilios
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
!function (a) {
  "use strict";

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(function (a) {
  "use strict";

  function b(a) {
    if (a instanceof Date) return a;
    if (String(a).match(g)) return String(a).match(/^[0-9]*$/) && (a = Number(a)), String(a).match(/\-/) && (a = String(a).replace(/\-/g, "/")), new Date(a);
    throw new Error("Couldn't cast `" + a + "` to a date object.");
  }

  function c(a) {
    var b = a.toString().replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    return new RegExp(b);
  }

  function d(a) {
    return function (b) {
      var d = b.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
      if (d) for (var f = 0, g = d.length; f < g; ++f) {
        var h = d[f].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/),
            j = c(h[0]),
            k = h[1] || "",
            l = h[3] || "",
            m = null;
        h = h[2], i.hasOwnProperty(h) && (m = i[h], m = Number(a[m])), null !== m && ("!" === k && (m = e(l, m)), "" === k && m < 10 && (m = "0" + m.toString()), b = b.replace(j, m.toString()));
      }
      return b = b.replace(/%%/, "%");
    };
  }

  function e(a, b) {
    var c = "s",
        d = "";
    return a && (a = a.replace(/(:|;|\s)/gi, "").split(/\,/), 1 === a.length ? c = a[0] : (d = a[0], c = a[1])), Math.abs(b) > 1 ? c : d;
  }

  var f = [],
      g = [],
      h = {
    precision: 100,
    elapse: !1,
    defer: !1
  };
  g.push(/^[0-9]*$/.source), g.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source), g.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source), g = new RegExp(g.join("|"));

  var i = {
    Y: "years",
    m: "months",
    n: "daysToMonth",
    d: "daysToWeek",
    w: "weeks",
    W: "weeksToMonth",
    H: "hours",
    M: "minutes",
    S: "seconds",
    D: "totalDays",
    I: "totalHours",
    N: "totalMinutes",
    T: "totalSeconds"
  },
      j = function j(b, c, d) {
    this.el = b, this.$el = a(b), this.interval = null, this.offset = {}, this.options = a.extend({}, h), this.firstTick = !0, this.instanceNumber = f.length, f.push(this), this.$el.data("countdown-instance", this.instanceNumber), d && ("function" == typeof d ? (this.$el.on("update.countdown", d), this.$el.on("stoped.countdown", d), this.$el.on("finish.countdown", d)) : this.options = a.extend({}, h, d)), this.setFinalDate(c), this.options.defer === !1 && this.start();
  };

  a.extend(j.prototype, {
    start: function start() {
      null !== this.interval && clearInterval(this.interval);
      var a = this;
      this.update(), this.interval = setInterval(function () {
        a.update.call(a);
      }, this.options.precision);
    },
    stop: function stop() {
      clearInterval(this.interval), this.interval = null, this.dispatchEvent("stoped");
    },
    toggle: function toggle() {
      this.interval ? this.stop() : this.start();
    },
    pause: function pause() {
      this.stop();
    },
    resume: function resume() {
      this.start();
    },
    remove: function remove() {
      this.stop.call(this), f[this.instanceNumber] = null, delete this.$el.data().countdownInstance;
    },
    setFinalDate: function setFinalDate(a) {
      this.finalDate = b(a);
    },
    update: function update() {
      if (0 === this.$el.closest("html").length) return void this.remove();
      var a,
          b = new Date();
      return a = this.finalDate.getTime() - b.getTime(), a = Math.ceil(a / 1e3), a = !this.options.elapse && a < 0 ? 0 : Math.abs(a), this.totalSecsLeft === a || this.firstTick ? void (this.firstTick = !1) : (this.totalSecsLeft = a, this.elapsed = b >= this.finalDate, this.offset = {
        seconds: this.totalSecsLeft % 60,
        minutes: Math.floor(this.totalSecsLeft / 60) % 60,
        hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,
        days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
        daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
        daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 % 30.4368),
        weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),
        weeksToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4,
        months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),
        years: Math.abs(this.finalDate.getFullYear() - b.getFullYear()),
        totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),
        totalHours: Math.floor(this.totalSecsLeft / 60 / 60),
        totalMinutes: Math.floor(this.totalSecsLeft / 60),
        totalSeconds: this.totalSecsLeft
      }, void (this.options.elapse || 0 !== this.totalSecsLeft ? this.dispatchEvent("update") : (this.stop(), this.dispatchEvent("finish"))));
    },
    dispatchEvent: function dispatchEvent(b) {
      var c = a.Event(b + ".countdown");
      c.finalDate = this.finalDate, c.elapsed = this.elapsed, c.offset = a.extend({}, this.offset), c.strftime = d(this.offset), this.$el.trigger(c);
    }
  }), a.fn.countdown = function () {
    var b = Array.prototype.slice.call(arguments, 0);
    return this.each(function () {
      var c = a(this).data("countdown-instance");

      if (void 0 !== c) {
        var d = f[c],
            e = b[0];
        j.prototype.hasOwnProperty(e) ? d[e].apply(d, b.slice(1)) : null === String(e).match(/^[$A-Z_][0-9A-Z_$]*$/i) ? (d.setFinalDate.call(d, e), d.start()) : a.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi, e));
      } else new j(this, b[0], b[1]);
    });
  };
});

/***/ }),

/***/ "./assets/vendor/jssocials/jssocials.css":
/*!***********************************************!*\
  !*** ./assets/vendor/jssocials/jssocials.css ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/vendor/jssocials/jssocials.min.js":
/*!**************************************************!*\
  !*** ./assets/vendor/jssocials/jssocials.min.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

/*! jssocials - v1.4.0 - 2016-10-10
* http://js-socials.com
* Copyright (c) 2016 Artem Tabalin; Licensed MIT */
!function (a, b, c) {
  function d(a, c) {
    var d = b(a);
    d.data(f, this), this._$element = d, this.shares = [], this._init(c), this._render();
  }

  var e = "JSSocials",
      f = e,
      g = function g(a, c) {
    return b.isFunction(a) ? a.apply(c, b.makeArray(arguments).slice(2)) : a;
  },
      h = /(\.(jpeg|png|gif|bmp|svg)$|^data:image\/(jpeg|png|gif|bmp|svg\+xml);base64)/i,
      i = /(&?[a-zA-Z0-9]+=)?\{([a-zA-Z0-9]+)\}/g,
      j = {
    G: 1e9,
    M: 1e6,
    K: 1e3
  },
      k = {};

  d.prototype = {
    url: "",
    text: "",
    shareIn: "blank",
    showLabel: function showLabel(a) {
      return this.showCount === !1 ? a > this.smallScreenWidth : a >= this.largeScreenWidth;
    },
    showCount: function showCount(a) {
      return a <= this.smallScreenWidth ? "inside" : !0;
    },
    smallScreenWidth: 640,
    largeScreenWidth: 1024,
    resizeTimeout: 200,
    elementClass: "jssocials",
    sharesClass: "jssocials-shares",
    shareClass: "jssocials-share",
    shareButtonClass: "jssocials-share-button",
    shareLinkClass: "jssocials-share-link",
    shareLogoClass: "jssocials-share-logo",
    shareLabelClass: "jssocials-share-label",
    shareLinkCountClass: "jssocials-share-link-count",
    shareCountBoxClass: "jssocials-share-count-box",
    shareCountClass: "jssocials-share-count",
    shareZeroCountClass: "jssocials-share-no-count",
    _init: function _init(a) {
      this._initDefaults(), b.extend(this, a), this._initShares(), this._attachWindowResizeCallback();
    },
    _initDefaults: function _initDefaults() {
      this.url = a.location.href, this.text = b.trim(b("meta[name=description]").attr("content") || b("title").text());
    },
    _initShares: function _initShares() {
      this.shares = b.map(this.shares, b.proxy(function (a) {
        "string" == typeof a && (a = {
          share: a
        });
        var c = a.share && k[a.share];
        if (!c && !a.renderer) throw Error("Share '" + a.share + "' is not found");
        return b.extend({
          url: this.url,
          text: this.text
        }, c, a);
      }, this));
    },
    _attachWindowResizeCallback: function _attachWindowResizeCallback() {
      b(a).on("resize", b.proxy(this._windowResizeHandler, this));
    },
    _detachWindowResizeCallback: function _detachWindowResizeCallback() {
      b(a).off("resize", this._windowResizeHandler);
    },
    _windowResizeHandler: function _windowResizeHandler() {
      (b.isFunction(this.showLabel) || b.isFunction(this.showCount)) && (a.clearTimeout(this._resizeTimer), this._resizeTimer = setTimeout(b.proxy(this.refresh, this), this.resizeTimeout));
    },
    _render: function _render() {
      this._clear(), this._defineOptionsByScreen(), this._$element.addClass(this.elementClass), this._$shares = b("<div>").addClass(this.sharesClass).appendTo(this._$element), this._renderShares();
    },
    _defineOptionsByScreen: function _defineOptionsByScreen() {
      this._screenWidth = b(a).width(), this._showLabel = g(this.showLabel, this, this._screenWidth), this._showCount = g(this.showCount, this, this._screenWidth);
    },
    _renderShares: function _renderShares() {
      b.each(this.shares, b.proxy(function (a, b) {
        this._renderShare(b);
      }, this));
    },
    _renderShare: function _renderShare(a) {
      var c;
      c = b.isFunction(a.renderer) ? b(a.renderer()) : this._createShare(a), c.addClass(this.shareClass).addClass(a.share ? "jssocials-share-" + a.share : "").addClass(a.css).appendTo(this._$shares);
    },
    _createShare: function _createShare(a) {
      var c = b("<div>"),
          d = this._createShareLink(a).appendTo(c);

      if (this._showCount) {
        var e = "inside" === this._showCount,
            f = e ? d : b("<div>").addClass(this.shareCountBoxClass).appendTo(c);
        f.addClass(e ? this.shareLinkCountClass : this.shareCountBoxClass), this._renderShareCount(a, f);
      }

      return c;
    },
    _createShareLink: function _createShareLink(a) {
      var c = this._getShareStrategy(a),
          d = c.call(a, {
        shareUrl: this._getShareUrl(a)
      });

      return d.addClass(this.shareLinkClass).append(this._createShareLogo(a)), this._showLabel && d.append(this._createShareLabel(a)), b.each(this.on || {}, function (c, e) {
        b.isFunction(e) && d.on(c, b.proxy(e, a));
      }), d;
    },
    _getShareStrategy: function _getShareStrategy(a) {
      var b = m[a.shareIn || this.shareIn];
      if (!b) throw Error("Share strategy '" + this.shareIn + "' not found");
      return b;
    },
    _getShareUrl: function _getShareUrl(a) {
      var b = g(a.shareUrl, a);
      return this._formatShareUrl(b, a);
    },
    _createShareLogo: function _createShareLogo(a) {
      var c = a.logo,
          d = h.test(c) ? b("<img>").attr("src", a.logo) : b("<i>").addClass(c);
      return d.addClass(this.shareLogoClass), d;
    },
    _createShareLabel: function _createShareLabel(a) {
      return b("<span>").addClass(this.shareLabelClass).text(a.label);
    },
    _renderShareCount: function _renderShareCount(a, c) {
      var d = b("<span>").addClass(this.shareCountClass);
      c.addClass(this.shareZeroCountClass).append(d), this._loadCount(a).done(b.proxy(function (a) {
        a && (c.removeClass(this.shareZeroCountClass), d.text(a));
      }, this));
    },
    _loadCount: function _loadCount(a) {
      var c = b.Deferred(),
          d = this._getCountUrl(a);

      if (!d) return c.resolve(0).promise();
      var e = b.proxy(function (b) {
        c.resolve(this._getCountValue(b, a));
      }, this);
      return b.getJSON(d).done(e).fail(function () {
        b.get(d).done(e).fail(function () {
          c.resolve(0);
        });
      }), c.promise();
    },
    _getCountUrl: function _getCountUrl(a) {
      var b = g(a.countUrl, a);
      return this._formatShareUrl(b, a);
    },
    _getCountValue: function _getCountValue(a, c) {
      var d = (b.isFunction(c.getCount) ? c.getCount(a) : a) || 0;
      return "string" == typeof d ? d : this._formatNumber(d);
    },
    _formatNumber: function _formatNumber(a) {
      return b.each(j, function (b, c) {
        return a >= c ? (a = parseFloat((a / c).toFixed(2)) + b, !1) : void 0;
      }), a;
    },
    _formatShareUrl: function _formatShareUrl(b, c) {
      return b.replace(i, function (b, d, e) {
        var f = c[e] || "";
        return f ? (d || "") + a.encodeURIComponent(f) : "";
      });
    },
    _clear: function _clear() {
      a.clearTimeout(this._resizeTimer), this._$element.empty();
    },
    _passOptionToShares: function _passOptionToShares(a, c) {
      var d = this.shares;
      b.each(["url", "text"], function (e, f) {
        f === a && b.each(d, function (b, d) {
          d[a] = c;
        });
      });
    },
    _normalizeShare: function _normalizeShare(a) {
      return b.isNumeric(a) ? this.shares[a] : "string" == typeof a ? b.grep(this.shares, function (b) {
        return b.share === a;
      })[0] : a;
    },
    refresh: function refresh() {
      this._render();
    },
    destroy: function destroy() {
      this._clear(), this._detachWindowResizeCallback(), this._$element.removeClass(this.elementClass).removeData(f);
    },
    option: function option(a, b) {
      return 1 === arguments.length ? this[a] : (this[a] = b, this._passOptionToShares(a, b), void this.refresh());
    },
    shareOption: function shareOption(a, b, c) {
      return a = this._normalizeShare(a), 2 === arguments.length ? a[b] : (a[b] = c, void this.refresh());
    }
  }, b.fn.jsSocials = function (a) {
    var e = b.makeArray(arguments),
        g = e.slice(1),
        h = this;
    return this.each(function () {
      var e,
          i = b(this),
          j = i.data(f);
      if (j) {
        if ("string" == typeof a) {
          if (e = j[a].apply(j, g), e !== c && e !== j) return h = e, !1;
        } else j._detachWindowResizeCallback(), j._init(a), j._render();
      } else new d(i, a);
    }), h;
  };

  var l = function l(a) {
    var c;
    b.isPlainObject(a) ? c = d.prototype : (c = k[a], a = arguments[1] || {}), b.extend(c, a);
  },
      m = {
    popup: function popup(c) {
      return b("<a>").attr("href", "#").on("click", function () {
        return a.open(c.shareUrl, null, "width=600, height=400, location=0, menubar=0, resizeable=0, scrollbars=0, status=0, titlebar=0, toolbar=0"), !1;
      });
    },
    blank: function blank(a) {
      return b("<a>").attr({
        target: "_blank",
        href: a.shareUrl
      });
    },
    self: function self(a) {
      return b("<a>").attr({
        target: "_self",
        href: a.shareUrl
      });
    }
  };

  a.jsSocials = {
    Socials: d,
    shares: k,
    shareStrategies: m,
    setDefaults: l
  };
}(window, jQuery), function (a, b, c) {
  b.extend(c.shares, {
    email: {
      label: "E-mail",
      logo: "fa fa-at",
      shareUrl: "mailto:{to}?subject={text}&body={url}",
      countUrl: "",
      shareIn: "self"
    },
    twitter: {
      label: "Tweet",
      logo: "fa fa-twitter",
      shareUrl: "https://twitter.com/share?url={url}&text={text}&via={via}&hashtags={hashtags}",
      countUrl: ""
    },
    facebook: {
      label: "Like",
      logo: "fa fa-facebook",
      shareUrl: "https://facebook.com/sharer/sharer.php?u={url}",
      countUrl: "https://graph.facebook.com/?id={url}",
      getCount: function getCount(a) {
        return a.share && a.share.share_count || 0;
      }
    },
    vkontakte: {
      label: "Like",
      logo: "fa fa-vk",
      shareUrl: "https://vk.com/share.php?url={url}&title={title}&description={text}",
      countUrl: "https://vk.com/share.php?act=count&index=1&url={url}",
      getCount: function getCount(a) {
        return parseInt(a.slice(15, -2).split(", ")[1]);
      }
    },
    googleplus: {
      label: "+1",
      logo: "fa fa-google",
      shareUrl: "https://plus.google.com/share?url={url}",
      countUrl: ""
    },
    linkedin: {
      label: "Share",
      logo: "fa fa-linkedin",
      shareUrl: "https://www.linkedin.com/shareArticle?mini=true&url={url}",
      countUrl: "https://www.linkedin.com/countserv/count/share?format=jsonp&url={url}&callback=?",
      getCount: function getCount(a) {
        return a.count;
      }
    },
    pinterest: {
      label: "Pin it",
      logo: "fa fa-pinterest",
      shareUrl: "https://pinterest.com/pin/create/bookmarklet/?media={media}&url={url}&description={text}",
      countUrl: "https://api.pinterest.com/v1/urls/count.json?&url={url}&callback=?",
      getCount: function getCount(a) {
        return a.count;
      }
    },
    stumbleupon: {
      label: "Share",
      logo: "fa fa-stumbleupon",
      shareUrl: "http://www.stumbleupon.com/submit?url={url}&title={title}",
      countUrl: "https://cors-anywhere.herokuapp.com/https://www.stumbleupon.com/services/1.01/badge.getinfo?url={url}",
      getCount: function getCount(a) {
        return a.result.views;
      }
    },
    telegram: {
      label: "Telegram",
      logo: "fa fa-paper-plane",
      shareUrl: "tg://msg?text={url} {text}",
      countUrl: "",
      shareIn: "self"
    },
    whatsapp: {
      label: "WhatsApp",
      logo: "fa fa-whatsapp",
      shareUrl: "whatsapp://send?text={url} {text}",
      countUrl: "",
      shareIn: "self"
    },
    line: {
      label: "LINE",
      logo: "fa fa-comment",
      shareUrl: "http://line.me/R/msg/text/?{text} {url}",
      countUrl: ""
    },
    viber: {
      label: "Viber",
      logo: "fa fa-volume-control-phone",
      shareUrl: "viber://forward?text={url} {text}",
      countUrl: "",
      shareIn: "self"
    },
    pocket: {
      label: "Pocket",
      logo: "fa fa-get-pocket",
      shareUrl: "https://getpocket.com/save?url={url}&title={title}",
      countUrl: ""
    },
    messenger: {
      label: "Share",
      logo: "fa fa-commenting",
      shareUrl: "fb-messenger://share?link={url}",
      countUrl: "",
      shareIn: "self"
    }
  });
}(window, jQuery, window.jsSocials);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/knppaginator-ajax/knppaginator-ajax.js":
/*!**************************************************************!*\
  !*** ./assets/vendor/knppaginator-ajax/knppaginator-ajax.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return KnpPaginatorAjax; });
/* harmony import */ var core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
/* harmony import */ var core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4__);







function KnpPaginatorAjax() {
  this.loading = false;
  this.noMorePagesLeft = false;
  this.ajaxLoadedContent = [];
}

KnpPaginatorAjax.prototype.getCurrentPage = function () {
  return parseInt(this.pageElem.find('li.active span').text());
};

KnpPaginatorAjax.prototype.getNextPage = function () {
  var data = this.ajaxLoadedContent.pop();

  if (data) {
    var nextPageElem = data.find(this.options.paginationSelector).find('li.active').next().find('a');
  } else {
    var nextPageElem = this.pageElem.find('li.active').next().find('a');
  }

  var nextPageNumber = parseInt(nextPageElem.text());

  if (!nextPageElem.hasClass('disabled') && nextPageNumber) {
    return {
      'url': nextPageElem.attr('href'),
      'number': parseInt(nextPageNumber)
    };
  } else {
    //there is no next page
    return false;
  }
};

KnpPaginatorAjax.prototype.setAjaxLoadedContent = function (html) {
  this.ajaxLoadedContent.push(html);
  this.update();
};

KnpPaginatorAjax.prototype.init = function (options) {
  this.options = options; //options = {
  //    'loadMoreText': 'Load More',
  //    'elementsSelector': '#products',
  //    'paginationSelector': 'ul.pagination',
  //};

  this.pageElem = $(options.paginationSelector);
  this.pageElem.hide();
  this.injectLoadMoreButton();
};

KnpPaginatorAjax.prototype.injectLoadMoreButton = function () {
  var loadMoreButton = $("<div class='text-center'><button class='btn btn-default loadMore'>" + this.options.loadMoreText + "</button></div>");
  var spinner = $("<div class='text-center' style='display:none;'><button class='btn btn-default disabled'>" + this.options.loadingText + "</button></div>");
  this.loadMoreButton = loadMoreButton;
  this.spinner = spinner;
  this.pageElem.after(loadMoreButton);
  this.pageElem.after(spinner);
  loadMoreButton.click(this.clickListener.bind(this));
};

KnpPaginatorAjax.prototype.update = function () {
  if (this.getNextPage()) {
    this.loadMoreButton.show();
  } else {
    this.loadMoreButton.hide();
  }
};

KnpPaginatorAjax.prototype.clickListener = function () {
  var self = this;
  this.loading = true;
  var nextPage = this.getNextPage();
  var options = this.options;
  this.spinner.show();
  this.loadMoreButton.hide();
  $.get(nextPage.url, function (data) {
    self.spinner.hide();
    self.loadMoreButton.show();
    var data = $(data); //console.log();

    var elements = data.find(options.elementsSelector);

    if (data.filter(options.elementsSelector).length) {
      //there is #elements_selector div in the response, which means
      //setAjaxLoadedContent is used
      $(options.elementsSelector).append(data.filter(options.elementsSelector));
    } else {
      $(options.elementsSelector).append(elements);
    } //$(options.elementsSelector).html(data.find('#products').html());
    //console.log(data.html());
    //console.log(data.find('#products'));


    self.pageElem = data.find(self.options.paginationSelector);

    if (!self.getNextPage()) {
      self.loadMoreButton.hide();
      self.noMorePagesLeft = true;
    }

    self.loading = false;
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/morphext/morphext.min.js":
/*!************************************************!*\
  !*** ./assets/vendor/morphext/morphext.min.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

/*! Morphext - v2.4.7 - 2016-11-04 */
!function (a) {
  "use strict";

  function b(b, c) {
    this.element = a(b), this.settings = a.extend({}, d, c), this._defaults = d, this._init();
  }

  var c = "Morphext",
      d = {
    animation: "bounceIn",
    separator: ",",
    speed: 2e3,
    complete: a.noop
  };
  b.prototype = {
    _init: function _init() {
      var b = this;
      this.phrases = [], this.element.addClass("morphext"), a.each(this.element.text().split(this.settings.separator), function (c, d) {
        b.phrases.push(a.trim(d));
      }), this.index = -1, this.animate(), this.start();
    },
    animate: function animate() {
      this.index = ++this.index % this.phrases.length, this.element[0].innerHTML = '<span class="animated ' + this.settings.animation + '">' + this.phrases[this.index] + "</span>", a.isFunction(this.settings.complete) && this.settings.complete.call(this);
    },
    start: function start() {
      var a = this;
      this._interval = setInterval(function () {
        a.animate();
      }, this.settings.speed);
    },
    stop: function stop() {
      this._interval = clearInterval(this._interval);
    }
  }, a.fn[c] = function (d) {
    return this.each(function () {
      a.data(this, "plugin_" + c) || a.data(this, "plugin_" + c, new b(this, d));
    });
  };
}(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/ninsuo-symfony-collection/jquery.collection.js":
/*!**********************************************************************!*\
  !*** ./assets/vendor/ninsuo-symfony-collection/jquery.collection.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

/*
 * jquery.collection.js
 *
 * Copyright (c) 2042 alain tiemblo <alain at fuz dot org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
;

(function ($) {
  $.fn.collection = function (options) {
    var defaults = {
      container: 'body',
      allow_up: true,
      up: '<a href="#">&#x25B2;</a>',
      before_up: function before_up(collection, element) {
        return true;
      },
      after_up: function after_up(collection, element) {
        return true;
      },
      allow_down: true,
      down: '<a href="#">&#x25BC;</a>',
      before_down: function before_down(collection, element) {
        return true;
      },
      after_down: function after_down(collection, element) {
        return true;
      },
      allow_add: true,
      add: '<a href="#">[ + ]</a>',
      before_add: function before_add(collection, element) {
        return true;
      },
      after_add: function after_add(collection, element) {
        return true;
      },
      allow_remove: true,
      remove: '<a href="#">[ - ]</a>',
      before_remove: function before_remove(collection, element) {
        return true;
      },
      after_remove: function after_remove(collection, element) {
        return true;
      },
      allow_duplicate: false,
      duplicate: '<a href="#">[ # ]</a>',
      before_duplicate: function before_duplicate(collection, element) {
        return true;
      },
      after_duplicate: function after_duplicate(collection, element) {
        return true;
      },
      before_init: function before_init(collection) {},
      after_init: function after_init(collection) {},
      min: 0,
      max: 100,
      add_at_the_end: false,
      prefix: 'collection',
      prototype_name: '__name__',
      name_prefix: null,
      elements_selector: '> div, > fieldset',
      elements_parent_selector: '%id%',
      children: null,
      init_with_n_elements: 0,
      hide_useless_buttons: true,
      drag_drop: true,
      drag_drop_options: {
        'placeholder': 'ui-state-highlight'
      },
      drag_drop_start: function drag_drop_start(event, ui) {
        return true;
      },
      drag_drop_update: function drag_drop_update(event, ui) {
        return true;
      },
      custom_add_location: false,
      action_container_tag: 'div',
      fade_in: true,
      fade_out: true,
      position_field_selector: null,
      preserve_names: false
    }; // used to generate random id attributes when required and missing

    var randomNumber = function randomNumber() {
      var rand = '' + Math.random() * 1000 * new Date().getTime();
      return rand.replace('.', '').split('').sort(function () {
        return 0.5 - Math.random();
      }).join('');
    }; // return an element's id, after generating one when missing


    var getOrCreateId = function getOrCreateId(prefix, obj) {
      if (!obj.attr('id')) {
        var generated_id;

        do {
          generated_id = prefix + '_' + randomNumber();
        } while ($('#' + generated_id).length > 0);

        obj.attr('id', generated_id);
      }

      return obj.attr('id');
    }; // return a field value whatever the field type


    var getFieldValue = function getFieldValue(selector) {
      try {
        var jqElem = $(selector);
      } catch (e) {
        return null;
      }

      if (jqElem.length === 0) {
        return null;
      } else if (jqElem.is('input[type="checkbox"]')) {
        return jqElem.prop('checked') === true ? true : false;
      } else if (jqElem.is('input[type="radio"]') && jqElem.attr('name') !== undefined) {
        return $('input[name="' + jqElem.attr('name') + '"]:checked').val();
      } else if (jqElem.prop('value') !== undefined) {
        return jqElem.val();
      } else {
        return jqElem.html();
      }
    }; // set a field value in accordance to the field type


    var putFieldValue = function putFieldValue(selector, value, physical) {
      try {
        var jqElem = $(selector);
      } catch (e) {
        return;
      }

      if (jqElem.length === 0) {
        return;
      } else if (jqElem.is('input[type="checkbox"]')) {
        if (value) {
          jqElem.attr('checked', true);
        } else {
          jqElem.removeAttr('checked');
        }
      } else if (jqElem.prop('value') !== undefined) {
        if (physical) {
          jqElem.attr('value', value);
        } else {
          jqElem.val(value);
        }
      } else {
        jqElem.html(value);
      }
    }; // a callback set in an event will be considered failed if it
    // returns false, null, or 0.


    var trueOrUndefined = function trueOrUndefined(value) {
      return undefined === value || value;
    }; // used to change element indexes in arbitary id attributes


    var pregQuote = function pregQuote(string) {
      return (string + '').replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
    }; // if we need to change CollectionType_field_42_value to CollectionType_field_84_value, this method
    // will change it in id="CollectionType_field_42_value", but also data-id="CollectionType_field_42_value"
    // or anywhere else just in case it could be used otherwise.


    var replaceAttrData = function replaceAttrData(elements, index, toReplace, replaceWith) {
      var replaceAttrDataNode = function replaceAttrDataNode(node) {
        var jqNode = $(node);

        if (_typeof(node) === 'object' && 'attributes' in node) {
          $.each(node.attributes, function (i, attrib) {
            if ($.type(attrib.value) === 'string') {
              jqNode.attr(attrib.name.replace(toReplace, replaceWith), attrib.value.replace(toReplace, replaceWith));
            }
          });
        }

        if (jqNode.length > 0) {
          $.each(jqNode.data(), function (name, value) {
            if ($.type(value) === 'string') {
              jqNode.data(name.replace(toReplace, replaceWith), value.replace(toReplace, replaceWith));
            }
          });
        }
      };

      var element = elements.eq(index);
      replaceAttrDataNode(element[0]);
      element.find('*').each(function () {
        replaceAttrDataNode(this);
      });
    }; // replace element names and indexes in the collection, in Symfony, names are always in format
    // CollectionType[field][42][value] and ids are in format CollectionType_field_42_value;
    // so we need to change both.


    var changeElementIndex = function changeElementIndex(collection, elements, settings, index, oldIndex, newIndex) {
      var toReplace = new RegExp(pregQuote(settings.name_prefix + '[' + oldIndex + ']'), 'g');
      var replaceWith = settings.name_prefix + '[' + newIndex + ']';

      if (settings.children) {
        $.each(settings.children, function (key, child) {
          var childCollection = collection.find(child.selector).eq(index);
          var childSettings = childCollection.data('collection-settings');

          if (childSettings) {
            childSettings.name_prefix = childSettings.name_prefix.replace(toReplace, replaceWith);
            childCollection.data('collection-settings', childSettings);
          }
        });
      }

      replaceAttrData(elements, index, toReplace, replaceWith);
      toReplace = new RegExp(pregQuote(collection.attr('id') + '_' + oldIndex), 'g');
      replaceWith = collection.attr('id') + '_' + newIndex;

      if (settings.children) {
        $.each(settings.children, function (key, child) {
          var childCollection = collection.find(child.selector).eq(index);
          var childSettings = childCollection.data('collection-settings');

          if (childSettings) {
            childSettings.elements_parent_selector = childSettings.elements_parent_selector.replace(toReplace, replaceWith);
            childSettings.elements_selector = childSettings.elements_selector.replace(toReplace, replaceWith);
            childSettings.prefix = childSettings.prefix.replace(toReplace, replaceWith);
            childCollection.data('collection-settings', childSettings);
          }
        });
      }

      replaceAttrData(elements, index, toReplace, replaceWith);
    }; // same as above, but will replace element names and indexes in an html string instead
    // of in a dom element.


    var changeHtmlIndex = function changeHtmlIndex(collection, settings, html, oldIndex, newIndex, oldKey, newKey) {
      var toReplace = new RegExp(pregQuote(settings.name_prefix + '[' + oldKey + ']'), 'g');
      var replaceWith = settings.name_prefix + '[' + newKey + ']';
      html = html.replace(toReplace, replaceWith);
      toReplace = new RegExp(pregQuote(collection.attr('id') + '_' + oldIndex), 'g');
      replaceWith = collection.attr('id') + '_' + newIndex;
      html = html.replace(toReplace, replaceWith);
      return html;
    }; // sometimes, setting a value will only be made in memory and not
    // physically in the dom; and we need the full dom when we want
    // to duplicate a field.


    var putFieldValuesInDom = function putFieldValuesInDom(element) {
      $(element).find(':input').each(function (index, inputObj) {
        putFieldValue(inputObj, getFieldValue(inputObj), true);
      });
    }; // this method does the whole magic: in a collection, if we want to
    // move elements and keep element positions in the backend, we should
    // either move element names or element contents, but not both! thus,
    // if you just move elements in the dom, you keep field names and data
    // attached and nothing will change in the backend.


    var swapElements = function swapElements(collection, elements, oldIndex, newIndex) {
      var settings = collection.data('collection-settings');

      if (!settings.position_field_selector && !settings.preserve_names) {
        changeElementIndex(collection, elements, settings, oldIndex, oldIndex, '__swap__');
        changeElementIndex(collection, elements, settings, newIndex, newIndex, oldIndex);
        changeElementIndex(collection, elements, settings, oldIndex, '__swap__', newIndex);
      }

      elements.eq(oldIndex).insertBefore(elements.eq(newIndex));

      if (newIndex > oldIndex) {
        elements.eq(newIndex).insertBefore(elements.eq(oldIndex));
      } else {
        elements.eq(newIndex).insertAfter(elements.eq(oldIndex));
      }

      return collection.find(settings.elements_selector);
    }; // moving an element down of 3 rows means increasing its index of 3, and
    // decreasing the 2 ones between of 1. Example: 0-A 1-B 2-C 3-D:
    // moving B to 3 becomes 0-A 1-C 2-D 3-B


    var swapElementsUp = function swapElementsUp(collection, elements, settings, oldIndex, newIndex) {
      for (var i = oldIndex + 1; i <= newIndex; i++) {
        elements = swapElements(collection, elements, i, i - 1);
      }

      return collection.find(settings.elements_selector);
    }; // moving an element up of 3 rows means decreasing its index of 3, and
    // increasing the 2 ones between of 1. Example: 0-A 1-B 2-C 3-D:
    // moving D to 1 becomes 0-A 1-D 2-B 3-C


    var swapElementsDown = function swapElementsDown(collection, elements, settings, oldIndex, newIndex) {
      for (var i = oldIndex - 1; i >= newIndex; i--) {
        elements = swapElements(collection, elements, i, i + 1);
      }

      return collection.find(settings.elements_selector);
    }; // if we create an element at position 2, all element indexes from 2 to N
    // should be increased. for example, in 0-A 1-B 2-C 3-D, adding X at position
    // 1 will create 0-A 1-X 2-B 3-C 4-D


    var shiftElementsUp = function shiftElementsUp(collection, elements, settings, index) {
      for (var i = index + 1; i < elements.length; i++) {
        elements = swapElements(collection, elements, i - 1, i);
      }

      return collection.find(settings.elements_selector);
    }; // if we remove an element at position 3, all element indexes from 3 to N
    // should be decreased. for example, in 0-A 1-B 2-C 3-D, removing B will create
    // 0-A 1-C 2-D


    var shiftElementsDown = function shiftElementsDown(collection, elements, settings, index) {
      for (var i = elements.length - 2; i > index; i--) {
        elements = swapElements(collection, elements, i + 1, i);
      }

      return collection.find(settings.elements_selector);
    }; // this method creates buttons for each action, according to all options set
    // (buttons enabled, minimum/maximum of elements not yet reached, rescue
    // button creation when no more elements are remaining...)


    var dumpCollectionActions = function dumpCollectionActions(collection, settings, isInitialization, event) {
      var elementsParent = $(settings.elements_parent_selector);
      var init = elementsParent.find('.' + settings.prefix + '-tmp').length === 0;
      var elements = collection.find(settings.elements_selector); // add a rescue button that will appear only if collection is emptied

      if (settings.allow_add) {
        if (init) {
          elementsParent.append('<span class="' + settings.prefix + '-tmp"></span>');

          if (settings.add) {
            elementsParent.append($(settings.add).addClass(settings.prefix + '-action ' + settings.prefix + '-rescue-add').data('collection', collection.attr('id')));
          }
        }
      } // initializes the collection with a minimal number of elements


      if (isInitialization) {
        collection.data('collection-offset', elements.length);
        var container = $(settings.container);
        var button = collection.find('.' + settings.prefix + '-add, .' + settings.prefix + '-rescue-add, .' + settings.prefix + '-duplicate').first();
        var secure = 0;

        while (elements.length < settings.init_with_n_elements) {
          secure++;
          var element = elements.length > 0 ? elements.last() : undefined;
          var index = elements.length - 1;
          elements = doAdd(container, button, collection, settings, elements, element, index, false);

          if (secure > settings.init_with_n_elements) {
            console.error('Infinite loop, element selector (' + settings.elements_selector + ') not found !');
            break;
          }
        }

        collection.data('collection-offset', elements.length);
      } // make buttons appear/disappear in each elements of the collection according to options
      // (enabled, min/max...) and logic (for example, do not put a move up button on the first
      // element of the collection)


      elements.each(function (index) {
        var element = $(this);

        if (isInitialization) {
          element.data('index', index);
        }

        var actions = element.find('.' + settings.prefix + '-actions').addBack().filter('.' + settings.prefix + '-actions');

        if (actions.length === 0) {
          actions = $('<' + settings.action_container_tag + ' class="' + settings.prefix + '-actions"></' + settings.action_container_tag + '>');
          element.append(actions);
        }

        var delta = 0;

        if (event === 'remove' && settings.fade_out) {
          delta = 1;
        }

        var buttons = [{
          'enabled': settings.allow_remove,
          'selector': settings.prefix + '-remove',
          'html': settings.remove,
          'condition': elements.length - delta > settings.min
        }, {
          'enabled': settings.allow_up,
          'selector': settings.prefix + '-up',
          'html': settings.up,
          'condition': elements.length - delta > 1 && elements.index(element) - delta > 0
        }, {
          'enabled': settings.allow_down,
          'selector': settings.prefix + '-down',
          'html': settings.down,
          'condition': elements.length - delta > 1 && elements.index(element) !== elements.length - 1
        }, {
          'enabled': settings.allow_add && !settings.add_at_the_end && !settings.custom_add_location,
          'selector': settings.prefix + '-add',
          'html': settings.add,
          'condition': elements.length - delta < settings.max
        }, {
          'enabled': settings.allow_duplicate,
          'selector': settings.prefix + '-duplicate',
          'html': settings.duplicate,
          'condition': elements.length - delta < settings.max
        }];
        $.each(buttons, function (i, button) {
          if (button.enabled) {
            var action = element.find('.' + button.selector);

            if (action.length === 0 && button.html) {
              action = $(button.html).appendTo(actions).addClass(button.selector);
            }

            if (button.condition) {
              action.removeClass(settings.prefix + '-action-disabled');

              if (settings.hide_useless_buttons) {
                action.css('display', '');
              }
            } else {
              action.addClass(settings.prefix + '-action-disabled');

              if (settings.hide_useless_buttons) {
                action.css('display', 'none');
              }
            }

            action.addClass(settings.prefix + '-action').data('collection', collection.attr('id')).data('element', getOrCreateId(collection.attr('id') + '_' + index, element));
          } else {
            element.find('.' + button.selector).css('display', 'none');
          }
        });
      }); // elements.each
      // make the rescue button appear / disappear according to options (add_at_the_end) and
      // logic (no more elements on the collection)

      if (settings.allow_add) {
        var delta = 0;

        if (event === 'remove' && settings.fade_out) {
          delta = 1;
        }

        var rescueAdd = collection.find('.' + settings.prefix + '-rescue-add').css('display', '').removeClass(settings.prefix + '-action-disabled');
        var adds = collection.find('.' + settings.prefix + '-add');

        if (!settings.add_at_the_end && adds.length > delta || settings.custom_add_location) {
          rescueAdd.css('display', 'none');
        } else if (event === 'remove' && settings.fade_out) {
          rescueAdd.css('display', 'none');
          rescueAdd.fadeIn('fast');
        }

        if (elements.length - delta >= settings.max) {
          rescueAdd.addClass(settings.prefix + '-action-disabled');

          if (settings.hide_useless_buttons) {
            collection.find('.' + settings.prefix + '-add, .' + settings.prefix + '-rescue-add, .' + settings.prefix + '-duplicate').css('display', 'none');
          }
        }
      }
    }; // dumpCollectionActions
    // this plugin supports nested collections, and this method enables them when the
    // parent collection is initialized. see
    // http://symfony-collection.fuz.org/symfony3/advanced/collectionOfCollections


    var enableChildrenCollections = function enableChildrenCollections(collection, element, settings) {
      if (settings.children) {
        $.each(settings.children, function (index, childrenSettings) {
          if (!childrenSettings.selector) {
            console.log("jquery.collection.js: given collection " + collection.attr('id') + " has children collections, but children's root selector is undefined.");
            return true;
          }

          if (element !== null) {
            element.find(childrenSettings.selector).collection(childrenSettings);
          } else {
            collection.find(childrenSettings.selector).collection(childrenSettings);
          }
        });
      }
    }; // this method handles a click on "add" buttons, it increases all following element indexes of
    // 1 position and insert a new one in the index that becomes free. if click has been made on a
    // "duplicate" button, all element values are then inserted. finally, callbacks let user cancel
    // those actions if needed.


    var doAdd = function doAdd(container, that, collection, settings, elements, element, index, isDuplicate) {
      if (elements.length < settings.max && (isDuplicate && trueOrUndefined(settings.before_duplicate(collection, element)) || trueOrUndefined(settings.before_add(collection, element)))) {
        var prototype = collection.data('prototype');
        var freeIndex = collection.data('collection-offset');
        collection.data('collection-offset', freeIndex + 1);

        if (index === -1) {
          index = elements.length - 1;
        }

        var regexp = new RegExp(pregQuote(settings.prototype_name), 'g');
        var freeKey = freeIndex;

        if (settings.preserve_names) {
          freeKey = collection.data('collection-free-key');

          if (freeKey === undefined) {
            freeKey = findFreeNumericKey(settings, elements);
          }

          collection.data('collection-free-key', freeKey + 1);
        }

        var code = $(prototype.replace(regexp, freeKey)).data('index', freeIndex);
        setRightPrefix(settings, code);
        var elementsParent = $(settings.elements_parent_selector);
        var tmp = elementsParent.find('> .' + settings.prefix + '-tmp');
        var id = $(code).find('[id]').first().attr('id');

        if (isDuplicate) {
          var oldElement = elements.eq(index);
          putFieldValuesInDom(oldElement);
          var oldHtml = $("<div/>").append(oldElement.clone()).html();
          var oldIndex = settings.preserve_names || settings.position_field_selector ? oldElement.data('index') : index;
          var oldKey = settings.preserve_names ? getElementKey(settings, oldElement) : oldIndex;
          var newHtml = changeHtmlIndex(collection, settings, oldHtml, oldIndex, freeIndex, oldKey, freeKey);
          code = $('<div/>').html(newHtml).contents().data('index', freeIndex);

          if (settings.fade_in) {
            code.hide();
          }

          tmp.before(code).find(settings.prefix + '-actions').remove();
        } else {
          if (settings.fade_in) {
            code.hide();
          }

          tmp.before(code);
        }

        elements = collection.find(settings.elements_selector);
        var action = code.find('.' + settings.prefix + '-add, .' + settings.prefix + '-duplicate');

        if (action.length > 0) {
          action.addClass(settings.prefix + '-action').data('collection', collection.attr('id'));
        }

        if (!settings.add_at_the_end && index + 1 !== freeIndex) {
          elements = doMove(collection, settings, elements, code, freeIndex, index + 1);
        } else {
          dumpCollectionActions(collection, settings, false);
        }

        enableChildrenCollections(collection, code, settings);

        if (isDuplicate && !trueOrUndefined(settings.after_duplicate(collection, code)) || !trueOrUndefined(settings.after_add(collection, code))) {
          if (index !== -1) {
            elements = shiftElementsUp(collection, elements, settings, index + 1);
          }

          code.remove();
        }
      }

      if (code !== undefined && settings.fade_in) {
        code.fadeIn('fast', function () {
          if (settings.position_field_selector) {
            doRewritePositions(settings, elements);
          }
        });
      } else {
        if (settings.position_field_selector) {
          return doRewritePositions(settings, elements);
        }
      }

      return elements;
    }; // removes the current element when clicking on a "delete" button and decrease all following
    // indexes from 1 position.


    var doDelete = function doDelete(collection, settings, elements, element, index) {
      if (elements.length > settings.min && trueOrUndefined(settings.before_remove(collection, element))) {
        var deletion = function deletion() {
          var toDelete = element;

          if (!settings.preserve_names) {
            elements = shiftElementsUp(collection, elements, settings, index);
            toDelete = elements.last();
          }

          var backup = toDelete.clone({
            withDataAndEvents: true
          }).show();
          toDelete.remove();

          if (!trueOrUndefined(settings.after_remove(collection, backup))) {
            var elementsParent = $(settings.elements_parent_selector);
            elementsParent.find('> .' + settings.prefix + '-tmp').before(backup);
            elements = collection.find(settings.elements_selector);
            elements = shiftElementsDown(collection, elements, settings, index - 1);
          }

          if (settings.position_field_selector) {
            doRewritePositions(settings, elements);
          }
        };

        if (settings.fade_out) {
          element.fadeOut('fast', function () {
            deletion();
          });
        } else {
          deletion();
        }
      }

      return elements;
    }; // reverse current element and the previous one (so the current element
    // appears one place higher)


    var doUp = function doUp(collection, settings, elements, element, index) {
      if (index !== 0 && trueOrUndefined(settings.before_up(collection, element))) {
        elements = swapElements(collection, elements, index, index - 1);

        if (!trueOrUndefined(settings.after_up(collection, element))) {
          elements = swapElements(collection, elements, index - 1, index);
        }
      }

      if (settings.position_field_selector) {
        return doRewritePositions(settings, elements);
      }

      return elements;
    }; // reverse the current element and the next one (so the current element
    // appears one place lower)


    var doDown = function doDown(collection, settings, elements, element, index) {
      if (index !== elements.length - 1 && trueOrUndefined(settings.before_down(collection, element))) {
        elements = swapElements(collection, elements, index, index + 1);

        if (!trueOrUndefined(settings.after_down(collection, elements))) {
          elements = swapElements(collection, elements, index + 1, index);
        }
      }

      if (settings.position_field_selector) {
        return doRewritePositions(settings, elements);
      }

      return elements;
    }; // move an element from a position to an arbitrary new position


    var doMove = function doMove(collection, settings, elements, element, oldIndex, newIndex) {
      if (1 === Math.abs(newIndex - oldIndex)) {
        elements = swapElements(collection, elements, oldIndex, newIndex);

        if (!(newIndex - oldIndex > 0 ? trueOrUndefined(settings.after_up(collection, element)) : trueOrUndefined(settings.after_down(collection, element)))) {
          elements = swapElements(collection, elements, newIndex, oldIndex);
        }
      } else {
        if (oldIndex < newIndex) {
          elements = swapElementsUp(collection, elements, settings, oldIndex, newIndex);

          if (!(newIndex - oldIndex > 0 ? trueOrUndefined(settings.after_up(collection, element)) : trueOrUndefined(settings.after_down(collection, element)))) {
            elements = swapElementsDown(collection, elements, settings, newIndex, oldIndex);
          }
        } else {
          elements = swapElementsDown(collection, elements, settings, oldIndex, newIndex);

          if (!(newIndex - oldIndex > 0 ? trueOrUndefined(settings.after_up(collection, element)) : trueOrUndefined(settings.after_down(collection, element)))) {
            elements = swapElementsUp(collection, elements, settings, newIndex, oldIndex);
          }
        }
      }

      dumpCollectionActions(collection, settings, false);

      if (settings.position_field_selector) {
        return doRewritePositions(settings, elements);
      }

      return elements;
    };

    var doRewritePositions = function doRewritePositions(settings, elements) {
      $(elements).each(function () {
        var element = $(this);
        putFieldValue(element.find(settings.position_field_selector), elements.index(element));
      });
      return elements;
    };

    var getElementKey = function getElementKey(settings, element) {
      var name = element.find(':input[name^="' + settings.name_prefix + '["]').attr('name');
      return name.slice(settings.name_prefix.length + 1).split(']', 1)[0];
    };

    var findFreeNumericKey = function findFreeNumericKey(settings, elements) {
      var freeKey = 0;
      elements.each(function () {
        var key = getElementKey(settings, $(this));

        if (/^0|[1-9]\d*$/.test(key) && key >= freeKey) {
          freeKey = Number(key) + 1;
        }
      });
      return freeKey;
    };

    var setRightPrefix = function setRightPrefix(settings, container) {
      var suffixes = ['-action', '-action-disabled', '-actions', '-add', '-down', '-duplicate', '-remove', '-rescue-add', '-tmp', '-up'];
      $.each(suffixes, function () {
        var suffix = this;
        container.each(function () {
          var that = $(this);

          if (that.hasClass(settings.user_prefix + suffix)) {
            that.addClass(settings.prefix + suffix);
          }

          that.find('*').each(function () {
            var here = $(this);

            if (here.hasClass(settings.user_prefix + suffix)) {
              here.addClass(settings.prefix + suffix);
            }
          });
        });
      });
    }; // we're in a $.fn., so in $('.collection').collection(), $(this) equals $('.collection')


    var elems = $(this); // at least one, but why not several collections should be raised

    if (elems.length === 0) {
      console.log("jquery.collection.js: given collection selector does not exist.");
      return false;
    }

    elems.each(function () {
      var settings = $.extend(true, {}, defaults, options); // usage of $.fn.on events using a static container just in case there would be some
      // ajax interactions inside the collection

      if ($(settings.container).length === 0) {
        console.log("jquery.collection.js: a container should exist to handle events (basically, a <body> tag).");
        return false;
      } // it is possible to use this plugin with a selector that will contain the collection id
      // in a data attribute


      var elem = $(this);

      if (elem.data('collection') !== undefined) {
        var collection = $('#' + elem.data('collection'));

        if (collection.length === 0) {
          console.log("jquery.collection.js: given collection id does not exist.");
          return true;
        }
      } else {
        collection = elem;
      }

      collection = $(collection); // when adding elements to a collection, we should be aware of the node that will contain them

      settings.elements_parent_selector = settings.elements_parent_selector.replace('%id%', '#' + getOrCreateId('', collection));

      if (!settings.elements_parent_selector) {
        settings.elements_parent_selector = '#' + getOrCreateId('', collection);

        if ($(settings.elements_parent_selector).length === 0) {
          console.log("jquery.collection.js: given elements parent selector does not return any object.");
          return true;
        }
      } // On nested collections, prefix is the same for all children leading to very
      // random and unexepcted issues, so we merge prefix with current collection id.


      settings.user_prefix = settings.prefix;
      settings.prefix = collection.attr('id') + '-' + settings.user_prefix;
      setRightPrefix(settings, collection); // enforcing logic between options

      if (!settings.allow_add) {
        settings.allow_duplicate = false;
        settings.add_at_the_end = false;
      }

      if (settings.init_with_n_elements > settings.max) {
        settings.init_with_n_elements = settings.max;
      }

      if (settings.min && (!settings.init_with_n_elements || settings.init_with_n_elements < settings.min)) {
        settings.init_with_n_elements = settings.min;
      }

      if (!settings.action_container_tag) {
        console.log("jquery.collection.js: action_container_tag needs to be set.");
        return true;
      } // user callback


      settings.before_init(collection); // prototype required to create new elements in the collection

      if (collection.data('prototype') === null) {
        console.log("jquery.collection.js: given collection field has no prototype, check that your field has the prototype option set to true.");
        return true;
      } // all the following data attributes are automatically available thanks to
      // jquery.collection.html.twig form theme


      if (collection.data('prototype-name') !== undefined) {
        settings.prototype_name = collection.data('prototype-name');
      }

      if (collection.data('allow-add') !== undefined) {
        settings.allow_add = collection.data('allow-add');
        settings.allow_duplicate = collection.data('allow-add') ? settings.allow_duplicate : false;
      }

      if (collection.data('allow-remove') !== undefined) {
        settings.allow_remove = collection.data('allow-remove');
      }

      if (collection.data('name-prefix') !== undefined) {
        settings.name_prefix = collection.data('name-prefix');
      } // prototype-name required for nested collections, where collection id prefix
      // isn't guessable (see https://github.com/symfony/symfony/issues/13837)


      if (!settings.name_prefix) {
        console.log("jquery.collection.js: the prefix used in descendant field names is mandatory, you can set it using 2 ways:");
        console.log("jquery.collection.js: - use the form theme given with this plugin source");
        console.log("jquery.collection.js: - set name_prefix option to  '{{ formView.myCollectionField.vars.full_name }}'");
        return true;
      } // if preserve_names option is set, we should enforce many options to avoid
      // having inconsistencies between the UI and the Symfony result


      if (settings.preserve_names) {
        settings.allow_up = false;
        settings.allow_down = false;
        settings.drag_drop = false;
        settings.add_at_the_end = true;
      } // drag & drop support: this is a bit more complex than pressing "up" or
      // "down" buttons because we can move elements more than one place ahead
      // or below...


      if (typeof jQuery.ui !== 'undefined' && typeof jQuery.ui.sortable !== 'undefined' && collection.data('sortable')) {
        collection.sortable('disable');
      }

      if (settings.drag_drop && settings.allow_up && settings.allow_down) {
        var oldPosition;
        var newPosition;

        if (typeof jQuery.ui === 'undefined' || typeof jQuery.ui.sortable === 'undefined') {
          settings.drag_drop = false;
        } else {
          collection.sortable($.extend(true, {}, {
            start: function start(event, ui) {
              var elements = collection.find(settings.elements_selector);
              var element = ui.item;
              var that = $(this);

              if (!trueOrUndefined(settings.drag_drop_start(event, ui, elements, element))) {
                that.sortable("cancel");
                return;
              }

              ui.placeholder.height(ui.item.height());
              ui.placeholder.width(ui.item.width());
              oldPosition = elements.index(element);
            },
            update: function update(event, ui) {
              var elements = collection.find(settings.elements_selector);
              var element = ui.item;
              var that = $(this);
              that.sortable("cancel");

              if (false === settings.drag_drop_update(event, ui, elements, element) || !(newPosition - oldPosition > 0 ? trueOrUndefined(settings.before_up(collection, element)) : trueOrUndefined(settings.before_down(collection, element)))) {
                return;
              }

              newPosition = elements.index(element);
              elements = collection.find(settings.elements_selector);
              doMove(collection, settings, elements, element, oldPosition, newPosition);
            }
          }, settings.drag_drop_options));
        }
      }

      collection.data('collection-settings', settings); // events on buttons using a "static" container so even newly
      // created/ajax downloaded buttons doesn't need further initialization

      var container = $(settings.container);
      container.off('click', '.' + settings.prefix + '-action').on('click', '.' + settings.prefix + '-action', function (e) {
        var that = $(this);
        var collection = $('#' + that.data('collection'));
        var settings = collection.data('collection-settings');

        if (undefined === settings) {
          var collection = $('#' + that.data('collection')).find('.' + that.data('collection') + '-collection');
          var settings = collection.data('collection-settings');

          if (undefined === settings) {
            throw "Can't find collection: " + that.data('collection');
          }
        }

        var elements = collection.find(settings.elements_selector);
        var element = that.data('element') ? $('#' + that.data('element')) : undefined;
        var index = element && element.length ? elements.index(element) : -1;
        var event = null;
        var isDuplicate = that.is('.' + settings.prefix + '-duplicate');

        if ((that.is('.' + settings.prefix + '-add') || that.is('.' + settings.prefix + '-rescue-add') || isDuplicate) && settings.allow_add) {
          event = 'add';
          elements = doAdd(container, that, collection, settings, elements, element, index, isDuplicate);
        }

        if (that.is('.' + settings.prefix + '-remove') && settings.allow_remove) {
          event = 'remove';
          elements = doDelete(collection, settings, elements, element, index);
        }

        if (that.is('.' + settings.prefix + '-up') && settings.allow_up) {
          event = 'up';
          elements = doUp(collection, settings, elements, element, index);
        }

        if (that.is('.' + settings.prefix + '-down') && settings.allow_down) {
          event = 'down';
          elements = doDown(collection, settings, elements, element, index);
        }

        dumpCollectionActions(collection, settings, false, event);
        e.preventDefault();
      }); // .on

      dumpCollectionActions(collection, settings, true);
      enableChildrenCollections(collection, null, settings); // if collection elements are given in the wrong order, plugin
      // must reorder them graphically

      if (settings.position_field_selector) {
        var array = [];
        var elements = collection.find(settings.elements_selector);
        elements.each(function (index) {
          var that = $(this);
          array.push({
            position: parseFloat(getFieldValue(that.find(settings.position_field_selector))),
            element: that
          });
        });

        var sorter = function sorter(a, b) {
          return a.position < b.position ? -1 : a.position > b.position ? 1 : 0;
        };

        array.sort(sorter);
        $.each(array, function (newIndex, object) {
          var ids = [];
          $(elements).each(function (index) {
            ids.push($(this).attr('id'));
          });
          var element = object.element;
          var oldIndex = $.inArray(element.attr('id'), ids);

          if (newIndex !== oldIndex) {
            elements = doMove(collection, settings, elements, element, oldIndex, newIndex);
            putFieldValue(element.find(settings.position_field_selector), elements.index(element));
          }
        });
      } // if (settings.position_field_selector) {


      settings.after_init(collection);
    }); // elem.each

    return true;
  }; // $.fn.collection

})(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/owlcarousel/assets/owl.carousel.min.css":
/*!***************************************************************!*\
  !*** ./assets/vendor/owlcarousel/assets/owl.carousel.min.css ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/vendor/owlcarousel/assets/owl.theme.default.min.css":
/*!********************************************************************!*\
  !*** ./assets/vendor/owlcarousel/assets/owl.theme.default.min.css ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/vendor/owlcarousel/owl.carousel.min.js":
/*!*******************************************************!*\
  !*** ./assets/vendor/owlcarousel/owl.carousel.min.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery, jQuery) {function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");

__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");

__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.object.get-own-property-names.js */ "./node_modules/core-js/modules/es.object.get-own-property-names.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */
!function (a, b, c, d) {
  function e(b, c) {
    this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = {
      time: null,
      target: null,
      pointer: null,
      stage: {
        start: null,
        current: null
      },
      direction: null
    }, this._states = {
      current: {},
      tags: {
        initializing: ["busy"],
        animating: ["busy"],
        dragging: ["interacting"]
      }
    }, a.each(["onResize", "onThrottledResize"], a.proxy(function (b, c) {
      this._handlers[c] = a.proxy(this[c], this);
    }, this)), a.each(e.Plugins, a.proxy(function (a, b) {
      this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this);
    }, this)), a.each(e.Workers, a.proxy(function (b, c) {
      this._pipe.push({
        filter: c.filter,
        run: a.proxy(c.run, this)
      });
    }, this)), this.setup(), this.initialize();
  }

  e.Defaults = {
    items: 3,
    loop: !1,
    center: !1,
    rewind: !1,
    checkVisibility: !0,
    mouseDrag: !0,
    touchDrag: !0,
    pullDrag: !0,
    freeDrag: !1,
    margin: 0,
    stagePadding: 0,
    merge: !1,
    mergeFit: !0,
    autoWidth: !1,
    startPosition: 0,
    rtl: !1,
    smartSpeed: 250,
    fluidSpeed: !1,
    dragEndSpeed: !1,
    responsive: {},
    responsiveRefreshRate: 200,
    responsiveBaseElement: b,
    fallbackEasing: "swing",
    slideTransition: "",
    info: !1,
    nestedItemSelector: !1,
    itemElement: "div",
    stageElement: "div",
    refreshClass: "owl-refresh",
    loadedClass: "owl-loaded",
    loadingClass: "owl-loading",
    rtlClass: "owl-rtl",
    responsiveClass: "owl-responsive",
    dragClass: "owl-drag",
    itemClass: "owl-item",
    stageClass: "owl-stage",
    stageOuterClass: "owl-stage-outer",
    grabClass: "owl-grab"
  }, e.Width = {
    Default: "default",
    Inner: "inner",
    Outer: "outer"
  }, e.Type = {
    Event: "event",
    State: "state"
  }, e.Plugins = {}, e.Workers = [{
    filter: ["width", "settings"],
    run: function run() {
      this._width = this.$element.width();
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      a.current = this._items && this._items[this.relative(this._current)];
    }
  }, {
    filter: ["items", "settings"],
    run: function run() {
      this.$stage.children(".cloned").remove();
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      var b = this.settings.margin || "",
          c = !this.settings.autoWidth,
          d = this.settings.rtl,
          e = {
        width: "auto",
        "margin-left": d ? b : "",
        "margin-right": d ? "" : b
      };
      !c && this.$stage.children().css(e), a.css = e;
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
          c = null,
          d = this._items.length,
          e = !this.settings.autoWidth,
          f = [];

      for (a.items = {
        merge: !1,
        width: b
      }; d--;) {
        c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width();
      }

      this._widths = f;
    }
  }, {
    filter: ["items", "settings"],
    run: function run() {
      var b = [],
          c = this._items,
          d = this.settings,
          e = Math.max(2 * d.items, 4),
          f = 2 * Math.ceil(c.length / 2),
          g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0,
          h = "",
          i = "";

      for (g /= 2; g > 0;) {
        b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i, g -= 1;
      }

      this._clones = b, a(h).addClass("cloned").appendTo(this.$stage), a(i).addClass("cloned").prependTo(this.$stage);
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run() {
      for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) {
        d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a);
      }

      this._coordinates = f;
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run() {
      var a = this.settings.stagePadding,
          b = this._coordinates,
          c = {
        width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a,
        "padding-left": a || "",
        "padding-right": a || ""
      };
      this.$stage.css(c);
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      var b = this._coordinates.length,
          c = !this.settings.autoWidth,
          d = this.$stage.children();
      if (c && a.items.merge) for (; b--;) {
        a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css);
      } else c && (a.css.width = a.items.width, d.css(a.css));
    }
  }, {
    filter: ["items"],
    run: function run() {
      this._coordinates.length < 1 && this.$stage.removeAttr("style");
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function run(a) {
      a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current);
    }
  }, {
    filter: ["position"],
    run: function run() {
      this.animate(this.coordinates(this._current));
    }
  }, {
    filter: ["width", "position", "items", "settings"],
    run: function run() {
      var a,
          b,
          c,
          d,
          e = this.settings.rtl ? 1 : -1,
          f = 2 * this.settings.stagePadding,
          g = this.coordinates(this.current()) + f,
          h = g + this.width() * e,
          i = [];

      for (c = 0, d = this._coordinates.length; c < d; c++) {
        a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) && i.push(c);
      }

      this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active"), this.$stage.children(".center").removeClass("center"), this.settings.center && this.$stage.children().eq(this.current()).addClass("center");
    }
  }], e.prototype.initializeStage = function () {
    this.$stage = this.$element.find("." + this.settings.stageClass), this.$stage.length || (this.$element.addClass(this.options.loadingClass), this.$stage = a("<" + this.settings.stageElement + ">", {
      "class": this.settings.stageClass
    }).wrap(a("<div/>", {
      "class": this.settings.stageOuterClass
    })), this.$element.append(this.$stage.parent()));
  }, e.prototype.initializeItems = function () {
    var b = this.$element.find(".owl-item");
    if (b.length) return this._items = b.get().map(function (b) {
      return a(b);
    }), this._mergers = this._items.map(function () {
      return 1;
    }), void this.refresh();
    this.replace(this.$element.children().not(this.$stage.parent())), this.isVisible() ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);
  }, e.prototype.initialize = function () {
    if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is("pre-loading")) {
      var a, b, c;
      a = this.$element.find("img"), b = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d, c = this.$element.children(b).width(), a.length && c <= 0 && this.preloadAutoWidthImages(a);
    }

    this.initializeStage(), this.initializeItems(), this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized");
  }, e.prototype.isVisible = function () {
    return !this.settings.checkVisibility || this.$element.is(":visible");
  }, e.prototype.setup = function () {
    var b = this.viewport(),
        c = this.options.responsive,
        d = -1,
        e = null;
    c ? (a.each(c, function (a) {
      a <= b && a > d && (d = Number(a));
    }), e = a.extend({}, this.options, c[d]), "function" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d))) : e = a.extend({}, this.options), this.trigger("change", {
      property: {
        name: "settings",
        value: e
      }
    }), this._breakpoint = d, this.settings = e, this.invalidate("settings"), this.trigger("changed", {
      property: {
        name: "settings",
        value: this.settings
      }
    });
  }, e.prototype.optionsLogic = function () {
    this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1);
  }, e.prototype.prepare = function (b) {
    var c = this.trigger("prepare", {
      content: b
    });
    return c.data || (c.data = a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b)), this.trigger("prepared", {
      content: c.data
    }), c.data;
  }, e.prototype.update = function () {
    for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) {
      return this[a];
    }, this._invalidated), e = {}; b < c;) {
      (this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++;
    }

    this._invalidated = {}, !this.is("valid") && this.enter("valid");
  }, e.prototype.width = function (a) {
    switch (a = a || e.Width.Default) {
      case e.Width.Inner:
      case e.Width.Outer:
        return this._width;

      default:
        return this._width - 2 * this.settings.stagePadding + this.settings.margin;
    }
  }, e.prototype.refresh = function () {
    this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave("refreshing"), this.trigger("refreshed");
  }, e.prototype.onThrottledResize = function () {
    b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
  }, e.prototype.onResize = function () {
    return !!this._items.length && this._width !== this.$element.width() && !!this.isVisible() && (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized")));
  }, e.prototype.registerEventHandlers = function () {
    a.support.transition && this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this)), !1 !== this.settings.responsive && this.on(b, "resize", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("dragstart.owl.core selectstart.owl.core", function () {
      return !1;
    })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this)));
  }, e.prototype.onDragStart = function (b) {
    var d = null;
    3 !== b.which && (a.support.transform ? (d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","), d = {
      x: d[16 === d.length ? 12 : 4],
      y: d[16 === d.length ? 13 : 5]
    }) : (d = this.$stage.position(), d = {
      x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left,
      y: d.top
    }), this.is("animating") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === b.type), this.speed(0), this._drag.time = new Date().getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this)), a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function (b) {
      var d = this.difference(this._drag.pointer, this.pointer(b));
      a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is("valid") || (b.preventDefault(), this.enter("dragging"), this.trigger("drag"));
    }, this)));
  }, e.prototype.onDragMove = function (a) {
    var b = null,
        c = null,
        d = null,
        e = this.difference(this._drag.pointer, this.pointer(a)),
        f = this.difference(this._drag.stage.start, e);
    this.is("dragging") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x));
  }, e.prototype.onDragEnd = function (b) {
    var d = this.difference(this._drag.pointer, this.pointer(b)),
        e = this._drag.stage.current,
        f = d.x > 0 ^ this.settings.rtl ? "left" : "right";
    a(c).off(".owl.core"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate("position"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || new Date().getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function () {
      return !1;
    })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged"));
  }, e.prototype.closest = function (b, c) {
    var e = -1,
        f = 30,
        g = this.width(),
        h = this.coordinates();
    return this.settings.freeDrag || a.each(h, a.proxy(function (a, i) {
      return "left" === c && b > i - f && b < i + f ? e = a : "right" === c && b > i - g - f && b < i - g + f ? e = a + 1 : this.op(b, "<", i) && this.op(b, ">", h[a + 1] !== d ? h[a + 1] : i - g) && (e = "left" === c ? a + 1 : a), -1 === e;
    }, this)), this.settings.loop || (this.op(b, ">", h[this.minimum()]) ? e = b = this.minimum() : this.op(b, "<", h[this.maximum()]) && (e = b = this.maximum())), e;
  }, e.prototype.animate = function (b) {
    var c = this.speed() > 0;
    this.is("animating") && this.onTransitionEnd(), c && (this.enter("animating"), this.trigger("translate")), a.support.transform3d && a.support.transition ? this.$stage.css({
      transform: "translate3d(" + b + "px,0px,0px)",
      transition: this.speed() / 1e3 + "s" + (this.settings.slideTransition ? " " + this.settings.slideTransition : "")
    }) : c ? this.$stage.animate({
      left: b + "px"
    }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({
      left: b + "px"
    });
  }, e.prototype.is = function (a) {
    return this._states.current[a] && this._states.current[a] > 0;
  }, e.prototype.current = function (a) {
    if (a === d) return this._current;
    if (0 === this._items.length) return d;

    if (a = this.normalize(a), this._current !== a) {
      var b = this.trigger("change", {
        property: {
          name: "position",
          value: a
        }
      });
      b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate("position"), this.trigger("changed", {
        property: {
          name: "position",
          value: this._current
        }
      });
    }

    return this._current;
  }, e.prototype.invalidate = function (b) {
    return "string" === a.type(b) && (this._invalidated[b] = !0, this.is("valid") && this.leave("valid")), a.map(this._invalidated, function (a, b) {
      return b;
    });
  }, e.prototype.reset = function (a) {
    (a = this.normalize(a)) !== d && (this._speed = 0, this._current = a, this.suppress(["translate", "translated"]), this.animate(this.coordinates(a)), this.release(["translate", "translated"]));
  }, e.prototype.normalize = function (a, b) {
    var c = this._items.length,
        e = b ? 0 : this._clones.length;
    return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a;
  }, e.prototype.relative = function (a) {
    return a -= this._clones.length / 2, this.normalize(a, !0);
  }, e.prototype.maximum = function (a) {
    var b,
        c,
        d,
        e = this.settings,
        f = this._coordinates.length;
    if (e.loop) f = this._clones.length / 2 + this._items.length - 1;else if (e.autoWidth || e.merge) {
      if (b = this._items.length) for (c = this._items[--b].width(), d = this.$element.width(); b-- && !((c += this._items[b].width() + this.settings.margin) > d);) {
        ;
      }
      f = b + 1;
    } else f = e.center ? this._items.length - 1 : this._items.length - e.items;
    return a && (f -= this._clones.length / 2), Math.max(f, 0);
  }, e.prototype.minimum = function (a) {
    return a ? 0 : this._clones.length / 2;
  }, e.prototype.items = function (a) {
    return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]);
  }, e.prototype.mergers = function (a) {
    return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]);
  }, e.prototype.clones = function (b) {
    var c = this._clones.length / 2,
        e = c + this._items.length,
        f = function f(a) {
      return a % 2 == 0 ? e + a / 2 : c - (a + 1) / 2;
    };

    return b === d ? a.map(this._clones, function (a, b) {
      return f(b);
    }) : a.map(this._clones, function (a, c) {
      return a === b ? f(c) : null;
    });
  }, e.prototype.speed = function (a) {
    return a !== d && (this._speed = a), this._speed;
  }, e.prototype.coordinates = function (b) {
    var c,
        e = 1,
        f = b - 1;
    return b === d ? a.map(this._coordinates, a.proxy(function (a, b) {
      return this.coordinates(b);
    }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c));
  }, e.prototype.duration = function (a, b, c) {
    return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed);
  }, e.prototype.to = function (a, b) {
    var c = this.current(),
        d = null,
        e = a - this.relative(c),
        f = (e > 0) - (e < 0),
        g = this._items.length,
        h = this.minimum(),
        i = this.maximum();
    this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += -1 * f * g), a = c + e, (d = ((a - h) % g + g) % g + h) !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.isVisible() && this.update();
  }, e.prototype.next = function (a) {
    a = a || !1, this.to(this.relative(this.current()) + 1, a);
  }, e.prototype.prev = function (a) {
    a = a || !1, this.to(this.relative(this.current()) - 1, a);
  }, e.prototype.onTransitionEnd = function (a) {
    if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1;
    this.leave("animating"), this.trigger("translated");
  }, e.prototype.viewport = function () {
    var d;
    return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn("Can not detect viewport width."), d;
  }, e.prototype.replace = function (b) {
    this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find("." + this.settings.nestedItemSelector)), b.filter(function () {
      return 1 === this.nodeType;
    }).each(a.proxy(function (a, b) {
      b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1);
    }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate("items");
  }, e.prototype.add = function (b, c) {
    var e = this.relative(this._current);
    c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger("add", {
      content: b,
      position: c
    }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate("items"), this.trigger("added", {
      content: b,
      position: c
    });
  }, e.prototype.remove = function (a) {
    (a = this.normalize(a, !0)) !== d && (this.trigger("remove", {
      content: this._items[a],
      position: a
    }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate("items"), this.trigger("removed", {
      content: null,
      position: a
    }));
  }, e.prototype.preloadAutoWidthImages = function (b) {
    b.each(a.proxy(function (b, c) {
      this.enter("pre-loading"), c = a(c), a(new Image()).one("load", a.proxy(function (a) {
        c.attr("src", a.target.src), c.css("opacity", 1), this.leave("pre-loading"), !this.is("pre-loading") && !this.is("initializing") && this.refresh();
      }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina"));
    }, this));
  }, e.prototype.destroy = function () {
    this.$element.off(".owl.core"), this.$stage.off(".owl.core"), a(c).off(".owl.core"), !1 !== this.settings.responsive && (b.clearTimeout(this.resizeTimer), this.off(b, "resize", this._handlers.onThrottledResize));

    for (var d in this._plugins) {
      this._plugins[d].destroy();
    }

    this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$stage.remove(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel");
  }, e.prototype.op = function (a, b, c) {
    var d = this.settings.rtl;

    switch (b) {
      case "<":
        return d ? a > c : a < c;

      case ">":
        return d ? a < c : a > c;

      case ">=":
        return d ? a <= c : a >= c;

      case "<=":
        return d ? a >= c : a <= c;
    }
  }, e.prototype.on = function (a, b, c, d) {
    a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent("on" + b, c);
  }, e.prototype.off = function (a, b, c, d) {
    a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent("on" + b, c);
  }, e.prototype.trigger = function (b, c, d, f, g) {
    var h = {
      item: {
        count: this._items.length,
        index: this.current()
      }
    },
        i = a.camelCase(a.grep(["on", b, d], function (a) {
      return a;
    }).join("-").toLowerCase()),
        j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({
      relatedTarget: this
    }, h, c));
    return this._supress[b] || (a.each(this._plugins, function (a, b) {
      b.onTrigger && b.onTrigger(j);
    }), this.register({
      type: e.Type.Event,
      name: b
    }), this.$element.trigger(j), this.settings && "function" == typeof this.settings[i] && this.settings[i].call(this, j)), j;
  }, e.prototype.enter = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++;
    }, this));
  }, e.prototype.leave = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b]--;
    }, this));
  }, e.prototype.register = function (b) {
    if (b.type === e.Type.Event) {
      if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) {
        var c = a.event.special[b.name]._default;
        a.event.special[b.name]._default = function (a) {
          return !c || !c.apply || a.namespace && -1 !== a.namespace.indexOf("owl") ? a.namespace && a.namespace.indexOf("owl") > -1 : c.apply(this, arguments);
        }, a.event.special[b.name].owl = !0;
      }
    } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) {
      return a.inArray(c, this._states.tags[b.name]) === d;
    }, this)));
  }, e.prototype.suppress = function (b) {
    a.each(b, a.proxy(function (a, b) {
      this._supress[b] = !0;
    }, this));
  }, e.prototype.release = function (b) {
    a.each(b, a.proxy(function (a, b) {
      delete this._supress[b];
    }, this));
  }, e.prototype.pointer = function (a) {
    var c = {
      x: null,
      y: null
    };
    return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c;
  }, e.prototype.isNumeric = function (a) {
    return !isNaN(parseFloat(a));
  }, e.prototype.difference = function (a, b) {
    return {
      x: a.x - b.x,
      y: a.y - b.y
    };
  }, a.fn.owlCarousel = function (b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return this.each(function () {
      var d = a(this),
          f = d.data("owl.carousel");
      f || (f = new e(this, "object" == _typeof(b) && b), d.data("owl.carousel", f), a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function (b, c) {
        f.register({
          type: e.Type.Event,
          name: c
        }), f.$element.on(c + ".owl.carousel.core", a.proxy(function (a) {
          a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c]));
        }, f));
      })), "string" == typeof b && "_" !== b.charAt(0) && f[b].apply(f, c);
    });
  }, a.fn.owlCarousel.Constructor = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._interval = null, this._visible = null, this._handlers = {
      "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoRefresh && this.watch();
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };

  e.Defaults = {
    autoRefresh: !0,
    autoRefreshInterval: 500
  }, e.prototype.watch = function () {
    this._interval || (this._visible = this._core.isVisible(), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval));
  }, e.prototype.refresh = function () {
    this._core.isVisible() !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh());
  }, e.prototype.destroy = function () {
    var a, c;
    b.clearInterval(this._interval);

    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }

    for (c in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[c] && (this[c] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._loaded = [], this._handlers = {
      "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function (b) {
        if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && "position" == b.property.name || "initialized" == b.type)) {
          var c = this._core.settings,
              e = c.center && Math.ceil(c.items / 2) || c.items,
              f = c.center && -1 * e || 0,
              g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f,
              h = this._core.clones().length,
              i = a.proxy(function (a, b) {
            this.load(b);
          }, this);

          for (c.lazyLoadEager > 0 && (e += c.lazyLoadEager, c.loop && (g -= c.lazyLoadEager, e++)); f++ < e;) {
            this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++;
          }
        }
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };

  e.Defaults = {
    lazyLoad: !1,
    lazyLoadEager: 0
  }, e.prototype.load = function (c) {
    var d = this._core.$stage.children().eq(c),
        e = d && d.find(".owl-lazy");

    !e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d) {
      var e,
          f = a(d),
          g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src") || f.attr("data-srcset");
      this._core.trigger("load", {
        element: f,
        url: g
      }, "lazy"), f.is("img") ? f.one("load.owl.lazy", a.proxy(function () {
        f.css("opacity", 1), this._core.trigger("loaded", {
          element: f,
          url: g
        }, "lazy");
      }, this)).attr("src", g) : f.is("source") ? f.one("load.owl.lazy", a.proxy(function () {
        this._core.trigger("loaded", {
          element: f,
          url: g
        }, "lazy");
      }, this)).attr("srcset", g) : (e = new Image(), e.onload = a.proxy(function () {
        f.css({
          "background-image": 'url("' + g + '")',
          opacity: "1"
        }), this._core.trigger("loaded", {
          element: f,
          url: g
        }, "lazy");
      }, this), e.src = g);
    }, this)), this._loaded.push(d.get(0)));
  }, e.prototype.destroy = function () {
    var a, b;

    for (a in this.handlers) {
      this._core.$element.off(a, this.handlers[a]);
    }

    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(c) {
    this._core = c, this._previousHeight = null, this._handlers = {
      "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && this.update();
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && "position" === a.property.name && this.update();
      }, this),
      "loaded.owl.lazy": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update();
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._intervalId = null;
    var d = this;
    a(b).on("load", function () {
      d._core.settings.autoHeight && d.update();
    }), a(b).resize(function () {
      d._core.settings.autoHeight && (null != d._intervalId && clearTimeout(d._intervalId), d._intervalId = setTimeout(function () {
        d.update();
      }, 250));
    });
  };

  e.Defaults = {
    autoHeight: !1,
    autoHeightClass: "owl-height"
  }, e.prototype.update = function () {
    var b = this._core._current,
        c = b + this._core.settings.items,
        d = this._core.settings.lazyLoad,
        e = this._core.$stage.children().toArray().slice(b, c),
        f = [],
        g = 0;

    a.each(e, function (b, c) {
      f.push(a(c).height());
    }), g = Math.max.apply(null, f), g <= 1 && d && this._previousHeight && (g = this._previousHeight), this._previousHeight = g, this._core.$stage.parent().height(g).addClass(this._core.settings.autoHeightClass);
  }, e.prototype.destroy = function () {
    var a, b;

    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }

    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._videos = {}, this._playing = null, this._handlers = {
      "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.register({
          type: "state",
          name: "playing",
          tags: ["interacting"]
        });
      }, this),
      "resize.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault();
      }, this),
      "refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove();
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" === a.property.name && this._playing && this.stop();
      }, this),
      "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find(".owl-video");
          c.length && (c.css("display", "none"), this.fetch(c, a(b.content)));
        }
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function (a) {
      this.play(a);
    }, this));
  };

  e.Defaults = {
    video: !1,
    videoHeight: !1,
    videoWidth: !1
  }, e.prototype.fetch = function (a, b) {
    var c = function () {
      return a.attr("data-vimeo-id") ? "vimeo" : a.attr("data-vzaar-id") ? "vzaar" : "youtube";
    }(),
        d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id"),
        e = a.attr("data-width") || this._core.settings.videoWidth,
        f = a.attr("data-height") || this._core.settings.videoHeight,
        g = a.attr("href");

    if (!g) throw new Error("Missing video URL.");
    if (d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/), d[3].indexOf("youtu") > -1) c = "youtube";else if (d[3].indexOf("vimeo") > -1) c = "vimeo";else {
      if (!(d[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported.");
      c = "vzaar";
    }
    d = d[6], this._videos[g] = {
      type: c,
      id: d,
      width: e,
      height: f
    }, b.attr("data-video", g), this.thumbnail(a, this._videos[g]);
  }, e.prototype.thumbnail = function (b, c) {
    var d,
        e,
        f,
        g = c.width && c.height ? "width:" + c.width + "px;height:" + c.height + "px;" : "",
        h = b.find("img"),
        i = "src",
        j = "",
        k = this._core.settings,
        l = function l(c) {
      e = '<div class="owl-video-play-icon"></div>', d = k.lazyLoad ? a("<div/>", {
        "class": "owl-video-tn " + j,
        srcType: c
      }) : a("<div/>", {
        "class": "owl-video-tn",
        style: "opacity:1;background-image:url(" + c + ")"
      }), b.after(d), b.after(e);
    };

    if (b.wrap(a("<div/>", {
      "class": "owl-video-wrapper",
      style: g
    })), this._core.settings.lazyLoad && (i = "data-src", j = "owl-lazy"), h.length) return l(h.attr(i)), h.remove(), !1;
    "youtube" === c.type ? (f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg", l(f)) : "vimeo" === c.type ? a.ajax({
      type: "GET",
      url: "//vimeo.com/api/v2/video/" + c.id + ".json",
      jsonp: "callback",
      dataType: "jsonp",
      success: function success(a) {
        f = a[0].thumbnail_large, l(f);
      }
    }) : "vzaar" === c.type && a.ajax({
      type: "GET",
      url: "//vzaar.com/api/videos/" + c.id + ".json",
      jsonp: "callback",
      dataType: "jsonp",
      success: function success(a) {
        f = a.framegrab_url, l(f);
      }
    });
  }, e.prototype.stop = function () {
    this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), this._core.trigger("stopped", null, "video");
  }, e.prototype.play = function (b) {
    var c,
        d = a(b.target),
        e = d.closest("." + this._core.settings.itemClass),
        f = this._videos[e.attr("data-video")],
        g = f.width || "100%",
        h = f.height || this._core.$stage.height();

    this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), c = a('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'), c.attr("height", h), c.attr("width", g), "youtube" === f.type ? c.attr("src", "//www.youtube.com/embed/" + f.id + "?autoplay=1&rel=0&v=" + f.id) : "vimeo" === f.type ? c.attr("src", "//player.vimeo.com/video/" + f.id + "?autoplay=1") : "vzaar" === f.type && c.attr("src", "//view.vzaar.com/" + f.id + "/player?autoplay=true"), a(c).wrap('<div class="owl-video-frame" />').insertAfter(e.find(".owl-video")), this._playing = e.addClass("owl-video-playing"));
  }, e.prototype.isInFullScreen = function () {
    var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;
    return b && a(b).parent().hasClass("owl-video-frame");
  }, e.prototype.destroy = function () {
    var a, b;

    this._core.$element.off("click.owl.video");

    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }

    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Video = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = {
      "change.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value);
      }, this),
      "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function (a) {
        a.namespace && (this.swapping = "translated" == a.type);
      }, this),
      "translate.owl.carousel": a.proxy(function (a) {
        a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap();
      }, this)
    }, this.core.$element.on(this.handlers);
  };

  e.Defaults = {
    animateOut: !1,
    animateIn: !1
  }, e.prototype.swap = function () {
    if (1 === this.core.settings.items && a.support.animation && a.support.transition) {
      this.core.speed(0);
      var b,
          c = a.proxy(this.clear, this),
          d = this.core.$stage.children().eq(this.previous),
          e = this.core.$stage.children().eq(this.next),
          f = this.core.settings.animateIn,
          g = this.core.settings.animateOut;
      this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({
        left: b + "px"
      }).addClass("animated owl-animated-out").addClass(g)), f && e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f));
    }
  }, e.prototype.clear = function (b) {
    a(b.target).css({
      left: ""
    }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd();
  }, e.prototype.destroy = function () {
    var a, b;

    for (a in this.handlers) {
      this.core.$element.off(a, this.handlers[a]);
    }

    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Animate = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._call = null, this._time = 0, this._timeout = 0, this._paused = !0, this._handlers = {
      "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "settings" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && "position" === a.property.name && this._paused && (this._time = 0);
      }, this),
      "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoplay && this.play();
      }, this),
      "play.owl.autoplay": a.proxy(function (a, b, c) {
        a.namespace && this.play(b, c);
      }, this),
      "stop.owl.autoplay": a.proxy(function (a) {
        a.namespace && this.stop();
      }, this),
      "mouseover.owl.autoplay": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
      }, this),
      "mouseleave.owl.autoplay": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play();
      }, this),
      "touchstart.owl.core": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
      }, this),
      "touchend.owl.core": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this.play();
      }, this)
    }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options);
  };

  e.Defaults = {
    autoplay: !1,
    autoplayTimeout: 5e3,
    autoplayHoverPause: !1,
    autoplaySpeed: !1
  }, e.prototype._next = function (d) {
    this._call = b.setTimeout(a.proxy(this._next, this, d), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()), this._core.is("interacting") || c.hidden || this._core.next(d || this._core.settings.autoplaySpeed);
  }, e.prototype.read = function () {
    return new Date().getTime() - this._time;
  }, e.prototype.play = function (c, d) {
    var e;
    this._core.is("rotating") || this._core.enter("rotating"), c = c || this._core.settings.autoplayTimeout, e = Math.min(this._time % (this._timeout || c), c), this._paused ? (this._time = this.read(), this._paused = !1) : b.clearTimeout(this._call), this._time += this.read() % c - e, this._timeout = c, this._call = b.setTimeout(a.proxy(this._next, this, d), c - e);
  }, e.prototype.stop = function () {
    this._core.is("rotating") && (this._time = 0, this._paused = !0, b.clearTimeout(this._call), this._core.leave("rotating"));
  }, e.prototype.pause = function () {
    this._core.is("rotating") && !this._paused && (this._time = this.read(), this._paused = !0, b.clearTimeout(this._call));
  }, e.prototype.destroy = function () {
    var a, b;
    this.stop();

    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }

    for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  "use strict";

  var e = function e(b) {
    this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = {
      next: this._core.next,
      prev: this._core.prev,
      to: this._core.to
    }, this._handlers = {
      "prepared.owl.carousel": a.proxy(function (b) {
        b.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>");
      }, this),
      "added.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop());
      }, this),
      "remove.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1);
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" == a.property.name && this.draw();
      }, this),
      "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation"));
      }, this),
      "refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation"));
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers);
  };

  e.Defaults = {
    nav: !1,
    navText: ['<span aria-label="Previous">&#x2039;</span>', '<span aria-label="Next">&#x203a;</span>'],
    navSpeed: !1,
    navElement: 'button type="button" role="presentation"',
    navContainer: !1,
    navContainerClass: "owl-nav",
    navClass: ["owl-prev", "owl-next"],
    slideBy: 1,
    dotClass: "owl-dot",
    dotsClass: "owl-dots",
    dots: !0,
    dotsEach: !1,
    dotsData: !1,
    dotsSpeed: !1,
    dotsContainer: !1
  }, e.prototype.initialize = function () {
    var b,
        c = this._core.settings;
    this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled"), this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.prev(c.navSpeed);
    }, this)), this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.next(c.navSpeed);
    }, this)), c.dotsData || (this._templates = [a('<button role="button">').addClass(c.dotClass).append(a("<span>")).prop("outerHTML")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled"), this._controls.$absolute.on("click", "button", a.proxy(function (b) {
      var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();
      b.preventDefault(), this.to(d, c.dotsSpeed);
    }, this));

    for (b in this._overrides) {
      this._core[b] = a.proxy(this[b], this);
    }
  }, e.prototype.destroy = function () {
    var a, b, c, d, e;
    e = this._core.settings;

    for (a in this._handlers) {
      this.$element.off(a, this._handlers[a]);
    }

    for (b in this._controls) {
      "$relative" === b && e.navContainer ? this._controls[b].html("") : this._controls[b].remove();
    }

    for (d in this.overides) {
      this._core[d] = this._overrides[d];
    }

    for (c in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[c] && (this[c] = null);
    }
  }, e.prototype.update = function () {
    var a,
        b,
        c,
        d = this._core.clones().length / 2,
        e = d + this._core.items().length,
        f = this._core.maximum(!0),
        g = this._core.settings,
        h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;

    if ("page" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || "page" == g.slideBy) for (this._pages = [], a = d, b = 0, c = 0; a < e; a++) {
      if (b >= h || 0 === b) {
        if (this._pages.push({
          start: Math.min(f, a - d),
          end: a - d + h - 1
        }), Math.min(f, a - d) === f) break;
        b = 0, ++c;
      }

      b += this._core.mergers(this._core.relative(a));
    }
  }, e.prototype.draw = function () {
    var b,
        c = this._core.settings,
        d = this._core.items().length <= c.items,
        e = this._core.relative(this._core.current()),
        f = c.loop || c.rewind;

    this._controls.$relative.toggleClass("disabled", !c.nav || d), c.nav && (this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass("disabled", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join("")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active"));
  }, e.prototype.onTrigger = function (b) {
    var c = this._core.settings;
    b.page = {
      index: a.inArray(this.current(), this._pages),
      count: this._pages.length,
      size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items)
    };
  }, e.prototype.current = function () {
    var b = this._core.relative(this._core.current());

    return a.grep(this._pages, a.proxy(function (a, c) {
      return a.start <= b && a.end >= b;
    }, this)).pop();
  }, e.prototype.getPosition = function (b) {
    var c,
        d,
        e = this._core.settings;
    return "page" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c;
  }, e.prototype.next = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b);
  }, e.prototype.prev = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b);
  }, e.prototype.to = function (b, c, d) {
    var e;
    !d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c);
  }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  "use strict";

  var e = function e(c) {
    this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = {
      "initialized.owl.carousel": a.proxy(function (c) {
        c.namespace && "URLHash" === this._core.settings.startPosition && a(b).trigger("hashchange.owl.navigation");
      }, this),
      "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");
          if (!c) return;
          this._hashes[c] = b.content;
        }
      }, this),
      "changed.owl.carousel": a.proxy(function (c) {
        if (c.namespace && "position" === c.property.name) {
          var d = this._core.items(this._core.relative(this._core.current())),
              e = a.map(this._hashes, function (a, b) {
            return a === d ? b : null;
          }).join();

          if (!e || b.location.hash.slice(1) === e) return;
          b.location.hash = e;
        }
      }, this)
    }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on("hashchange.owl.navigation", a.proxy(function (a) {
      var c = b.location.hash.substring(1),
          e = this._core.$stage.children(),
          f = this._hashes[c] && e.index(this._hashes[c]);

      f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0);
    }, this));
  };

  e.Defaults = {
    URLhashListener: !1
  }, e.prototype.destroy = function () {
    var c, d;
    a(b).off("hashchange.owl.navigation");

    for (c in this._handlers) {
      this._core.$element.off(c, this._handlers[c]);
    }

    for (d in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[d] && (this[d] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Hash = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  function e(b, c) {
    var e = !1,
        f = b.charAt(0).toUpperCase() + b.slice(1);
    return a.each((b + " " + h.join(f + " ") + f).split(" "), function (a, b) {
      if (g[b] !== d) return e = !c || b, !1;
    }), e;
  }

  function f(a) {
    return e(a, !0);
  }

  var g = a("<support>").get(0).style,
      h = "Webkit Moz O ms".split(" "),
      i = {
    transition: {
      end: {
        WebkitTransition: "webkitTransitionEnd",
        MozTransition: "transitionend",
        OTransition: "oTransitionEnd",
        transition: "transitionend"
      }
    },
    animation: {
      end: {
        WebkitAnimation: "webkitAnimationEnd",
        MozAnimation: "animationend",
        OAnimation: "oAnimationEnd",
        animation: "animationend"
      }
    }
  },
      j = {
    csstransforms: function csstransforms() {
      return !!e("transform");
    },
    csstransforms3d: function csstransforms3d() {
      return !!e("perspective");
    },
    csstransitions: function csstransitions() {
      return !!e("transition");
    },
    cssanimations: function cssanimations() {
      return !!e("animation");
    }
  };
  j.csstransitions() && (a.support.transition = new String(f("transition")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f("animation")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f("transform")), a.support.transform3d = j.csstransforms3d());
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/photoswipe/default-skin/default-skin.css":
/*!****************************************************************!*\
  !*** ./assets/vendor/photoswipe/default-skin/default-skin.css ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/vendor/photoswipe/photoswipe-ui-default.min.js":
/*!***************************************************************!*\
  !*** ./assets/vendor/photoswipe/photoswipe-ui-default.min.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*! PhotoSwipe Default UI - 4.1.3 - 2019-01-08
* http://photoswipe.com
* Copyright (c) 2019 Dmitry Semenov; */
!function (a, b) {
   true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  "use strict";

  var a = function a(_a, b) {
    var c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u,
        v = this,
        w = !1,
        x = !0,
        y = !0,
        z = {
      barsSize: {
        top: 44,
        bottom: "auto"
      },
      closeElClasses: ["item", "caption", "zoom-wrap", "ui", "top-bar"],
      timeToIdle: 4e3,
      timeToIdleOutside: 1e3,
      loadingIndicatorDelay: 1e3,
      addCaptionHTMLFn: function addCaptionHTMLFn(a, b) {
        return a.title ? (b.children[0].innerHTML = a.title, !0) : (b.children[0].innerHTML = "", !1);
      },
      closeEl: !0,
      captionEl: !0,
      fullscreenEl: !0,
      zoomEl: !0,
      shareEl: !0,
      counterEl: !0,
      arrowEl: !0,
      preloaderEl: !0,
      tapToClose: !1,
      tapToToggleControls: !0,
      clickToCloseNonZoomable: !0,
      shareButtons: [{
        id: "facebook",
        label: "Share on Facebook",
        url: "https://www.facebook.com/sharer/sharer.php?u={{url}}"
      }, {
        id: "twitter",
        label: "Tweet",
        url: "https://twitter.com/intent/tweet?text={{text}}&url={{url}}"
      }, {
        id: "pinterest",
        label: "Pin it",
        url: "http://www.pinterest.com/pin/create/button/?url={{url}}&media={{image_url}}&description={{text}}"
      }, {
        id: "download",
        label: "Download image",
        url: "{{raw_image_url}}",
        download: !0
      }],
      getImageURLForShare: function getImageURLForShare() {
        return _a.currItem.src || "";
      },
      getPageURLForShare: function getPageURLForShare() {
        return window.location.href;
      },
      getTextForShare: function getTextForShare() {
        return _a.currItem.title || "";
      },
      indexIndicatorSep: " / ",
      fitControlsWidth: 1200
    },
        A = function A(a) {
      if (r) return !0;
      a = a || window.event, q.timeToIdle && q.mouseUsed && !k && K();

      for (var c, d, e = a.target || a.srcElement, f = e.getAttribute("class") || "", g = 0; g < S.length; g++) {
        c = S[g], c.onTap && f.indexOf("pswp__" + c.name) > -1 && (c.onTap(), d = !0);
      }

      if (d) {
        a.stopPropagation && a.stopPropagation(), r = !0;
        var h = b.features.isOldAndroid ? 600 : 30;
        s = setTimeout(function () {
          r = !1;
        }, h);
      }
    },
        B = function B() {
      return !_a.likelyTouchDevice || q.mouseUsed || screen.width > q.fitControlsWidth;
    },
        C = function C(a, c, d) {
      b[(d ? "add" : "remove") + "Class"](a, "pswp__" + c);
    },
        D = function D() {
      var a = 1 === q.getNumItemsFn();
      a !== p && (C(d, "ui--one-slide", a), p = a);
    },
        E = function E() {
      C(i, "share-modal--hidden", y);
    },
        F = function F() {
      return y = !y, y ? (b.removeClass(i, "pswp__share-modal--fade-in"), setTimeout(function () {
        y && E();
      }, 300)) : (E(), setTimeout(function () {
        y || b.addClass(i, "pswp__share-modal--fade-in");
      }, 30)), y || H(), !1;
    },
        G = function G(b) {
      b = b || window.event;
      var c = b.target || b.srcElement;
      return _a.shout("shareLinkClick", b, c), !!c.href && (!!c.hasAttribute("download") || (window.open(c.href, "pswp_share", "scrollbars=yes,resizable=yes,toolbar=no,location=yes,width=550,height=420,top=100,left=" + (window.screen ? Math.round(screen.width / 2 - 275) : 100)), y || F(), !1));
    },
        H = function H() {
      for (var a, b, c, d, e, f = "", g = 0; g < q.shareButtons.length; g++) {
        a = q.shareButtons[g], c = q.getImageURLForShare(a), d = q.getPageURLForShare(a), e = q.getTextForShare(a), b = a.url.replace("{{url}}", encodeURIComponent(d)).replace("{{image_url}}", encodeURIComponent(c)).replace("{{raw_image_url}}", c).replace("{{text}}", encodeURIComponent(e)), f += '<a href="' + b + '" target="_blank" class="pswp__share--' + a.id + '"' + (a.download ? "download" : "") + ">" + a.label + "</a>", q.parseShareButtonOut && (f = q.parseShareButtonOut(a, f));
      }

      i.children[0].innerHTML = f, i.children[0].onclick = G;
    },
        I = function I(a) {
      for (var c = 0; c < q.closeElClasses.length; c++) {
        if (b.hasClass(a, "pswp__" + q.closeElClasses[c])) return !0;
      }
    },
        J = 0,
        K = function K() {
      clearTimeout(u), J = 0, k && v.setIdle(!1);
    },
        L = function L(a) {
      a = a ? a : window.event;
      var b = a.relatedTarget || a.toElement;
      b && "HTML" !== b.nodeName || (clearTimeout(u), u = setTimeout(function () {
        v.setIdle(!0);
      }, q.timeToIdleOutside));
    },
        M = function M() {
      q.fullscreenEl && !b.features.isOldAndroid && (c || (c = v.getFullscreenAPI()), c ? (b.bind(document, c.eventK, v.updateFullscreen), v.updateFullscreen(), b.addClass(_a.template, "pswp--supports-fs")) : b.removeClass(_a.template, "pswp--supports-fs"));
    },
        N = function N() {
      q.preloaderEl && (O(!0), l("beforeChange", function () {
        clearTimeout(o), o = setTimeout(function () {
          _a.currItem && _a.currItem.loading ? (!_a.allowProgressiveImg() || _a.currItem.img && !_a.currItem.img.naturalWidth) && O(!1) : O(!0);
        }, q.loadingIndicatorDelay);
      }), l("imageLoadComplete", function (b, c) {
        _a.currItem === c && O(!0);
      }));
    },
        O = function O(a) {
      n !== a && (C(m, "preloader--active", !a), n = a);
    },
        P = function P(a) {
      var c = a.vGap;

      if (B()) {
        var g = q.barsSize;
        if (q.captionEl && "auto" === g.bottom) {
          if (f || (f = b.createEl("pswp__caption pswp__caption--fake"), f.appendChild(b.createEl("pswp__caption__center")), d.insertBefore(f, e), b.addClass(d, "pswp__ui--fit")), q.addCaptionHTMLFn(a, f, !0)) {
            var h = f.clientHeight;
            c.bottom = parseInt(h, 10) || 44;
          } else c.bottom = g.top;
        } else c.bottom = "auto" === g.bottom ? 0 : g.bottom;
        c.top = g.top;
      } else c.top = c.bottom = 0;
    },
        Q = function Q() {
      q.timeToIdle && l("mouseUsed", function () {
        b.bind(document, "mousemove", K), b.bind(document, "mouseout", L), t = setInterval(function () {
          J++, 2 === J && v.setIdle(!0);
        }, q.timeToIdle / 2);
      });
    },
        R = function R() {
      l("onVerticalDrag", function (a) {
        x && a < .95 ? v.hideControls() : !x && a >= .95 && v.showControls();
      });
      var a;
      l("onPinchClose", function (b) {
        x && b < .9 ? (v.hideControls(), a = !0) : a && !x && b > .9 && v.showControls();
      }), l("zoomGestureEnded", function () {
        a = !1, a && !x && v.showControls();
      });
    },
        S = [{
      name: "caption",
      option: "captionEl",
      onInit: function onInit(a) {
        e = a;
      }
    }, {
      name: "share-modal",
      option: "shareEl",
      onInit: function onInit(a) {
        i = a;
      },
      onTap: function onTap() {
        F();
      }
    }, {
      name: "button--share",
      option: "shareEl",
      onInit: function onInit(a) {
        h = a;
      },
      onTap: function onTap() {
        F();
      }
    }, {
      name: "button--zoom",
      option: "zoomEl",
      onTap: _a.toggleDesktopZoom
    }, {
      name: "counter",
      option: "counterEl",
      onInit: function onInit(a) {
        g = a;
      }
    }, {
      name: "button--close",
      option: "closeEl",
      onTap: _a.close
    }, {
      name: "button--arrow--left",
      option: "arrowEl",
      onTap: _a.prev
    }, {
      name: "button--arrow--right",
      option: "arrowEl",
      onTap: _a.next
    }, {
      name: "button--fs",
      option: "fullscreenEl",
      onTap: function onTap() {
        c.isFullscreen() ? c.exit() : c.enter();
      }
    }, {
      name: "preloader",
      option: "preloaderEl",
      onInit: function onInit(a) {
        m = a;
      }
    }],
        T = function T() {
      var a,
          c,
          e,
          f = function f(d) {
        if (d) for (var f = d.length, g = 0; g < f; g++) {
          a = d[g], c = a.className;

          for (var h = 0; h < S.length; h++) {
            e = S[h], c.indexOf("pswp__" + e.name) > -1 && (q[e.option] ? (b.removeClass(a, "pswp__element--disabled"), e.onInit && e.onInit(a)) : b.addClass(a, "pswp__element--disabled"));
          }
        }
      };

      f(d.children);
      var g = b.getChildByClass(d, "pswp__top-bar");
      g && f(g.children);
    };

    v.init = function () {
      b.extend(_a.options, z, !0), q = _a.options, d = b.getChildByClass(_a.scrollWrap, "pswp__ui"), l = _a.listen, R(), l("beforeChange", v.update), l("doubleTap", function (b) {
        var c = _a.currItem.initialZoomLevel;
        _a.getZoomLevel() !== c ? _a.zoomTo(c, b, 333) : _a.zoomTo(q.getDoubleTapZoom(!1, _a.currItem), b, 333);
      }), l("preventDragEvent", function (a, b, c) {
        var d = a.target || a.srcElement;
        d && d.getAttribute("class") && a.type.indexOf("mouse") > -1 && (d.getAttribute("class").indexOf("__caption") > 0 || /(SMALL|STRONG|EM)/i.test(d.tagName)) && (c.prevent = !1);
      }), l("bindEvents", function () {
        b.bind(d, "pswpTap click", A), b.bind(_a.scrollWrap, "pswpTap", v.onGlobalTap), _a.likelyTouchDevice || b.bind(_a.scrollWrap, "mouseover", v.onMouseOver);
      }), l("unbindEvents", function () {
        y || F(), t && clearInterval(t), b.unbind(document, "mouseout", L), b.unbind(document, "mousemove", K), b.unbind(d, "pswpTap click", A), b.unbind(_a.scrollWrap, "pswpTap", v.onGlobalTap), b.unbind(_a.scrollWrap, "mouseover", v.onMouseOver), c && (b.unbind(document, c.eventK, v.updateFullscreen), c.isFullscreen() && (q.hideAnimationDuration = 0, c.exit()), c = null);
      }), l("destroy", function () {
        q.captionEl && (f && d.removeChild(f), b.removeClass(e, "pswp__caption--empty")), i && (i.children[0].onclick = null), b.removeClass(d, "pswp__ui--over-close"), b.addClass(d, "pswp__ui--hidden"), v.setIdle(!1);
      }), q.showAnimationDuration || b.removeClass(d, "pswp__ui--hidden"), l("initialZoomIn", function () {
        q.showAnimationDuration && b.removeClass(d, "pswp__ui--hidden");
      }), l("initialZoomOut", function () {
        b.addClass(d, "pswp__ui--hidden");
      }), l("parseVerticalMargin", P), T(), q.shareEl && h && i && (y = !0), D(), Q(), M(), N();
    }, v.setIdle = function (a) {
      k = a, C(d, "ui--idle", a);
    }, v.update = function () {
      x && _a.currItem ? (v.updateIndexIndicator(), q.captionEl && (q.addCaptionHTMLFn(_a.currItem, e), C(e, "caption--empty", !_a.currItem.title)), w = !0) : w = !1, y || F(), D();
    }, v.updateFullscreen = function (d) {
      d && setTimeout(function () {
        _a.setScrollOffset(0, b.getScrollY());
      }, 50), b[(c.isFullscreen() ? "add" : "remove") + "Class"](_a.template, "pswp--fs");
    }, v.updateIndexIndicator = function () {
      q.counterEl && (g.innerHTML = _a.getCurrentIndex() + 1 + q.indexIndicatorSep + q.getNumItemsFn());
    }, v.onGlobalTap = function (c) {
      c = c || window.event;
      var d = c.target || c.srcElement;
      if (!r) if (c.detail && "mouse" === c.detail.pointerType) {
        if (I(d)) return void _a.close();
        b.hasClass(d, "pswp__img") && (1 === _a.getZoomLevel() && _a.getZoomLevel() <= _a.currItem.fitRatio ? q.clickToCloseNonZoomable && _a.close() : _a.toggleDesktopZoom(c.detail.releasePoint));
      } else if (q.tapToToggleControls && (x ? v.hideControls() : v.showControls()), q.tapToClose && (b.hasClass(d, "pswp__img") || I(d))) return void _a.close();
    }, v.onMouseOver = function (a) {
      a = a || window.event;
      var b = a.target || a.srcElement;
      C(d, "ui--over-close", I(b));
    }, v.hideControls = function () {
      b.addClass(d, "pswp__ui--hidden"), x = !1;
    }, v.showControls = function () {
      x = !0, w || v.update(), b.removeClass(d, "pswp__ui--hidden");
    }, v.supportsFullscreen = function () {
      var a = document;
      return !!(a.exitFullscreen || a.mozCancelFullScreen || a.webkitExitFullscreen || a.msExitFullscreen);
    }, v.getFullscreenAPI = function () {
      var b,
          c = document.documentElement,
          d = "fullscreenchange";
      return c.requestFullscreen ? b = {
        enterK: "requestFullscreen",
        exitK: "exitFullscreen",
        elementK: "fullscreenElement",
        eventK: d
      } : c.mozRequestFullScreen ? b = {
        enterK: "mozRequestFullScreen",
        exitK: "mozCancelFullScreen",
        elementK: "mozFullScreenElement",
        eventK: "moz" + d
      } : c.webkitRequestFullscreen ? b = {
        enterK: "webkitRequestFullscreen",
        exitK: "webkitExitFullscreen",
        elementK: "webkitFullscreenElement",
        eventK: "webkit" + d
      } : c.msRequestFullscreen && (b = {
        enterK: "msRequestFullscreen",
        exitK: "msExitFullscreen",
        elementK: "msFullscreenElement",
        eventK: "MSFullscreenChange"
      }), b && (b.enter = function () {
        return j = q.closeOnScroll, q.closeOnScroll = !1, "webkitRequestFullscreen" !== this.enterK ? _a.template[this.enterK]() : void _a.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
      }, b.exit = function () {
        return q.closeOnScroll = j, document[this.exitK]();
      }, b.isFullscreen = function () {
        return document[this.elementK];
      }), b;
    };
  };

  return a;
});

/***/ }),

/***/ "./assets/vendor/photoswipe/photoswipe.css":
/*!*************************************************!*\
  !*** ./assets/vendor/photoswipe/photoswipe.css ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./assets/vendor/photoswipe/photoswipe.min.js":
/*!****************************************************!*\
  !*** ./assets/vendor/photoswipe/photoswipe.min.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");

__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.string.search.js */ "./node_modules/core-js/modules/es.string.search.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*! PhotoSwipe - v4.1.3 - 2019-01-08
* http://photoswipe.com
* Copyright (c) 2019 Dmitry Semenov; */
!function (a, b) {
   true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  "use strict";

  var a = function a(_a3, b, c, d) {
    var e = {
      features: null,
      bind: function bind(a, b, c, d) {
        var e = (d ? "remove" : "add") + "EventListener";
        b = b.split(" ");

        for (var f = 0; f < b.length; f++) {
          b[f] && a[e](b[f], c, !1);
        }
      },
      isArray: function isArray(a) {
        return a instanceof Array;
      },
      createEl: function createEl(a, b) {
        var c = document.createElement(b || "div");
        return a && (c.className = a), c;
      },
      getScrollY: function getScrollY() {
        var a = window.pageYOffset;
        return void 0 !== a ? a : document.documentElement.scrollTop;
      },
      unbind: function unbind(a, b, c) {
        e.bind(a, b, c, !0);
      },
      removeClass: function removeClass(a, b) {
        var c = new RegExp("(\\s|^)" + b + "(\\s|$)");
        a.className = a.className.replace(c, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      },
      addClass: function addClass(a, b) {
        e.hasClass(a, b) || (a.className += (a.className ? " " : "") + b);
      },
      hasClass: function hasClass(a, b) {
        return a.className && new RegExp("(^|\\s)" + b + "(\\s|$)").test(a.className);
      },
      getChildByClass: function getChildByClass(a, b) {
        for (var c = a.firstChild; c;) {
          if (e.hasClass(c, b)) return c;
          c = c.nextSibling;
        }
      },
      arraySearch: function arraySearch(a, b, c) {
        for (var d = a.length; d--;) {
          if (a[d][c] === b) return d;
        }

        return -1;
      },
      extend: function extend(a, b, c) {
        for (var d in b) {
          if (b.hasOwnProperty(d)) {
            if (c && a.hasOwnProperty(d)) continue;
            a[d] = b[d];
          }
        }
      },
      easing: {
        sine: {
          out: function out(a) {
            return Math.sin(a * (Math.PI / 2));
          },
          inOut: function inOut(a) {
            return -(Math.cos(Math.PI * a) - 1) / 2;
          }
        },
        cubic: {
          out: function out(a) {
            return --a * a * a + 1;
          }
        }
      },
      detectFeatures: function detectFeatures() {
        if (e.features) return e.features;
        var a = e.createEl(),
            b = a.style,
            c = "",
            d = {};

        if (d.oldIE = document.all && !document.addEventListener, d.touch = "ontouchstart" in window, window.requestAnimationFrame && (d.raf = window.requestAnimationFrame, d.caf = window.cancelAnimationFrame), d.pointerEvent = !!window.PointerEvent || navigator.msPointerEnabled, !d.pointerEvent) {
          var f = navigator.userAgent;

          if (/iP(hone|od)/.test(navigator.platform)) {
            var g = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            g && g.length > 0 && (g = parseInt(g[1], 10), g >= 1 && g < 8 && (d.isOldIOSPhone = !0));
          }

          var h = f.match(/Android\s([0-9\.]*)/),
              i = h ? h[1] : 0;
          i = parseFloat(i), i >= 1 && (i < 4.4 && (d.isOldAndroid = !0), d.androidVersion = i), d.isMobileOpera = /opera mini|opera mobi/i.test(f);
        }

        for (var j, k, l = ["transform", "perspective", "animationName"], m = ["", "webkit", "Moz", "ms", "O"], n = 0; n < 4; n++) {
          c = m[n];

          for (var o = 0; o < 3; o++) {
            j = l[o], k = c + (c ? j.charAt(0).toUpperCase() + j.slice(1) : j), !d[j] && k in b && (d[j] = k);
          }

          c && !d.raf && (c = c.toLowerCase(), d.raf = window[c + "RequestAnimationFrame"], d.raf && (d.caf = window[c + "CancelAnimationFrame"] || window[c + "CancelRequestAnimationFrame"]));
        }

        if (!d.raf) {
          var p = 0;
          d.raf = function (a) {
            var b = new Date().getTime(),
                c = Math.max(0, 16 - (b - p)),
                d = window.setTimeout(function () {
              a(b + c);
            }, c);
            return p = b + c, d;
          }, d.caf = function (a) {
            clearTimeout(a);
          };
        }

        return d.svg = !!document.createElementNS && !!document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect, e.features = d, d;
      }
    };
    e.detectFeatures(), e.features.oldIE && (e.bind = function (a, b, c, d) {
      b = b.split(" ");

      for (var e, f = (d ? "detach" : "attach") + "Event", g = function g() {
        c.handleEvent.call(c);
      }, h = 0; h < b.length; h++) {
        if (e = b[h]) if ("object" == _typeof(c) && c.handleEvent) {
          if (d) {
            if (!c["oldIE" + e]) return !1;
          } else c["oldIE" + e] = g;

          a[f]("on" + e, c["oldIE" + e]);
        } else a[f]("on" + e, c);
      }
    });
    var f = this,
        g = 25,
        h = 3,
        i = {
      allowPanToNext: !0,
      spacing: .12,
      bgOpacity: 1,
      mouseUsed: !1,
      loop: !0,
      pinchToClose: !0,
      closeOnScroll: !0,
      closeOnVerticalDrag: !0,
      verticalDragRange: .75,
      hideAnimationDuration: 333,
      showAnimationDuration: 333,
      showHideOpacity: !1,
      focus: !0,
      escKey: !0,
      arrowKeys: !0,
      mainScrollEndFriction: .35,
      panEndFriction: .35,
      isClickableElement: function isClickableElement(a) {
        return "A" === a.tagName;
      },
      getDoubleTapZoom: function getDoubleTapZoom(a, b) {
        return a ? 1 : b.initialZoomLevel < .7 ? 1 : 1.33;
      },
      maxSpreadZoom: 1.33,
      modal: !0,
      scaleMode: "fit"
    };
    e.extend(i, d);

    var j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u,
        v,
        w,
        x,
        y,
        z,
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        $,
        _,
        aa,
        ba,
        ca,
        da,
        ea,
        fa,
        ga,
        ha,
        ia,
        ja,
        ka,
        la,
        ma = function ma() {
      return {
        x: 0,
        y: 0
      };
    },
        na = ma(),
        oa = ma(),
        pa = ma(),
        qa = {},
        ra = 0,
        sa = {},
        ta = ma(),
        ua = 0,
        va = !0,
        wa = [],
        xa = {},
        ya = !1,
        za = function za(a, b) {
      e.extend(f, b.publicMethods), wa.push(a);
    },
        Aa = function Aa(a) {
      var b = ac();
      return a > b - 1 ? a - b : a < 0 ? b + a : a;
    },
        Ba = {},
        Ca = function Ca(a, b) {
      return Ba[a] || (Ba[a] = []), Ba[a].push(b);
    },
        Da = function Da(a) {
      var b = Ba[a];

      if (b) {
        var c = Array.prototype.slice.call(arguments);
        c.shift();

        for (var d = 0; d < b.length; d++) {
          b[d].apply(f, c);
        }
      }
    },
        Ea = function Ea() {
      return new Date().getTime();
    },
        Fa = function Fa(a) {
      ja = a, f.bg.style.opacity = a * i.bgOpacity;
    },
        Ga = function Ga(a, b, c, d, e) {
      (!ya || e && e !== f.currItem) && (d /= e ? e.fitRatio : f.currItem.fitRatio), a[E] = u + b + "px, " + c + "px" + v + " scale(" + d + ")";
    },
        Ha = function Ha(a) {
      ea && (a && (s > f.currItem.fitRatio ? ya || (mc(f.currItem, !1, !0), ya = !0) : ya && (mc(f.currItem), ya = !1)), Ga(ea, pa.x, pa.y, s));
    },
        Ia = function Ia(a) {
      a.container && Ga(a.container.style, a.initialPosition.x, a.initialPosition.y, a.initialZoomLevel, a);
    },
        Ja = function Ja(a, b) {
      b[E] = u + a + "px, 0px" + v;
    },
        Ka = function Ka(a, b) {
      if (!i.loop && b) {
        var c = m + (ta.x * ra - a) / ta.x,
            d = Math.round(a - tb.x);
        (c < 0 && d > 0 || c >= ac() - 1 && d < 0) && (a = tb.x + d * i.mainScrollEndFriction);
      }

      tb.x = a, Ja(a, n);
    },
        La = function La(a, b) {
      var c = ub[a] - sa[a];
      return oa[a] + na[a] + c - c * (b / t);
    },
        Ma = function Ma(a, b) {
      a.x = b.x, a.y = b.y, b.id && (a.id = b.id);
    },
        Na = function Na(a) {
      a.x = Math.round(a.x), a.y = Math.round(a.y);
    },
        Oa = null,
        Pa = function Pa() {
      Oa && (e.unbind(document, "mousemove", Pa), e.addClass(_a3, "pswp--has_mouse"), i.mouseUsed = !0, Da("mouseUsed")), Oa = setTimeout(function () {
        Oa = null;
      }, 100);
    },
        Qa = function Qa() {
      e.bind(document, "keydown", f), N.transform && e.bind(f.scrollWrap, "click", f), i.mouseUsed || e.bind(document, "mousemove", Pa), e.bind(window, "resize scroll orientationchange", f), Da("bindEvents");
    },
        Ra = function Ra() {
      e.unbind(window, "resize scroll orientationchange", f), e.unbind(window, "scroll", r.scroll), e.unbind(document, "keydown", f), e.unbind(document, "mousemove", Pa), N.transform && e.unbind(f.scrollWrap, "click", f), V && e.unbind(window, p, f), clearTimeout(O), Da("unbindEvents");
    },
        Sa = function Sa(a, b) {
      var c = ic(f.currItem, qa, a);
      return b && (da = c), c;
    },
        Ta = function Ta(a) {
      return a || (a = f.currItem), a.initialZoomLevel;
    },
        Ua = function Ua(a) {
      return a || (a = f.currItem), a.w > 0 ? i.maxSpreadZoom : 1;
    },
        Va = function Va(a, b, c, d) {
      return d === f.currItem.initialZoomLevel ? (c[a] = f.currItem.initialPosition[a], !0) : (c[a] = La(a, d), c[a] > b.min[a] ? (c[a] = b.min[a], !0) : c[a] < b.max[a] && (c[a] = b.max[a], !0));
    },
        Wa = function Wa() {
      if (E) {
        var b = N.perspective && !G;
        return u = "translate" + (b ? "3d(" : "("), void (v = N.perspective ? ", 0px)" : ")");
      }

      E = "left", e.addClass(_a3, "pswp--ie"), Ja = function Ja(a, b) {
        b.left = a + "px";
      }, Ia = function Ia(a) {
        var b = a.fitRatio > 1 ? 1 : a.fitRatio,
            c = a.container.style,
            d = b * a.w,
            e = b * a.h;
        c.width = d + "px", c.height = e + "px", c.left = a.initialPosition.x + "px", c.top = a.initialPosition.y + "px";
      }, Ha = function Ha() {
        if (ea) {
          var a = ea,
              b = f.currItem,
              c = b.fitRatio > 1 ? 1 : b.fitRatio,
              d = c * b.w,
              e = c * b.h;
          a.width = d + "px", a.height = e + "px", a.left = pa.x + "px", a.top = pa.y + "px";
        }
      };
    },
        Xa = function Xa(a) {
      var b = "";
      i.escKey && 27 === a.keyCode ? b = "close" : i.arrowKeys && (37 === a.keyCode ? b = "prev" : 39 === a.keyCode && (b = "next")), b && (a.ctrlKey || a.altKey || a.shiftKey || a.metaKey || (a.preventDefault ? a.preventDefault() : a.returnValue = !1, f[b]()));
    },
        Ya = function Ya(a) {
      a && (Y || X || fa || T) && (a.preventDefault(), a.stopPropagation());
    },
        Za = function Za() {
      f.setScrollOffset(0, e.getScrollY());
    },
        $a = {},
        _a = 0,
        ab = function ab(a) {
      $a[a] && ($a[a].raf && I($a[a].raf), _a--, delete $a[a]);
    },
        bb = function bb(a) {
      $a[a] && ab(a), $a[a] || (_a++, $a[a] = {});
    },
        cb = function cb() {
      for (var a in $a) {
        $a.hasOwnProperty(a) && ab(a);
      }
    },
        db = function db(a, b, c, d, e, f, g) {
      var h,
          i = Ea();
      bb(a);

      var j = function j() {
        if ($a[a]) {
          if (h = Ea() - i, h >= d) return ab(a), f(c), void (g && g());
          f((c - b) * e(h / d) + b), $a[a].raf = H(j);
        }
      };

      j();
    },
        eb = {
      shout: Da,
      listen: Ca,
      viewportSize: qa,
      options: i,
      isMainScrollAnimating: function isMainScrollAnimating() {
        return fa;
      },
      getZoomLevel: function getZoomLevel() {
        return s;
      },
      getCurrentIndex: function getCurrentIndex() {
        return m;
      },
      isDragging: function isDragging() {
        return V;
      },
      isZooming: function isZooming() {
        return aa;
      },
      setScrollOffset: function setScrollOffset(a, b) {
        sa.x = a, M = sa.y = b, Da("updateScrollOffset", sa);
      },
      applyZoomPan: function applyZoomPan(a, b, c, d) {
        pa.x = b, pa.y = c, s = a, Ha(d);
      },
      init: function init() {
        if (!j && !k) {
          var c;
          f.framework = e, f.template = _a3, f.bg = e.getChildByClass(_a3, "pswp__bg"), J = _a3.className, j = !0, N = e.detectFeatures(), H = N.raf, I = N.caf, E = N.transform, L = N.oldIE, f.scrollWrap = e.getChildByClass(_a3, "pswp__scroll-wrap"), f.container = e.getChildByClass(f.scrollWrap, "pswp__container"), n = f.container.style, f.itemHolders = y = [{
            el: f.container.children[0],
            wrap: 0,
            index: -1
          }, {
            el: f.container.children[1],
            wrap: 0,
            index: -1
          }, {
            el: f.container.children[2],
            wrap: 0,
            index: -1
          }], y[0].el.style.display = y[2].el.style.display = "none", Wa(), r = {
            resize: f.updateSize,
            orientationchange: function orientationchange() {
              clearTimeout(O), O = setTimeout(function () {
                qa.x !== f.scrollWrap.clientWidth && f.updateSize();
              }, 500);
            },
            scroll: Za,
            keydown: Xa,
            click: Ya
          };
          var d = N.isOldIOSPhone || N.isOldAndroid || N.isMobileOpera;

          for (N.animationName && N.transform && !d || (i.showAnimationDuration = i.hideAnimationDuration = 0), c = 0; c < wa.length; c++) {
            f["init" + wa[c]]();
          }

          if (b) {
            var g = f.ui = new b(f, e);
            g.init();
          }

          Da("firstUpdate"), m = m || i.index || 0, (isNaN(m) || m < 0 || m >= ac()) && (m = 0), f.currItem = _b(m), (N.isOldIOSPhone || N.isOldAndroid) && (va = !1), _a3.setAttribute("aria-hidden", "false"), i.modal && (va ? _a3.style.position = "fixed" : (_a3.style.position = "absolute", _a3.style.top = e.getScrollY() + "px")), void 0 === M && (Da("initialLayout"), M = K = e.getScrollY());
          var l = "pswp--open ";

          for (i.mainClass && (l += i.mainClass + " "), i.showHideOpacity && (l += "pswp--animate_opacity "), l += G ? "pswp--touch" : "pswp--notouch", l += N.animationName ? " pswp--css_animation" : "", l += N.svg ? " pswp--svg" : "", e.addClass(_a3, l), f.updateSize(), o = -1, ua = null, c = 0; c < h; c++) {
            Ja((c + o) * ta.x, y[c].el.style);
          }

          L || e.bind(f.scrollWrap, q, f), Ca("initialZoomInEnd", function () {
            f.setContent(y[0], m - 1), f.setContent(y[2], m + 1), y[0].el.style.display = y[2].el.style.display = "block", i.focus && _a3.focus(), Qa();
          }), f.setContent(y[1], m), f.updateCurrItem(), Da("afterInit"), va || (w = setInterval(function () {
            _a || V || aa || s !== f.currItem.initialZoomLevel || f.updateSize();
          }, 1e3)), e.addClass(_a3, "pswp--visible");
        }
      },
      close: function close() {
        j && (j = !1, k = !0, Da("close"), Ra(), cc(f.currItem, null, !0, f.destroy));
      },
      destroy: function destroy() {
        Da("destroy"), Xb && clearTimeout(Xb), _a3.setAttribute("aria-hidden", "true"), _a3.className = J, w && clearInterval(w), e.unbind(f.scrollWrap, q, f), e.unbind(window, "scroll", f), zb(), cb(), Ba = null;
      },
      panTo: function panTo(a, b, c) {
        c || (a > da.min.x ? a = da.min.x : a < da.max.x && (a = da.max.x), b > da.min.y ? b = da.min.y : b < da.max.y && (b = da.max.y)), pa.x = a, pa.y = b, Ha();
      },
      handleEvent: function handleEvent(a) {
        a = a || window.event, r[a.type] && r[a.type](a);
      },
      goTo: function goTo(a) {
        a = Aa(a);
        var b = a - m;
        ua = b, m = a, f.currItem = _b(m), ra -= b, Ka(ta.x * ra), cb(), fa = !1, f.updateCurrItem();
      },
      next: function next() {
        f.goTo(m + 1);
      },
      prev: function prev() {
        f.goTo(m - 1);
      },
      updateCurrZoomItem: function updateCurrZoomItem(a) {
        if (a && Da("beforeChange", 0), y[1].el.children.length) {
          var b = y[1].el.children[0];
          ea = e.hasClass(b, "pswp__zoom-wrap") ? b.style : null;
        } else ea = null;

        da = f.currItem.bounds, t = s = f.currItem.initialZoomLevel, pa.x = da.center.x, pa.y = da.center.y, a && Da("afterChange");
      },
      invalidateCurrItems: function invalidateCurrItems() {
        x = !0;

        for (var a = 0; a < h; a++) {
          y[a].item && (y[a].item.needsUpdate = !0);
        }
      },
      updateCurrItem: function updateCurrItem(a) {
        if (0 !== ua) {
          var b,
              c = Math.abs(ua);

          if (!(a && c < 2)) {
            f.currItem = _b(m), ya = !1, Da("beforeChange", ua), c >= h && (o += ua + (ua > 0 ? -h : h), c = h);

            for (var d = 0; d < c; d++) {
              ua > 0 ? (b = y.shift(), y[h - 1] = b, o++, Ja((o + 2) * ta.x, b.el.style), f.setContent(b, m - c + d + 1 + 1)) : (b = y.pop(), y.unshift(b), o--, Ja(o * ta.x, b.el.style), f.setContent(b, m + c - d - 1 - 1));
            }

            if (ea && 1 === Math.abs(ua)) {
              var e = _b(z);

              e.initialZoomLevel !== s && (ic(e, qa), mc(e), Ia(e));
            }

            ua = 0, f.updateCurrZoomItem(), z = m, Da("afterChange");
          }
        }
      },
      updateSize: function updateSize(b) {
        if (!va && i.modal) {
          var c = e.getScrollY();
          if (M !== c && (_a3.style.top = c + "px", M = c), !b && xa.x === window.innerWidth && xa.y === window.innerHeight) return;
          xa.x = window.innerWidth, xa.y = window.innerHeight, _a3.style.height = xa.y + "px";
        }

        if (qa.x = f.scrollWrap.clientWidth, qa.y = f.scrollWrap.clientHeight, Za(), ta.x = qa.x + Math.round(qa.x * i.spacing), ta.y = qa.y, Ka(ta.x * ra), Da("beforeResize"), void 0 !== o) {
          for (var d, g, j, k = 0; k < h; k++) {
            d = y[k], Ja((k + o) * ta.x, d.el.style), j = m + k - 1, i.loop && ac() > 2 && (j = Aa(j)), g = _b(j), g && (x || g.needsUpdate || !g.bounds) ? (f.cleanSlide(g), f.setContent(d, j), 1 === k && (f.currItem = g, f.updateCurrZoomItem(!0)), g.needsUpdate = !1) : d.index === -1 && j >= 0 && f.setContent(d, j), g && g.container && (ic(g, qa), mc(g), Ia(g));
          }

          x = !1;
        }

        t = s = f.currItem.initialZoomLevel, da = f.currItem.bounds, da && (pa.x = da.center.x, pa.y = da.center.y, Ha(!0)), Da("resize");
      },
      zoomTo: function zoomTo(a, b, c, d, f) {
        b && (t = s, ub.x = Math.abs(b.x) - pa.x, ub.y = Math.abs(b.y) - pa.y, Ma(oa, pa));
        var g = Sa(a, !1),
            h = {};
        Va("x", g, h, a), Va("y", g, h, a);
        var i = s,
            j = {
          x: pa.x,
          y: pa.y
        };
        Na(h);

        var k = function k(b) {
          1 === b ? (s = a, pa.x = h.x, pa.y = h.y) : (s = (a - i) * b + i, pa.x = (h.x - j.x) * b + j.x, pa.y = (h.y - j.y) * b + j.y), f && f(b), Ha(1 === b);
        };

        c ? db("customZoomTo", 0, 1, c, d || e.easing.sine.inOut, k) : k(1);
      }
    },
        fb = 30,
        gb = 10,
        hb = {},
        ib = {},
        jb = {},
        kb = {},
        lb = {},
        mb = [],
        nb = {},
        ob = [],
        pb = {},
        qb = 0,
        rb = ma(),
        sb = 0,
        tb = ma(),
        ub = ma(),
        vb = ma(),
        wb = function wb(a, b) {
      return a.x === b.x && a.y === b.y;
    },
        xb = function xb(a, b) {
      return Math.abs(a.x - b.x) < g && Math.abs(a.y - b.y) < g;
    },
        yb = function yb(a, b) {
      return pb.x = Math.abs(a.x - b.x), pb.y = Math.abs(a.y - b.y), Math.sqrt(pb.x * pb.x + pb.y * pb.y);
    },
        zb = function zb() {
      Z && (I(Z), Z = null);
    },
        Ab = function Ab() {
      V && (Z = H(Ab), Qb());
    },
        Bb = function Bb() {
      return !("fit" === i.scaleMode && s === f.currItem.initialZoomLevel);
    },
        Cb = function Cb(a, b) {
      return !(!a || a === document) && !(a.getAttribute("class") && a.getAttribute("class").indexOf("pswp__scroll-wrap") > -1) && (b(a) ? a : Cb(a.parentNode, b));
    },
        Db = {},
        Eb = function Eb(a, b) {
      return Db.prevent = !Cb(a.target, i.isClickableElement), Da("preventDragEvent", a, b, Db), Db.prevent;
    },
        Fb = function Fb(a, b) {
      return b.x = a.pageX, b.y = a.pageY, b.id = a.identifier, b;
    },
        Gb = function Gb(a, b, c) {
      c.x = .5 * (a.x + b.x), c.y = .5 * (a.y + b.y);
    },
        Hb = function Hb(a, b, c) {
      if (a - Q > 50) {
        var d = ob.length > 2 ? ob.shift() : {};
        d.x = b, d.y = c, ob.push(d), Q = a;
      }
    },
        Ib = function Ib() {
      var a = pa.y - f.currItem.initialPosition.y;
      return 1 - Math.abs(a / (qa.y / 2));
    },
        Jb = {},
        Kb = {},
        Lb = [],
        Mb = function Mb(a) {
      for (; Lb.length > 0;) {
        Lb.pop();
      }

      return F ? (la = 0, mb.forEach(function (a) {
        0 === la ? Lb[0] = a : 1 === la && (Lb[1] = a), la++;
      })) : a.type.indexOf("touch") > -1 ? a.touches && a.touches.length > 0 && (Lb[0] = Fb(a.touches[0], Jb), a.touches.length > 1 && (Lb[1] = Fb(a.touches[1], Kb))) : (Jb.x = a.pageX, Jb.y = a.pageY, Jb.id = "", Lb[0] = Jb), Lb;
    },
        Nb = function Nb(a, b) {
      var c,
          d,
          e,
          g,
          h = 0,
          j = pa[a] + b[a],
          k = b[a] > 0,
          l = tb.x + b.x,
          m = tb.x - nb.x;
      return c = j > da.min[a] || j < da.max[a] ? i.panEndFriction : 1, j = pa[a] + b[a] * c, !i.allowPanToNext && s !== f.currItem.initialZoomLevel || (ea ? "h" !== ga || "x" !== a || X || (k ? (j > da.min[a] && (c = i.panEndFriction, h = da.min[a] - j, d = da.min[a] - oa[a]), (d <= 0 || m < 0) && ac() > 1 ? (g = l, m < 0 && l > nb.x && (g = nb.x)) : da.min.x !== da.max.x && (e = j)) : (j < da.max[a] && (c = i.panEndFriction, h = j - da.max[a], d = oa[a] - da.max[a]), (d <= 0 || m > 0) && ac() > 1 ? (g = l, m > 0 && l < nb.x && (g = nb.x)) : da.min.x !== da.max.x && (e = j))) : g = l, "x" !== a) ? void (fa || $ || s > f.currItem.fitRatio && (pa[a] += b[a] * c)) : (void 0 !== g && (Ka(g, !0), $ = g !== nb.x), da.min.x !== da.max.x && (void 0 !== e ? pa.x = e : $ || (pa.x += b.x * c)), void 0 !== g);
    },
        Ob = function Ob(a) {
      if (!("mousedown" === a.type && a.button > 0)) {
        if ($b) return void a.preventDefault();

        if (!U || "mousedown" !== a.type) {
          if (Eb(a, !0) && a.preventDefault(), Da("pointerDown"), F) {
            var b = e.arraySearch(mb, a.pointerId, "id");
            b < 0 && (b = mb.length), mb[b] = {
              x: a.pageX,
              y: a.pageY,
              id: a.pointerId
            };
          }

          var c = Mb(a),
              d = c.length;
          _ = null, cb(), V && 1 !== d || (V = ha = !0, e.bind(window, p, f), S = ka = ia = T = $ = Y = W = X = !1, ga = null, Da("firstTouchStart", c), Ma(oa, pa), na.x = na.y = 0, Ma(kb, c[0]), Ma(lb, kb), nb.x = ta.x * ra, ob = [{
            x: kb.x,
            y: kb.y
          }], Q = P = Ea(), Sa(s, !0), zb(), Ab()), !aa && d > 1 && !fa && !$ && (t = s, X = !1, aa = W = !0, na.y = na.x = 0, Ma(oa, pa), Ma(hb, c[0]), Ma(ib, c[1]), Gb(hb, ib, vb), ub.x = Math.abs(vb.x) - pa.x, ub.y = Math.abs(vb.y) - pa.y, ba = ca = yb(hb, ib));
        }
      }
    },
        Pb = function Pb(a) {
      if (a.preventDefault(), F) {
        var b = e.arraySearch(mb, a.pointerId, "id");

        if (b > -1) {
          var c = mb[b];
          c.x = a.pageX, c.y = a.pageY;
        }
      }

      if (V) {
        var d = Mb(a);
        if (ga || Y || aa) _ = d;else if (tb.x !== ta.x * ra) ga = "h";else {
          var f = Math.abs(d[0].x - kb.x) - Math.abs(d[0].y - kb.y);
          Math.abs(f) >= gb && (ga = f > 0 ? "h" : "v", _ = d);
        }
      }
    },
        Qb = function Qb() {
      if (_) {
        var a = _.length;
        if (0 !== a) if (Ma(hb, _[0]), jb.x = hb.x - kb.x, jb.y = hb.y - kb.y, aa && a > 1) {
          if (kb.x = hb.x, kb.y = hb.y, !jb.x && !jb.y && wb(_[1], ib)) return;
          Ma(ib, _[1]), X || (X = !0, Da("zoomGestureStarted"));
          var b = yb(hb, ib),
              c = Vb(b);
          c > f.currItem.initialZoomLevel + f.currItem.initialZoomLevel / 15 && (ka = !0);
          var d = 1,
              e = Ta(),
              g = Ua();
          if (c < e) {
            if (i.pinchToClose && !ka && t <= f.currItem.initialZoomLevel) {
              var h = e - c,
                  j = 1 - h / (e / 1.2);
              Fa(j), Da("onPinchClose", j), ia = !0;
            } else d = (e - c) / e, d > 1 && (d = 1), c = e - d * (e / 3);
          } else c > g && (d = (c - g) / (6 * e), d > 1 && (d = 1), c = g + d * e);
          d < 0 && (d = 0), ba = b, Gb(hb, ib, rb), na.x += rb.x - vb.x, na.y += rb.y - vb.y, Ma(vb, rb), pa.x = La("x", c), pa.y = La("y", c), S = c > s, s = c, Ha();
        } else {
          if (!ga) return;
          if (ha && (ha = !1, Math.abs(jb.x) >= gb && (jb.x -= _[0].x - lb.x), Math.abs(jb.y) >= gb && (jb.y -= _[0].y - lb.y)), kb.x = hb.x, kb.y = hb.y, 0 === jb.x && 0 === jb.y) return;

          if ("v" === ga && i.closeOnVerticalDrag && !Bb()) {
            na.y += jb.y, pa.y += jb.y;
            var k = Ib();
            return T = !0, Da("onVerticalDrag", k), Fa(k), void Ha();
          }

          Hb(Ea(), hb.x, hb.y), Y = !0, da = f.currItem.bounds;
          var l = Nb("x", jb);
          l || (Nb("y", jb), Na(pa), Ha());
        }
      }
    },
        Rb = function Rb(a) {
      if (N.isOldAndroid) {
        if (U && "mouseup" === a.type) return;
        a.type.indexOf("touch") > -1 && (clearTimeout(U), U = setTimeout(function () {
          U = 0;
        }, 600));
      }

      Da("pointerUp"), Eb(a, !1) && a.preventDefault();
      var b;

      if (F) {
        var c = e.arraySearch(mb, a.pointerId, "id");
        if (c > -1) if (b = mb.splice(c, 1)[0], navigator.msPointerEnabled) {
          var d = {
            4: "mouse",
            2: "touch",
            3: "pen"
          };
          b.type = d[a.pointerType], b.type || (b.type = a.pointerType || "mouse");
        } else b.type = a.pointerType || "mouse";
      }

      var g,
          h = Mb(a),
          j = h.length;
      if ("mouseup" === a.type && (j = 0), 2 === j) return _ = null, !0;
      1 === j && Ma(lb, h[0]), 0 !== j || ga || fa || (b || ("mouseup" === a.type ? b = {
        x: a.pageX,
        y: a.pageY,
        type: "mouse"
      } : a.changedTouches && a.changedTouches[0] && (b = {
        x: a.changedTouches[0].pageX,
        y: a.changedTouches[0].pageY,
        type: "touch"
      })), Da("touchRelease", a, b));
      var k = -1;
      if (0 === j && (V = !1, e.unbind(window, p, f), zb(), aa ? k = 0 : sb !== -1 && (k = Ea() - sb)), sb = 1 === j ? Ea() : -1, g = k !== -1 && k < 150 ? "zoom" : "swipe", aa && j < 2 && (aa = !1, 1 === j && (g = "zoomPointerUp"), Da("zoomGestureEnded")), _ = null, Y || X || fa || T) if (cb(), R || (R = Sb()), R.calculateSwipeSpeed("x"), T) {
        var l = Ib();
        if (l < i.verticalDragRange) f.close();else {
          var m = pa.y,
              n = ja;
          db("verticalDrag", 0, 1, 300, e.easing.cubic.out, function (a) {
            pa.y = (f.currItem.initialPosition.y - m) * a + m, Fa((1 - n) * a + n), Ha();
          }), Da("onVerticalDrag", 1);
        }
      } else {
        if (($ || fa) && 0 === j) {
          var o = Ub(g, R);
          if (o) return;
          g = "zoomPointerUp";
        }

        if (!fa) return "swipe" !== g ? void Wb() : void (!$ && s > f.currItem.fitRatio && Tb(R));
      }
    },
        Sb = function Sb() {
      var a,
          b,
          c = {
        lastFlickOffset: {},
        lastFlickDist: {},
        lastFlickSpeed: {},
        slowDownRatio: {},
        slowDownRatioReverse: {},
        speedDecelerationRatio: {},
        speedDecelerationRatioAbs: {},
        distanceOffset: {},
        backAnimDestination: {},
        backAnimStarted: {},
        calculateSwipeSpeed: function calculateSwipeSpeed(d) {
          ob.length > 1 ? (a = Ea() - Q + 50, b = ob[ob.length - 2][d]) : (a = Ea() - P, b = lb[d]), c.lastFlickOffset[d] = kb[d] - b, c.lastFlickDist[d] = Math.abs(c.lastFlickOffset[d]), c.lastFlickDist[d] > 20 ? c.lastFlickSpeed[d] = c.lastFlickOffset[d] / a : c.lastFlickSpeed[d] = 0, Math.abs(c.lastFlickSpeed[d]) < .1 && (c.lastFlickSpeed[d] = 0), c.slowDownRatio[d] = .95, c.slowDownRatioReverse[d] = 1 - c.slowDownRatio[d], c.speedDecelerationRatio[d] = 1;
        },
        calculateOverBoundsAnimOffset: function calculateOverBoundsAnimOffset(a, b) {
          c.backAnimStarted[a] || (pa[a] > da.min[a] ? c.backAnimDestination[a] = da.min[a] : pa[a] < da.max[a] && (c.backAnimDestination[a] = da.max[a]), void 0 !== c.backAnimDestination[a] && (c.slowDownRatio[a] = .7, c.slowDownRatioReverse[a] = 1 - c.slowDownRatio[a], c.speedDecelerationRatioAbs[a] < .05 && (c.lastFlickSpeed[a] = 0, c.backAnimStarted[a] = !0, db("bounceZoomPan" + a, pa[a], c.backAnimDestination[a], b || 300, e.easing.sine.out, function (b) {
            pa[a] = b, Ha();
          }))));
        },
        calculateAnimOffset: function calculateAnimOffset(a) {
          c.backAnimStarted[a] || (c.speedDecelerationRatio[a] = c.speedDecelerationRatio[a] * (c.slowDownRatio[a] + c.slowDownRatioReverse[a] - c.slowDownRatioReverse[a] * c.timeDiff / 10), c.speedDecelerationRatioAbs[a] = Math.abs(c.lastFlickSpeed[a] * c.speedDecelerationRatio[a]), c.distanceOffset[a] = c.lastFlickSpeed[a] * c.speedDecelerationRatio[a] * c.timeDiff, pa[a] += c.distanceOffset[a]);
        },
        panAnimLoop: function panAnimLoop() {
          if ($a.zoomPan && ($a.zoomPan.raf = H(c.panAnimLoop), c.now = Ea(), c.timeDiff = c.now - c.lastNow, c.lastNow = c.now, c.calculateAnimOffset("x"), c.calculateAnimOffset("y"), Ha(), c.calculateOverBoundsAnimOffset("x"), c.calculateOverBoundsAnimOffset("y"), c.speedDecelerationRatioAbs.x < .05 && c.speedDecelerationRatioAbs.y < .05)) return pa.x = Math.round(pa.x), pa.y = Math.round(pa.y), Ha(), void ab("zoomPan");
        }
      };
      return c;
    },
        Tb = function Tb(a) {
      return a.calculateSwipeSpeed("y"), da = f.currItem.bounds, a.backAnimDestination = {}, a.backAnimStarted = {}, Math.abs(a.lastFlickSpeed.x) <= .05 && Math.abs(a.lastFlickSpeed.y) <= .05 ? (a.speedDecelerationRatioAbs.x = a.speedDecelerationRatioAbs.y = 0, a.calculateOverBoundsAnimOffset("x"), a.calculateOverBoundsAnimOffset("y"), !0) : (bb("zoomPan"), a.lastNow = Ea(), void a.panAnimLoop());
    },
        Ub = function Ub(a, b) {
      var c;
      fa || (qb = m);
      var d;

      if ("swipe" === a) {
        var g = kb.x - lb.x,
            h = b.lastFlickDist.x < 10;
        g > fb && (h || b.lastFlickOffset.x > 20) ? d = -1 : g < -fb && (h || b.lastFlickOffset.x < -20) && (d = 1);
      }

      var j;
      d && (m += d, m < 0 ? (m = i.loop ? ac() - 1 : 0, j = !0) : m >= ac() && (m = i.loop ? 0 : ac() - 1, j = !0), j && !i.loop || (ua += d, ra -= d, c = !0));
      var k,
          l = ta.x * ra,
          n = Math.abs(l - tb.x);
      return c || l > tb.x == b.lastFlickSpeed.x > 0 ? (k = Math.abs(b.lastFlickSpeed.x) > 0 ? n / Math.abs(b.lastFlickSpeed.x) : 333, k = Math.min(k, 400), k = Math.max(k, 250)) : k = 333, qb === m && (c = !1), fa = !0, Da("mainScrollAnimStart"), db("mainScroll", tb.x, l, k, e.easing.cubic.out, Ka, function () {
        cb(), fa = !1, qb = -1, (c || qb !== m) && f.updateCurrItem(), Da("mainScrollAnimComplete");
      }), c && f.updateCurrItem(!0), c;
    },
        Vb = function Vb(a) {
      return 1 / ca * a * t;
    },
        Wb = function Wb() {
      var a = s,
          b = Ta(),
          c = Ua();
      s < b ? a = b : s > c && (a = c);
      var d,
          g = 1,
          h = ja;
      return ia && !S && !ka && s < b ? (f.close(), !0) : (ia && (d = function d(a) {
        Fa((g - h) * a + h);
      }), f.zoomTo(a, 0, 200, e.easing.cubic.out, d), !0);
    };

    za("Gestures", {
      publicMethods: {
        initGestures: function initGestures() {
          var a = function a(_a2, b, c, d, e) {
            A = _a2 + b, B = _a2 + c, C = _a2 + d, D = e ? _a2 + e : "";
          };

          F = N.pointerEvent, F && N.touch && (N.touch = !1), F ? navigator.msPointerEnabled ? a("MSPointer", "Down", "Move", "Up", "Cancel") : a("pointer", "down", "move", "up", "cancel") : N.touch ? (a("touch", "start", "move", "end", "cancel"), G = !0) : a("mouse", "down", "move", "up"), p = B + " " + C + " " + D, q = A, F && !G && (G = navigator.maxTouchPoints > 1 || navigator.msMaxTouchPoints > 1), f.likelyTouchDevice = G, r[A] = Ob, r[B] = Pb, r[C] = Rb, D && (r[D] = r[C]), N.touch && (q += " mousedown", p += " mousemove mouseup", r.mousedown = r[A], r.mousemove = r[B], r.mouseup = r[C]), G || (i.allowPanToNext = !1);
        }
      }
    });

    var Xb,
        Yb,
        Zb,
        $b,
        _b,
        ac,
        bc,
        cc = function cc(b, c, d, g) {
      Xb && clearTimeout(Xb), $b = !0, Zb = !0;
      var h;
      b.initialLayout ? (h = b.initialLayout, b.initialLayout = null) : h = i.getThumbBoundsFn && i.getThumbBoundsFn(m);

      var j = d ? i.hideAnimationDuration : i.showAnimationDuration,
          k = function k() {
        ab("initialZoom"), d ? (f.template.removeAttribute("style"), f.bg.removeAttribute("style")) : (Fa(1), c && (c.style.display = "block"), e.addClass(_a3, "pswp--animated-in"), Da("initialZoom" + (d ? "OutEnd" : "InEnd"))), g && g(), $b = !1;
      };

      if (!j || !h || void 0 === h.x) return Da("initialZoom" + (d ? "Out" : "In")), s = b.initialZoomLevel, Ma(pa, b.initialPosition), Ha(), _a3.style.opacity = d ? 0 : 1, Fa(1), void (j ? setTimeout(function () {
        k();
      }, j) : k());

      var n = function n() {
        var c = l,
            g = !f.currItem.src || f.currItem.loadError || i.showHideOpacity;
        b.miniImg && (b.miniImg.style.webkitBackfaceVisibility = "hidden"), d || (s = h.w / b.w, pa.x = h.x, pa.y = h.y - K, f[g ? "template" : "bg"].style.opacity = .001, Ha()), bb("initialZoom"), d && !c && e.removeClass(_a3, "pswp--animated-in"), g && (d ? e[(c ? "remove" : "add") + "Class"](_a3, "pswp--animate_opacity") : setTimeout(function () {
          e.addClass(_a3, "pswp--animate_opacity");
        }, 30)), Xb = setTimeout(function () {
          if (Da("initialZoom" + (d ? "Out" : "In")), d) {
            var f = h.w / b.w,
                i = {
              x: pa.x,
              y: pa.y
            },
                l = s,
                m = ja,
                n = function n(b) {
              1 === b ? (s = f, pa.x = h.x, pa.y = h.y - M) : (s = (f - l) * b + l, pa.x = (h.x - i.x) * b + i.x, pa.y = (h.y - M - i.y) * b + i.y), Ha(), g ? _a3.style.opacity = 1 - b : Fa(m - b * m);
            };

            c ? db("initialZoom", 0, 1, j, e.easing.cubic.out, n, k) : (n(1), Xb = setTimeout(k, j + 20));
          } else s = b.initialZoomLevel, Ma(pa, b.initialPosition), Ha(), Fa(1), g ? _a3.style.opacity = 1 : Fa(1), Xb = setTimeout(k, j + 20);
        }, d ? 25 : 90);
      };

      n();
    },
        dc = {},
        ec = [],
        fc = {
      index: 0,
      errorMsg: '<div class="pswp__error-msg"><a href="%url%" target="_blank">The image</a> could not be loaded.</div>',
      forceProgressiveLoading: !1,
      preload: [1, 1],
      getNumItemsFn: function getNumItemsFn() {
        return Yb.length;
      }
    },
        gc = function gc() {
      return {
        center: {
          x: 0,
          y: 0
        },
        max: {
          x: 0,
          y: 0
        },
        min: {
          x: 0,
          y: 0
        }
      };
    },
        hc = function hc(a, b, c) {
      var d = a.bounds;
      d.center.x = Math.round((dc.x - b) / 2), d.center.y = Math.round((dc.y - c) / 2) + a.vGap.top, d.max.x = b > dc.x ? Math.round(dc.x - b) : d.center.x, d.max.y = c > dc.y ? Math.round(dc.y - c) + a.vGap.top : d.center.y, d.min.x = b > dc.x ? 0 : d.center.x, d.min.y = c > dc.y ? a.vGap.top : d.center.y;
    },
        ic = function ic(a, b, c) {
      if (a.src && !a.loadError) {
        var d = !c;

        if (d && (a.vGap || (a.vGap = {
          top: 0,
          bottom: 0
        }), Da("parseVerticalMargin", a)), dc.x = b.x, dc.y = b.y - a.vGap.top - a.vGap.bottom, d) {
          var e = dc.x / a.w,
              f = dc.y / a.h;
          a.fitRatio = e < f ? e : f;
          var g = i.scaleMode;
          "orig" === g ? c = 1 : "fit" === g && (c = a.fitRatio), c > 1 && (c = 1), a.initialZoomLevel = c, a.bounds || (a.bounds = gc());
        }

        if (!c) return;
        return hc(a, a.w * c, a.h * c), d && c === a.initialZoomLevel && (a.initialPosition = a.bounds.center), a.bounds;
      }

      return a.w = a.h = 0, a.initialZoomLevel = a.fitRatio = 1, a.bounds = gc(), a.initialPosition = a.bounds.center, a.bounds;
    },
        jc = function jc(a, b, c, d, e, g) {
      b.loadError || d && (b.imageAppended = !0, mc(b, d, b === f.currItem && ya), c.appendChild(d), g && setTimeout(function () {
        b && b.loaded && b.placeholder && (b.placeholder.style.display = "none", b.placeholder = null);
      }, 500));
    },
        kc = function kc(a) {
      a.loading = !0, a.loaded = !1;

      var b = a.img = e.createEl("pswp__img", "img"),
          c = function c() {
        a.loading = !1, a.loaded = !0, a.loadComplete ? a.loadComplete(a) : a.img = null, b.onload = b.onerror = null, b = null;
      };

      return b.onload = c, b.onerror = function () {
        a.loadError = !0, c();
      }, b.src = a.src, b;
    },
        lc = function lc(a, b) {
      if (a.src && a.loadError && a.container) return b && (a.container.innerHTML = ""), a.container.innerHTML = i.errorMsg.replace("%url%", a.src), !0;
    },
        mc = function mc(a, b, c) {
      if (a.src) {
        b || (b = a.container.lastChild);
        var d = c ? a.w : Math.round(a.w * a.fitRatio),
            e = c ? a.h : Math.round(a.h * a.fitRatio);
        a.placeholder && !a.loaded && (a.placeholder.style.width = d + "px", a.placeholder.style.height = e + "px"), b.style.width = d + "px", b.style.height = e + "px";
      }
    },
        nc = function nc() {
      if (ec.length) {
        for (var a, b = 0; b < ec.length; b++) {
          a = ec[b], a.holder.index === a.index && jc(a.index, a.item, a.baseDiv, a.img, !1, a.clearPlaceholder);
        }

        ec = [];
      }
    };

    za("Controller", {
      publicMethods: {
        lazyLoadItem: function lazyLoadItem(a) {
          a = Aa(a);

          var b = _b(a);

          b && (!b.loaded && !b.loading || x) && (Da("gettingData", a, b), b.src && kc(b));
        },
        initController: function initController() {
          e.extend(i, fc, !0), f.items = Yb = c, _b = f.getItemAt, ac = i.getNumItemsFn, bc = i.loop, ac() < 3 && (i.loop = !1), Ca("beforeChange", function (a) {
            var b,
                c = i.preload,
                d = null === a || a >= 0,
                e = Math.min(c[0], ac()),
                g = Math.min(c[1], ac());

            for (b = 1; b <= (d ? g : e); b++) {
              f.lazyLoadItem(m + b);
            }

            for (b = 1; b <= (d ? e : g); b++) {
              f.lazyLoadItem(m - b);
            }
          }), Ca("initialLayout", function () {
            f.currItem.initialLayout = i.getThumbBoundsFn && i.getThumbBoundsFn(m);
          }), Ca("mainScrollAnimComplete", nc), Ca("initialZoomInEnd", nc), Ca("destroy", function () {
            for (var a, b = 0; b < Yb.length; b++) {
              a = Yb[b], a.container && (a.container = null), a.placeholder && (a.placeholder = null), a.img && (a.img = null), a.preloader && (a.preloader = null), a.loadError && (a.loaded = a.loadError = !1);
            }

            ec = null;
          });
        },
        getItemAt: function getItemAt(a) {
          return a >= 0 && void 0 !== Yb[a] && Yb[a];
        },
        allowProgressiveImg: function allowProgressiveImg() {
          return i.forceProgressiveLoading || !G || i.mouseUsed || screen.width > 1200;
        },
        setContent: function setContent(a, b) {
          i.loop && (b = Aa(b));
          var c = f.getItemAt(a.index);
          c && (c.container = null);
          var d,
              g = f.getItemAt(b);
          if (!g) return void (a.el.innerHTML = "");
          Da("gettingData", b, g), a.index = b, a.item = g;
          var h = g.container = e.createEl("pswp__zoom-wrap");
          if (!g.src && g.html && (g.html.tagName ? h.appendChild(g.html) : h.innerHTML = g.html), lc(g), ic(g, qa), !g.src || g.loadError || g.loaded) g.src && !g.loadError && (d = e.createEl("pswp__img", "img"), d.style.opacity = 1, d.src = g.src, mc(g, d), jc(b, g, h, d, !0));else {
            if (g.loadComplete = function (c) {
              if (j) {
                if (a && a.index === b) {
                  if (lc(c, !0)) return c.loadComplete = c.img = null, ic(c, qa), Ia(c), void (a.index === m && f.updateCurrZoomItem());
                  c.imageAppended ? !$b && c.placeholder && (c.placeholder.style.display = "none", c.placeholder = null) : N.transform && (fa || $b) ? ec.push({
                    item: c,
                    baseDiv: h,
                    img: c.img,
                    index: b,
                    holder: a,
                    clearPlaceholder: !0
                  }) : jc(b, c, h, c.img, fa || $b, !0);
                }

                c.loadComplete = null, c.img = null, Da("imageLoadComplete", b, c);
              }
            }, e.features.transform) {
              var k = "pswp__img pswp__img--placeholder";
              k += g.msrc ? "" : " pswp__img--placeholder--blank";
              var l = e.createEl(k, g.msrc ? "img" : "");
              g.msrc && (l.src = g.msrc), mc(g, l), h.appendChild(l), g.placeholder = l;
            }

            g.loading || kc(g), f.allowProgressiveImg() && (!Zb && N.transform ? ec.push({
              item: g,
              baseDiv: h,
              img: g.img,
              index: b,
              holder: a
            }) : jc(b, g, h, g.img, !0, !0));
          }
          Zb || b !== m ? Ia(g) : (ea = h.style, cc(g, d || g.img)), a.el.innerHTML = "", a.el.appendChild(h);
        },
        cleanSlide: function cleanSlide(a) {
          a.img && (a.img.onload = a.img.onerror = null), a.loaded = a.loading = a.img = a.imageAppended = !1;
        }
      }
    });

    var oc,
        pc = {},
        qc = function qc(a, b, c) {
      var d = document.createEvent("CustomEvent"),
          e = {
        origEvent: a,
        target: a.target,
        releasePoint: b,
        pointerType: c || "touch"
      };
      d.initCustomEvent("pswpTap", !0, !0, e), a.target.dispatchEvent(d);
    };

    za("Tap", {
      publicMethods: {
        initTap: function initTap() {
          Ca("firstTouchStart", f.onTapStart), Ca("touchRelease", f.onTapRelease), Ca("destroy", function () {
            pc = {}, oc = null;
          });
        },
        onTapStart: function onTapStart(a) {
          a.length > 1 && (clearTimeout(oc), oc = null);
        },
        onTapRelease: function onTapRelease(a, b) {
          if (b && !Y && !W && !_a) {
            var c = b;
            if (oc && (clearTimeout(oc), oc = null, xb(c, pc))) return void Da("doubleTap", c);
            if ("mouse" === b.type) return void qc(a, b, "mouse");
            var d = a.target.tagName.toUpperCase();
            if ("BUTTON" === d || e.hasClass(a.target, "pswp__single-tap")) return void qc(a, b);
            Ma(pc, c), oc = setTimeout(function () {
              qc(a, b), oc = null;
            }, 300);
          }
        }
      }
    });
    var rc;
    za("DesktopZoom", {
      publicMethods: {
        initDesktopZoom: function initDesktopZoom() {
          L || (G ? Ca("mouseUsed", function () {
            f.setupDesktopZoom();
          }) : f.setupDesktopZoom(!0));
        },
        setupDesktopZoom: function setupDesktopZoom(b) {
          rc = {};
          var c = "wheel mousewheel DOMMouseScroll";
          Ca("bindEvents", function () {
            e.bind(_a3, c, f.handleMouseWheel);
          }), Ca("unbindEvents", function () {
            rc && e.unbind(_a3, c, f.handleMouseWheel);
          }), f.mouseZoomedIn = !1;

          var d,
              g = function g() {
            f.mouseZoomedIn && (e.removeClass(_a3, "pswp--zoomed-in"), f.mouseZoomedIn = !1), s < 1 ? e.addClass(_a3, "pswp--zoom-allowed") : e.removeClass(_a3, "pswp--zoom-allowed"), h();
          },
              h = function h() {
            d && (e.removeClass(_a3, "pswp--dragging"), d = !1);
          };

          Ca("resize", g), Ca("afterChange", g), Ca("pointerDown", function () {
            f.mouseZoomedIn && (d = !0, e.addClass(_a3, "pswp--dragging"));
          }), Ca("pointerUp", h), b || g();
        },
        handleMouseWheel: function handleMouseWheel(a) {
          if (s <= f.currItem.fitRatio) return i.modal && (!i.closeOnScroll || _a || V ? a.preventDefault() : E && Math.abs(a.deltaY) > 2 && (l = !0, f.close())), !0;
          if (a.stopPropagation(), rc.x = 0, "deltaX" in a) 1 === a.deltaMode ? (rc.x = 18 * a.deltaX, rc.y = 18 * a.deltaY) : (rc.x = a.deltaX, rc.y = a.deltaY);else if ("wheelDelta" in a) a.wheelDeltaX && (rc.x = -.16 * a.wheelDeltaX), a.wheelDeltaY ? rc.y = -.16 * a.wheelDeltaY : rc.y = -.16 * a.wheelDelta;else {
            if (!("detail" in a)) return;
            rc.y = a.detail;
          }
          Sa(s, !0);
          var b = pa.x - rc.x,
              c = pa.y - rc.y;
          (i.modal || b <= da.min.x && b >= da.max.x && c <= da.min.y && c >= da.max.y) && a.preventDefault(), f.panTo(b, c);
        },
        toggleDesktopZoom: function toggleDesktopZoom(b) {
          b = b || {
            x: qa.x / 2 + sa.x,
            y: qa.y / 2 + sa.y
          };
          var c = i.getDoubleTapZoom(!0, f.currItem),
              d = s === c;
          f.mouseZoomedIn = !d, f.zoomTo(d ? f.currItem.initialZoomLevel : c, b, 333), e[(d ? "remove" : "add") + "Class"](_a3, "pswp--zoomed-in");
        }
      }
    });

    var sc,
        tc,
        uc,
        vc,
        wc,
        xc,
        yc,
        zc,
        Ac,
        Bc,
        Cc,
        Dc,
        Ec = {
      history: !0,
      galleryUID: 1
    },
        Fc = function Fc() {
      return Cc.hash.substring(1);
    },
        Gc = function Gc() {
      sc && clearTimeout(sc), uc && clearTimeout(uc);
    },
        Hc = function Hc() {
      var a = Fc(),
          b = {};
      if (a.length < 5) return b;
      var c,
          d = a.split("&");

      for (c = 0; c < d.length; c++) {
        if (d[c]) {
          var e = d[c].split("=");
          e.length < 2 || (b[e[0]] = e[1]);
        }
      }

      if (i.galleryPIDs) {
        var f = b.pid;

        for (b.pid = 0, c = 0; c < Yb.length; c++) {
          if (Yb[c].pid === f) {
            b.pid = c;
            break;
          }
        }
      } else b.pid = parseInt(b.pid, 10) - 1;

      return b.pid < 0 && (b.pid = 0), b;
    },
        Ic = function Ic() {
      if (uc && clearTimeout(uc), _a || V) return void (uc = setTimeout(Ic, 500));
      vc ? clearTimeout(tc) : vc = !0;

      var a = m + 1,
          b = _b(m);

      b.hasOwnProperty("pid") && (a = b.pid);
      var c = yc + "&gid=" + i.galleryUID + "&pid=" + a;
      zc || Cc.hash.indexOf(c) === -1 && (Bc = !0);
      var d = Cc.href.split("#")[0] + "#" + c;
      Dc ? "#" + c !== window.location.hash && history[zc ? "replaceState" : "pushState"]("", document.title, d) : zc ? Cc.replace(d) : Cc.hash = c, zc = !0, tc = setTimeout(function () {
        vc = !1;
      }, 60);
    };

    za("History", {
      publicMethods: {
        initHistory: function initHistory() {
          if (e.extend(i, Ec, !0), i.history) {
            Cc = window.location, Bc = !1, Ac = !1, zc = !1, yc = Fc(), Dc = "pushState" in history, yc.indexOf("gid=") > -1 && (yc = yc.split("&gid=")[0], yc = yc.split("?gid=")[0]), Ca("afterChange", f.updateURL), Ca("unbindEvents", function () {
              e.unbind(window, "hashchange", f.onHashChange);
            });

            var a = function a() {
              xc = !0, Ac || (Bc ? history.back() : yc ? Cc.hash = yc : Dc ? history.pushState("", document.title, Cc.pathname + Cc.search) : Cc.hash = ""), Gc();
            };

            Ca("unbindEvents", function () {
              l && a();
            }), Ca("destroy", function () {
              xc || a();
            }), Ca("firstUpdate", function () {
              m = Hc().pid;
            });
            var b = yc.indexOf("pid=");
            b > -1 && (yc = yc.substring(0, b), "&" === yc.slice(-1) && (yc = yc.slice(0, -1))), setTimeout(function () {
              j && e.bind(window, "hashchange", f.onHashChange);
            }, 40);
          }
        },
        onHashChange: function onHashChange() {
          return Fc() === yc ? (Ac = !0, void f.close()) : void (vc || (wc = !0, f.goTo(Hc().pid), wc = !1));
        },
        updateURL: function updateURL() {
          Gc(), wc || (zc ? sc = setTimeout(Ic, 800) : Ic());
        }
      }
    }), e.extend(f, eb);
  };

  return a;
});

/***/ }),

/***/ "./assets/vendor/pugxautocompleter/autocompleter-select2.js":
/*!******************************************************************!*\
  !*** ./assets/vendor/pugxautocompleter/autocompleter-select2.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {(function ($) {
  'use strict';

  $.fn.autocompleter = function (options) {
    var settings = {
      url_list: '',
      url_get: '',
      placeholder: '',
      otherOptions: {
        minimumInputLength: 2
      }
    };
    return this.each(function () {
      if (options) {
        $.extend(true, settings, options);
      }

      var $this = $(this);
      var $fakeInput = $this.clone();
      var val = '';
      var select2options = {
        ajax: {
          url: settings.url_list,
          dataType: 'json',
          delay: 250,
          placeholder: settings.placeholder,
          data: function data(params) {
            return {
              q: params
            };
          },
          results: function results(data) {
            var results = [];
            $.each(data, function (index, item) {
              results.push({
                id: item.id,
                text: item.text
              });
            });
            return {
              results: results
            };
          },
          cache: true
        },
        escapeMarkup: function escapeMarkup(markup) {
          return markup;
        },
        initSelection: function initSelection(element, callback) {
          var data = {
            id: element.val(),
            text: val
          };
          callback(data);
        }
      };
      $this.removeAttr('required');
      $fakeInput.removeAttr('required');

      if (settings.otherOptions) {
        $.extend(true, select2options, options.otherOptions);
      }

      $fakeInput.attr('id', 'fake_' + $fakeInput.attr('id'));
      $fakeInput.attr('name', 'fake_' + $fakeInput.attr('name'));
      $this.hide().after($fakeInput);
      $fakeInput.select2(select2options);

      if ($this.attr('value')) {
        $.ajax({
          url: (settings.url_get.substring(-1) === '/' ? settings.url_get : settings.url_get + '/') + $this.attr('value'),
          success: function success(name) {
            val = name;
            $fakeInput.select2('val', name);
          }
        });
      }

      $fakeInput.on('change', function (e) {
        $this.val(e.val).change();
      });
    });
  };
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/vendor/select2/select2-bootstrap4.min.css":
/*!**********************************************************!*\
  !*** ./assets/vendor/select2/select2-bootstrap4.min.css ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.min.js":
/*!************************************************************************************!*\
  !*** ./vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.min.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");

__webpack_require__(/*! core-js/modules/es.object.freeze.js */ "./node_modules/core-js/modules/es.object.freeze.js");

__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!function (e, t) {
  var n = t();
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (n.Routing),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  "use strict";

  function e(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  var t = Object.assign || function (e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];

      for (var o in n) {
        Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
      }
    }

    return e;
  },
      n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
    return _typeof(e);
  } : function (e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
  },
      o = function () {
    function e(e, t) {
      for (var n = 0; n < t.length; n++) {
        var o = t[n];
        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
      }
    }

    return function (t, n, o) {
      return n && e(t.prototype, n), o && e(t, o), t;
    };
  }(),
      r = function () {
    function r(t, n) {
      e(this, r), this.context_ = t || {
        base_url: "",
        prefix: "",
        host: "",
        port: "",
        scheme: "",
        locale: ""
      }, this.setRoutes(n || {});
    }

    return o(r, [{
      key: "setRoutingData",
      value: function value(e) {
        this.setBaseUrl(e.base_url), this.setRoutes(e.routes), "prefix" in e && this.setPrefix(e.prefix), "port" in e && this.setPort(e.port), "locale" in e && this.setLocale(e.locale), this.setHost(e.host), this.setScheme(e.scheme);
      }
    }, {
      key: "setRoutes",
      value: function value(e) {
        this.routes_ = Object.freeze(e);
      }
    }, {
      key: "getRoutes",
      value: function value() {
        return this.routes_;
      }
    }, {
      key: "setBaseUrl",
      value: function value(e) {
        this.context_.base_url = e;
      }
    }, {
      key: "getBaseUrl",
      value: function value() {
        return this.context_.base_url;
      }
    }, {
      key: "setPrefix",
      value: function value(e) {
        this.context_.prefix = e;
      }
    }, {
      key: "setScheme",
      value: function value(e) {
        this.context_.scheme = e;
      }
    }, {
      key: "getScheme",
      value: function value() {
        return this.context_.scheme;
      }
    }, {
      key: "setHost",
      value: function value(e) {
        this.context_.host = e;
      }
    }, {
      key: "getHost",
      value: function value() {
        return this.context_.host;
      }
    }, {
      key: "setPort",
      value: function value(e) {
        this.context_.port = e;
      }
    }, {
      key: "getPort",
      value: function value() {
        return this.context_.port;
      }
    }, {
      key: "setLocale",
      value: function value(e) {
        this.context_.locale = e;
      }
    }, {
      key: "getLocale",
      value: function value() {
        return this.context_.locale;
      }
    }, {
      key: "buildQueryParams",
      value: function value(e, t, o) {
        var r = this,
            i = void 0,
            u = new RegExp(/\[\]$/);
        if (t instanceof Array) t.forEach(function (t, i) {
          u.test(e) ? o(e, t) : r.buildQueryParams(e + "[" + ("object" === ("undefined" == typeof t ? "undefined" : n(t)) ? i : "") + "]", t, o);
        });else if ("object" === ("undefined" == typeof t ? "undefined" : n(t))) for (i in t) {
          this.buildQueryParams(e + "[" + i + "]", t[i], o);
        } else o(e, t);
      }
    }, {
      key: "getRoute",
      value: function value(e) {
        var t = this.context_.prefix + e,
            n = e + "." + this.context_.locale,
            o = this.context_.prefix + e + "." + this.context_.locale,
            r = [t, n, o, e];

        for (var i in r) {
          if (r[i] in this.routes_) return this.routes_[r[i]];
        }

        throw new Error('The route "' + e + '" does not exist.');
      }
    }, {
      key: "generate",
      value: function value(e, n) {
        var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            i = this.getRoute(e),
            u = n || {},
            s = t({}, u),
            c = "",
            a = !0,
            l = "",
            f = "undefined" == typeof this.getPort() || null === this.getPort() ? "" : this.getPort();

        if (i.tokens.forEach(function (t) {
          if ("text" === t[0]) return c = r.encodePathComponent(t[1]) + c, void (a = !1);
          {
            if ("variable" !== t[0]) throw new Error('The token type "' + t[0] + '" is not supported.');
            var n = i.defaults && t[3] in i.defaults;

            if (!1 === a || !n || t[3] in u && u[t[3]] != i.defaults[t[3]]) {
              var o = void 0;
              if (t[3] in u) o = u[t[3]], delete s[t[3]];else {
                if (!n) {
                  if (a) return;
                  throw new Error('The route "' + e + '" requires the parameter "' + t[3] + '".');
                }

                o = i.defaults[t[3]];
              }
              var l = !0 === o || !1 === o || "" === o;

              if (!l || !a) {
                var f = r.encodePathComponent(o);
                "null" === f && null === o && (f = ""), c = t[1] + f + c;
              }

              a = !1;
            } else n && t[3] in s && delete s[t[3]];
          }
        }), "" === c && (c = "/"), i.hosttokens.forEach(function (e) {
          var t = void 0;
          return "text" === e[0] ? void (l = e[1] + l) : void ("variable" === e[0] && (e[3] in u ? (t = u[e[3]], delete s[e[3]]) : i.defaults && e[3] in i.defaults && (t = i.defaults[e[3]]), l = e[1] + t + l));
        }), c = this.context_.base_url + c, i.requirements && "_scheme" in i.requirements && this.getScheme() != i.requirements._scheme) {
          var h = l || this.getHost();
          c = i.requirements._scheme + "://" + h + (h.indexOf(":" + f) > -1 || "" === f ? "" : ":" + f) + c;
        } else if ("undefined" != typeof i.schemes && "undefined" != typeof i.schemes[0] && this.getScheme() !== i.schemes[0]) {
          var p = l || this.getHost();
          c = i.schemes[0] + "://" + p + (p.indexOf(":" + f) > -1 || "" === f ? "" : ":" + f) + c;
        } else l && this.getHost() !== l + (l.indexOf(":" + f) > -1 || "" === f ? "" : ":" + f) ? c = this.getScheme() + "://" + l + (l.indexOf(":" + f) > -1 || "" === f ? "" : ":" + f) + c : o === !0 && (c = this.getScheme() + "://" + this.getHost() + (this.getHost().indexOf(":" + f) > -1 || "" === f ? "" : ":" + f) + c);

        if (Object.keys(s).length > 0) {
          var d = void 0,
              y = [],
              v = function v(e, t) {
            t = "function" == typeof t ? t() : t, t = null === t ? "" : t, y.push(r.encodeQueryComponent(e) + "=" + r.encodeQueryComponent(t));
          };

          for (d in s) {
            this.buildQueryParams(d, s[d], v);
          }

          c = c + "?" + y.join("&");
        }

        return c;
      }
    }], [{
      key: "getInstance",
      value: function value() {
        return i;
      }
    }, {
      key: "setData",
      value: function value(e) {
        var t = r.getInstance();
        t.setRoutingData(e);
      }
    }, {
      key: "customEncodeURIComponent",
      value: function value(e) {
        return encodeURIComponent(e).replace(/%2F/g, "/").replace(/%40/g, "@").replace(/%3A/g, ":").replace(/%21/g, "!").replace(/%3B/g, ";").replace(/%2C/g, ",").replace(/%2A/g, "*").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/'/g, "%27");
      }
    }, {
      key: "encodePathComponent",
      value: function value(e) {
        return r.customEncodeURIComponent(e).replace(/%3D/g, "=").replace(/%2B/g, "+").replace(/%21/g, "!").replace(/%7C/g, "|");
      }
    }, {
      key: "encodeQueryComponent",
      value: function value(e) {
        return r.customEncodeURIComponent(e).replace(/%3F/g, "?");
      }
    }]), r;
  }();

  r.Route, r.Context;
  var i = new r();
  return {
    Router: r,
    Routing: i
  };
});

/***/ }),

/***/ "./web/js/fos_js_routes.json":
/*!***********************************!*\
  !*** ./web/js/fos_js_routes.json ***!
  \***********************************/
/*! exports provided: base_url, routes, prefix, host, port, scheme, locale, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"base_url\":\"\",\"routes\":{\"dashboard_attendee_cart\":{\"tokens\":[[\"text\",\"/dashboard/attendee/cart\"],[\"variable\",\"/\",\"en|\",\"_locale\"]],\"defaults\":{\"_locale\":[]},\"requirements\":{\"_locale\":\"en|\"},\"hosttokens\":[],\"methods\":[],\"schemes\":[]},\"get_events\":{\"tokens\":[[\"text\",\"/api/get-events\"],[\"variable\",\"/\",\"en|\",\"_locale\"]],\"defaults\":{\"_locale\":[]},\"requirements\":{\"_locale\":\"en|\"},\"hosttokens\":[],\"methods\":[],\"schemes\":[]},\"bazinga_jstranslation_js\":{\"tokens\":[[\"variable\",\".\",\"js|json\",\"_format\"],[\"variable\",\"/\",\"[\\\\w]+\",\"domain\"],[\"text\",\"/translations\"]],\"defaults\":{\"domain\":\"messages\",\"_format\":\"js\"},\"requirements\":{\"_format\":\"js|json\",\"domain\":\"[\\\\w]+\"},\"hosttokens\":[],\"methods\":[\"GET\"],\"schemes\":[]}},\"prefix\":\"\",\"host\":\"https://www.aafnoticket.com\",\"port\":\"\",\"scheme\":\"http\",\"locale\":[]}");

/***/ })

},[["./assets/js/app.js","runtime","vendors~app~app.ar~app.es~app.fr~event~events~installer~organizerprofile","vendors~app~event~events~installer~organizerprofile","vendors~app~events~installer~organizerprofile","vendors~app~events~organizerprofile","vendors~app~installer","vendors~app"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,